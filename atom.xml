<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Mindon.IDEA]]></title>
  <link href="http://mindon.github.com/atom.xml" rel="self"/>
  <link href="http://mindon.github.com/"/>
  <updated>2012-04-18T00:19:45+08:00</updated>
  <id>http://mindon.github.com/</id>
  <author>
    <name><![CDATA[Mindon Feng]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Find out Unique Elements in a Javascript Array]]></title>
    <link href="http://mindon.github.com/blog/2012/04/17/find-out-unique-javascript-array-elements/"/>
    <updated>2012-04-17T22:53:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/04/17/find-out-unique-javascript-array-elements</id>
    <content type="html"><![CDATA[<p>To remove duplicate elements in a array, there are a few algorithms to implement.</p>

<h2>Algorithm 1</h2>

<pre><code>function unique1(d) {
  var o = {}, i, l = d.length, r = [];
  for(i=0; i&lt;l;i+=1) o[d[i]] = d[i];
  for(i in o) r.push(o[i]);
  return r;
};
</code></pre>

<p>This method has 2 loops, that&#8217;s a big time-cost problem.</p>

<h2>Algorithm 2</h2>

<p>reduce one loop from the algorithm 1, improve a litter bit</p>

<pre><code>function unique2(d) {
  var r = [], i = {}, j = 0;
  for(var k=0, kmax=d.length; k&lt;kmax; k++) {
    if(!i[d[k]]) {
      i[d[k]] = 1;
      r[j++]=d[k];
    }
  }
  return r;
}
</code></pre>

<h2>Algorithm 3</h2>

<p>In ECMA-262 standard, there&#8217;s a indexOf method for Array object, we use it to improve a lot.</p>

<pre><code>function unique3(d) {
  var r = [], j = 0;
  for(var k=0, kmax=d.length; k&lt;kmax; k++) {
    if(r.indexOf(d[k]) &lt; 0) {
      r[j++]=d[k];
    }
  }
  return r;
}
</code></pre>

<p>and it could be better&#8230;</p>

<!--more-->


<h2>Algorithm 4</h2>

<p>jQuery.unique source ( Sizzle.uniqueSort ), it&#8217;s the fastest one.</p>

<pre><code>function unique4( d ) {
  d.sort();
  for (var i = 1; i &lt; d.length; i++ ) {
    if ( d[i] === d[ i - 1 ] ) {
      d.splice( i--, 1 );
    }
  }

  return d;
};
</code></pre>

<h2>Compare these 4 algorithms:</h2>

<p>Speed(Performance): 4 > 3 > 2 > 1</p>

<p>Testing code:</p>

<pre><code>var d = [1, 3, 2, '2'];

function test(fn, count) {
  var t = new Date().getTime();
  for(var k =0 ; k &lt; count; k++) {
    fn(d);
  }

  return new Date().getTime() - t;
}

var t1 = test(unique1, 100000);
var t2 = test(unique2, 100000);
var t3 = test(unique3, 100000);
var t4 = test(unique4, 100000);
</code></pre>

<p>Time consume result sample:</p>

<p>IE 9(in Editplus):</p>

<pre><code>[t1,t2,t3,t4] = [93, 55, 25, 25]
</code></pre>

<p>IE 9(Browser):</p>

<pre><code>[t1,t2,t3,t4] = [508, 449, 432, 271]
</code></pre>

<p>Chrome 18:</p>

<pre><code>[t1,t2,t3,t4] = [141, 59, 43, 43]
</code></pre>

<p>Firefox 11:</p>

<pre><code>[t1,t2,t3,t4] = [129, 118, 25, 37]
</code></pre>

<p>(use == instead of === in unique4 will make it a little bit faster.)</p>

<h2>Problems</h2>

<p>handling a array with different data types:</p>

<pre><code>var d = [1, 3, 2, '2'];
</code></pre>

<p>results:</p>

<pre><code>unique1(d) : [1, '2', 3]

unique2(d) : [1, 3, 2]

unique3(d) : [1, 3, 2, '2']

unique4(d) : [1, 2, '2', 3]
</code></pre>

<p>if we change the === in unique4 into ==, then the new result will be</p>

<pre><code>unique4(d) : [1, 2, 3]
</code></pre>

<p>Another issue is the order problem:</p>

<p>unique1 and unique4 will re-order elements.</p>

<p>unique2 and unique3 will keep the original order.</p>

<p>Algorithm 3: unique3 depends on indexOf of ECMA-262 standard implement, and it cannot handle different data types.</p>

<h2>Conclusion</h2>

<ul>
<li>Same data-type elements</li>
</ul>


<p>orgianl order: <strong>unique3</strong></p>

<p>sorted: <strong>unique4</strong></p>

<ul>
<li>Different data-type elements ( thinking &#8216;2&#8217; is the same as 2 )</li>
</ul>


<p>orgianl order: <strong>unique2</strong></p>

<p>sorted: <strong>unique4</strong> (!NOTICE: change === into == )</p>

<ul>
<li>Different data-type elements ( thinking &#8216;2&#8217; is different from 2 )</li>
</ul>


<p>orgianl order: <strong>unique3</strong></p>

<p>sorted: <strong>unique4</strong> (!NOTICE: keep === )</p>

<p>以上为去除数组中的重复元素的各种算法，性能及问题。</p>

<p>&#8212; Mindon(麦盾) Apri 18, 2012 Shenzhen(深圳)</p>

<p>（整理这样一篇东西还挺耗时的，子时了zZzZZz&#8230; ）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[外出Aby发回的菜谱]]></title>
    <link href="http://mindon.github.com/blog/2012/04/17/abys-menu/"/>
    <updated>2012-04-17T22:41:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/04/17/abys-menu</id>
    <content type="html"><![CDATA[<p>Aby 不在身边，吃饭的事情也不能马虎了。给我特意准备了菜单，提醒我注意饮食：</p>

<hr />

<h2>早餐选择：</h2>

<p>1、花卷+豆浆</p>

<p>2、牛奶+吐司（夹蛋）</p>

<p>吐司可从岁宝可颂坊买，或者买白吐司。</p>

<p>3、粥</p>

<p>可配菜：</p>

<p>香菜炒蛋、酱炒蛋（冰箱里有）</p>

<!--more-->


<p>4、面条：冰箱里的细面</p>

<p>1）先煎蛋，双面煎，不用煎特别透，盛出</p>

<p>2）加水煮面，水开后5分钟左右，加入青菜，至熟，加盐，淋芝麻油。</p>

<p>5、意粉</p>

<p>1）可先煎蛋</p>

<p>2）加水煮意粉，可加些胡萝卜、黄瓜块。</p>

<p>6、云吞</p>

<p>煮熟可加香菜、虾皮，淋芝麻油。</p>

<h2>正餐：</h2>

<p>1、排骨汤</p>

<p>买扇骨，可加花生、马蹄</p>

<p>配料：玉竹、百合、党参、淮山 （冰箱里有）</p>

<p>2、苦瓜炒蛋 或炒肉片 （做法同，可加适量酱油）</p>

<p>1）苦瓜过水</p>

<p>2）炒蛋盛出</p>

<p>3）再加油炒苦瓜，放入鸡蛋，调盐。</p>

<p>3、小瓜炒蛋/肉</p>

<p>1）切蒜备用</p>

<p>2）炒蛋或肉，盛出。如炒肉，肉需先用淀粉、料酒腌下</p>

<p>3）加油，先炒蒜，加入小瓜，加入肉，加少许酱油，盐、芝麻油。</p>

<p>4、黄花菜炒肉</p>

<p>黄花菜放在橱柜最下面放调料的抽屉。炒法同上。</p>

<p>5、香菇炒肉</p>

<p>1）肉切片，拿少许淀粉、酱油、香油腌5分钟</p>

<p>2）香菇1切2块，葱切小段</p>

<p>3）放油，炒肉，变色盛出</p>

<p>4）下香菇，放少许料酒、酱油，炒至有出水情况，放入肉片，加盐、淋芝麻油，加小葱出锅。</p>

<p>6、拌黄瓜</p>

<p>黄瓜削皮，切蒜末，放入盐、酱油少许、醋、芝麻油。</p>

<p>7、素炒豆芽</p>

<p>8、木须肉</p>

<p>1）泡发木耳</p>

<p>2）1个鸡蛋打散，炒蛋，盛出</p>

<p>3）肉切片，用少许淀粉、酱油、香油腌一下</p>

<p>4）炒肉至变色，盛出</p>

<p>5）加油，加入葱（大葱）、姜丝炝锅，炒木耳，3分钟左右，再放入肉片，加入酱油少许，放入鸡蛋，放盐、淋芝麻油，出锅。</p>

<hr />

<p>材料、做法和步骤都给列出来了 :-)</p>

<p>嗯，一定会参考着来喂好自己的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Modern Superstitions]]></title>
    <link href="http://mindon.github.com/blog/2012/04/15/modern-superstitions/"/>
    <updated>2012-04-15T17:42:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/04/15/modern-superstitions</id>
    <content type="html"><![CDATA[<h2>现代迷信</h2>

<p>相信任何事的三个坏理由：<strong>传统</strong>、<strong>权威</strong>和<strong>启示</strong>。</p>

<p>互联网时代，也是谣言、谎话、虚假广告、洗脑流行的时代，你有什么根据相信你所听到的、看到的文字或这画面？</p>

<p>大多时候，我们其实毫无根据——就是相信了。</p>

<p>大脑被商业化广告植入了太多的无根据信任。</p>

<!--more-->


<h2>医院迷信</h2>

<p>医院，已然成为迷信。有几个医生能回答您2个为什么吗？</p>

<ul>
<li>Q: 为什么就生病了？</li>
</ul>


<p>A: 生病是因为什么什么分泌不正常了，什么什么发炎了？</p>

<ul>
<li>Q: 为什么会发炎或者不正常了？</li>
</ul>


<p>A: …… 可能是因为什么什么吧？！</p>

<p>可能！这就是我们相信医院，并把健康和性命交付给他们的理由吗？</p>

<p>嗯！他们有仪器、检测手段…… 能把人当成机器一样解剖、分析处理。</p>

<p>不说人体是何等复杂的系统，就是计算机这样的系统出问题时，特别是软件问题，你相信显微切片和化学分析能帮你恢复一个丢失的文档吗？</p>

<p>当然，不能一棍子打死——我说的只是我们身边的医院。:p</p>

<p>推荐阅读：《走进中医》（唐云）<a href="http://www.360doc.com/content/10/1007/17/300026_59111599.shtml">阅读</a> <a href="http://product.dangdang.com/product.aspx?product_id=8854176">购买</a></p>

<h2>科学迷信</h2>

<p>科学的进化链；假想——理论——验证——预测，这是个没有终点的循环。</p>

<p>不由分说想当然地直接否定，不是科学态度。</p>

<p>事实和实验，才是理论支撑的根本。你相信的东西，有没有提供这些？</p>

<p>科学是不断进化的东西，每一次进化都会否定掉一些之前认为绝对正确的东西，看起来不合情理的事情，才是科学进步的突破口。</p>

<h2>生活迷信</h2>

<p>拍婚纱照是不是理所当然的事情？</p>

<p>钻石戒指是不是结婚理所当然的事情？</p>

<p>节日庆祝是不是理所当然的事情？</p>

<p>旅游购物是不是理所当然的事情？</p>

<p>拥有某样东西是显得自己更时尚和优越的事情？</p>

<p>仔细想想，确实如此吗？有没有觉得，这是商家所要在大家大脑里建立的一种迷信——通过洗脑让你觉得这样才是理所当然的。</p>

<p>商业化需要推销，推销就是要让你坚信：产品对你是最好的，你的选择没错。</p>

<p>关于投资、保险、环保、成功…… 何尝不是另一种迷信呢？</p>

<p>（关于环保，请不要忘记，自然是一个生态系统，任何环境的过分破坏或者过分保护都会造成生态系统的平衡受到破坏。一般的环保，似乎过于强调保护，而忽视生态平衡。）</p>

<p>想起了《盗梦空间》(Inception)最后成功在所有观影人脑海中植入了一个想法：</p>

<p>旋转的陀螺是验证在梦境或现实的依据。</p>

<p>Inception的这个想法的植入得非常成功，关于片子的讨论大多围绕着这个植入的点。</p>

<h2>关于相信：好的理由和坏的理由</h2>

<p>七年前，那还是在敏思博客写博客的日子，曾经转过一篇文章：</p>

<p>【<strong>关于相信：好的理由和坏的理由</strong>】（一个父亲给自己10岁的女儿写的信）</p>

<p>文章全文如下：</p>

<blockquote><p>亲爱的朱丽叶：</p>

<p>现在你10岁了，我想写给你一些对你很重要的事情。你是否曾经想过，我们是如何知道那些我们知道的东西？例如，恒星看上去好像在天空中刺出的小孔。我们是如何知道恒星其实是像太阳一样的大火球，并且它们离我们非常远？我们是如何知道地球是绕着这些恒星中的一颗——也就是太阳——运转的更小的球体？</p>

<p>这些问题的答案是“证据”。有时候证据的意思是亲眼看见（或者听见、感觉到、闻到）某事是真的。宇航员航行到了离地球足够远的地方，用他们的肉眼看到了地球是圆的。有时候我们的眼睛需要帮助。“昏星”看上去就像在天空中的明亮的闪光，但是借助一架天文望远镜，你就能看到它是一个美丽的球体——这个行星我们称之为金星。有时候，通过直接的观看（或者听，感觉……）进行学习，这叫做观察。</p>

<p>很多时候，证据并不是一个观察本身，但是观察总是在证据背后支持它。如果发生了一起谋杀，通常没人观察到它（除了凶手和被害者！）。但是侦探能够收集起许多其他的观察，它们可能全都指向一个特定的嫌疑犯。如果一个人的指纹与发现在[凶器]匕首上的指纹相符，这就是他接触过这把匕首的证据。它并没有证明他进行了谋杀，但是当它和其他许多证据联合在一起的时候，它就能起作用。有时候，一个侦探能思考一大堆的观察，然后突然意识到，如果是某某人进行了谋杀，这些观察到的东西就有了条理、可以说得通了。</p>

<p>科学家——发现地球和宇宙中什么是事实的专家——常常像侦探那样工作。他们猜测什么可能是真的（称作假说）。然后他们对自己说：假如它们是真的，我们应该看见某某。这称作预测。例如，如果这个地球是圆的真的是圆的，我们可以预测一个旅行者一直向一个方向运动，最终应该发现他回到了出发点。当一个医生说你患了麻疹了时候，他并不是看你一眼就看出了麻疹。他对你最初的观看，让他产生了一个假说，即你可能患了麻疹。然后，他对自己说，如果她患了麻疹，我应该看到……然后，他针对一系列的预测，用他的眼睛（你的身上起了斑点吗？）、手（你的额头热吗？）和耳朵（听诊肺部有麻疹的表现吗？）进行检验。只有做完这些工作之后，他才能做出决定并说：“我诊断出这个孩子患了麻疹。”有时候医生还需要作其他的检验，诸如验血或者X光。这些检验能帮助它们的眼睛、手和耳朵进行观察。</p>

<p>科学家使用证据学习这个世界的方法，比我在这封短信中说的更机敏也更复杂。但是现在我想继续谈谈证据。证据是相信某事的一个好的理由，它让你对相信某事的坏的理由产生警觉。这些坏的理由叫做“传统”、“权威”和“启示”。</p>

<p>首先说传统。几个月前，我去电视台和大约50个儿童参加一场讨论，电视台邀请这些儿童，是因为他们是在不同的宗教中长大的。一些孩子被作为基督徒培养，其他的作为犹太教徒、穆斯林、印度教徒或者锡克教徒。拿着麦克风的人问了一个又一个儿童他们信什么。他们的回答恰恰显示了我说的“传统”是什么意思。他们的信仰和证据无关。他们只是炫耀着他们的父母和祖父母的信仰——这些信仰同样也不是建立在证据的基础上的。他们这样说道：“我们印度教徒相信某某”； “我们穆斯林相信某某”；“我们基督徒相信的又是某某”。</p>

<p>当然，既然他们全都相信不同的事物，他们不可能全都是正确的。拿着麦克风的人似乎认为这很正确和合适，他甚至不会试图让他们相互争辩他们的不同点。但是这不是我现在想要说论点。我只是想问，他们的信仰从何而来。它们来自传统。传统的意思是，信仰从祖父母传给父母，再传给孩子，然后继续传下去。或者意思是一些书一个世纪一个世纪地流传下去。传统的信仰常常起源于虚无；或许起初是某人创作了它们，就像关于托尔和宙斯的故事。但是它们流传了许多世纪之后，仅仅是因为它们如此古老，所以它们就显得特别。人们相信一些事物，仅仅是因为人们相信这些事物已经很多世纪了。那就是传统。</p>

<p>传统存在的问题在于，不管这个故事创作了多久，它仍然像原始的故事一样真实或者虚假。如果你创作了一个假的故事，让它流传很多个世纪，丝毫不能让它变得更真实！</p>

<p>在英国，许多人接受英国国教的浸礼，但是它仅仅是基督教宗教的一个分支。还有其他分支，诸如俄国东正教、罗马天主教和卫理公会派。他们全都相信不同的事物。犹太人的宗教和穆斯林的宗教更加不同；并且还有不同类型的犹太教徒和穆斯林。一些人相信的东西稍微有点不同，他们因为这种意见不合而进行战争。因此，你也许会认为他们一定有些很好的理由——证据——去相信那些他们所相信的东西。但是，实际上他们不同的信仰完全是因为不同的传统。</p>

<p>让我们谈谈一个特别的传统。罗马天主教相信耶稣的母亲玛利亚非常特别，以至于她没有死，而是活着升上了天堂。其他基督教传统不同意这个说法，它们说玛利亚确实像其他人那样死去了。和罗马天主教不同，其他的教派并不太谈论玛利亚，并且他们也不把她称为“天后”。玛利亚的肉身升入天堂的这个传统并非很古老。圣经没说到她是怎么死的；事实上，这个可怜的女人几乎没有在圣经中被提到。玛利亚的肉身升入天堂的这个信仰，是在耶稣时代之后的6个世纪才被发明出来的。起先，它被人创作出来，创作的方式和任何其他故事一样，比如《白雪公主》。但是，经过数个世纪之后，它变成了一个传统，而人们开始认真接受这个故事，仅仅是因为这个故事已经流传了这么多代。传统越老，就会有更多的人认真接受它。它最终以文字的形式成为正式的罗马天主教信仰，只不过是近来的事——在 1950年。那时候我的年龄和你现在差不多大。但是，这个信仰在1950年并不比在玛利亚死后600年这个信仰被创作出来的时候更真实。</p>

<p>在这封信的末尾我还要谈传统，并且是用另一种方式看待它。但是，首先我必须谈谈另外两个相信某事的坏理由：权威和启示。</p>

<p>权威是相信某事的理由。它的意思是，因为你被某个重要的人告知要相信某事，所以你相信了它。在罗马天主教会，教皇是最重要的人，人们相信他一定是正确的，因为他是教皇。在伊斯兰教会的一派中，重要的人是蓄着胡须的老年男子，称作阿亚图拉。这个国家的许多年轻穆斯林准备进行一场谋杀，仅仅是因为一个遥远国家的阿亚图拉告诉他们这样做（那时候对萨尔曼·拉什迪(Salman Rushdie)的死亡追杀令是很著名的新闻事件。——原注）。</p>

<p>当我说到仅仅是在1950年罗马天主教才最终说他们要相信玛利亚的肉身升入了天堂，我的意思是，在1950年，教皇告诉人们，他们要相信这件事。就是这样。教皇说它是真的，那么它就是真的。现在，或许教皇一生中说的一些事是真的，而另一些是假的。并没有好的理由让你相信他所说的一切，胜过相信其他人说的一切，仅仅是因为他是教皇。现任教皇（1995年）命令他的信徒不要限制生育的数量。如果人们像教皇希望的那样，绝对服从这种权威，结果将是可怕的饥荒、疾病和战争，这都是由人口过多引起的。</p>

<p>当然，甚至在科学中，有时候我们自己没有发现证据，并且我们要接受别人说的东西。我自己没有用肉眼看到光以每秒18.6万英里（30万公里）的速度运动的证据。相反，我相信告诉我光速的那些书。这看起来像“权威”。但是，实际上它比权威好多了，因为写书的人看到了证据，并且任何人无论何时都可以自由地查验证据。那很令人欣慰。但是即便是牧师，也不会声称玛利亚的肉身升入天堂的故事有任何证据。</p>

<p>相信任何事的第三个坏理由称作“启示”。假如你在1950年问教皇，他如何知道玛利亚的肉身在人间消失，进入了天堂，他可能会说上帝已经“启示”给他了。他把自己关在他的房间里，祈祷上帝给他指导。他全靠自己想啊想啊，然后他内心越来越清楚。当教徒内心感到某事一定是正确的，即便没有证据表明它是正确的，他们就把他们的感觉称作“启示”。声称拥有启示的并非只有教皇。许多教徒也这样做。这是他们相信那些他们所相信的事的主要理由。但是这是个好理由吗？</p>

<p>假设我告诉你，你养的小狗死了。你将非常难过，你或许会说，“是真的吗？你怎么知道？它是怎么死的？”现在，假设我回到说：“事实上我并不知道佩佩（Pepe）死了。我没有证据。我只是在内心深处有一个可笑的感觉：它死了。”你会因为我惊吓了你而非常生气，因为你知道一个内心“感觉”本身不是相信一条惠比特犬死了的好理由。你需要证据。我们有时候都有内心感觉，有时候它们是对的，有时候它们不对。总之，不同的人有相反的感觉，那么我们如何认定哪个感觉是正确的？确认一条狗死了的唯一方法，是看到它死了，或者听到它的心脏停止了跳动，或者某人看到或者听到了一些真正的证据表明它死了，这个人告诉了你。</p>

<p>人们有时候说你必须相信内心深处的感觉，否则，你永远也不会相信诸如“我的妻子爱我”这样的事。但是这是一个坏论证。可以有充分的证据证明某人爱你。你和爱你的某人经历的全部时光中，你看到和听到许多小小的珍贵证据，它们加在一起就能说明问题。这不完全是像牧师称之为启示的那种内心的感觉，有一些外在的事物支持内心的感觉：四目相交、温柔的语调、小小的关怀和亲切；这才是真实的证据。</p>

<p>有时候人们内心有一个强烈的感觉，认为某人爱着他们，尽管这不是基于任何证据的。那么，他们很可能是完全错了。有一些人内心强烈感到一个著名的电影明星爱着他们，尽管这个电影明星事实上根本没有见过他们。这样的人的精神有问题。内心感觉必须被证据支持，否则你就不能信任它们。</p>

<p>内心感觉在科学上也很有价值，但是仅仅在它给了你一些想法，你后来通过寻找证据检验了它之后，它才是有价值的。一个科学家对于“感觉”一个想法是对的有种“预感”。这种感觉本身不是相信某事的好理由。但是它可以成为花些时间做个特定实验、或者用一个特定方式寻找证据的好理由。科学家总是用内心感觉获得想法。但是直到这些想法被证据支持，它们才有价值。</p>

<p>我刚才答应你再谈谈传统，并且是用另一种方式。我想试着解释为什么传统对我们如此重要。所有被（一个称为进化的过程）造就的动物都能在这类动物能生存的普通环境中生存。狮子被造就成可以在非洲平原上生存得很好。小龙虾可以在淡水中生存得很好，而龙虾被造就成能在海水中很好得生活。人也是动物，并且我们被造就成能在一个充满了……其他人的世界中很好得生活。我们“游”过“人海”。就像鱼需要用鳃在水中生存，人们需要大脑，大脑让他们能够与其他人打交道。证据海里充满咸水，人海中充满了需要学习的难事。就像语言。</p>

<p>你说英语，但是你的朋友安—凯瑟琳（Ann-Kathrin）说德语。你们都说能让你们“游过”你们各自的“人海”的语言。语言是由传统传递的。没有其它的传递方式。在英国，佩佩是一只狗（dog）。在德国，它是“ein Hund”。这些词哪个都不更正确，或者更真实。它们都只是被传下来的。为了能够善于“在他们的人海中游泳”，儿童需要学习他们自己国家的语言，以及关于他们的人民的其它一些事。这意味着他们必须吸收大量的传统信息，就像吸墨水纸。（记住，传统信息仅仅意味着它们是从祖父母传给父母，再传给儿女的。）儿童的大脑是传统信息的吸收者。并且不能指望儿童把好的和有用的传统信息（例如语言的词汇），从坏的和愚蠢的传统信息（例如相信女巫、魔鬼以及永生的处女的存在）中挑出来。</p>

<p>这很遗憾，但是事情只能是这样，即因为儿童是传统信息的吸收器，他们很可能相信任何大人们告诉它们的事情——不管真伪对错。大人告诉他们的很多东西是真的，并且是基于证据的，或者至少是通情达理的。但是如果大人告诉的某事是假的、愚蠢的，甚至是邪恶的，也没法制止儿童相信它。现在，当儿童长大之后，他们做什么？当然，他们会把它告诉下一代儿童。因此，一旦人们强烈的相信某事——即便它完全是假的，首先也从来没有任何相信它的理由——这件事就能一直存在。</p>

<p>宗教也能发生这种情况吗？相信有一个或者多个上帝、相信天堂、相信玛利亚永生、相信耶稣从来没有一个人类父亲、相信其道者能得到回报、相信葡萄酒变成了血——这些信仰没有一个得到任何好的证据的支持。然而数以百万计的人们相信它们。或许这是因为在年轻得足以相信任何事的年龄，有人要他们相信这些事。</p>

<p>还有数以百万计的人相信截然不同的事，因为在童年有人告诉了他们不同的事。穆斯林儿童被告知的事不同于基督教儿童的。他们长大之后都彻底相信他们是正确的，其他人是错的。即使是在基督教内部，罗马天主教徒、英国国教徒、圣公会教徒、震颤派教徒、教友派教徒、摩门教徒和圣滚者信仰的东西也不一样，并且他们都彻底相信他们是对的，其他人是错的。他们相信不同东西的原因都来自同一个理由，和你说英语、安—凯瑟琳说德语的理由一样。这些语言在他们的国家都可以使用。但是不同的宗教在他们的国家中都是对的，这就不是事实了，因为不同的宗教声称一些事物，但是它们是相互矛盾的。玛利亚不可能既在南爱尔兰的天主教信仰中活着，又在北爱尔兰的新教信仰中死了。</p>

<p>对于这些问题，我们应该怎么做？你做什么都不容易，因为你只有10岁。但是你可以试试这样做。下次有人告诉你听上去很重要的某事的时候，自己想想“这是那种人们或许是因为证据才相信的事吗？或者它是那种人们仅仅是因为传统、权威或者启示才相信的事？”并且，下次有人告诉你某事是真的，为什么不这样问他们：“有什么证据支持它？”如果它们不能给你一个好的答案，我希望你在相信他们说的哪怕一个字之前，先非常仔细地思考一下。</p>

<p>你亲爱的</p>

<p>爸爸</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Matching method: Predictably Irrational]]></title>
    <link href="http://mindon.github.com/blog/2012/04/15/matching-method-predictably-irrational/"/>
    <updated>2012-04-15T16:38:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/04/15/matching-method-predictably-irrational</id>
    <content type="html"><![CDATA[<p>对于正在寻求或建立长期关系的朋友，怪诞行为学（Predictably Irrational）里提到 “独木舟与夫妻关系”片段，绝对是要学习和参考的：</p>

<p><strong>遇到问题时，是会相互抱怨还是一起寻找原因，同心协力解决问题？</strong></p>

<!--more-->


<p>以下是相关的中文版本原文：</p>

<blockquote><p> 既然完全避免有关和无关的情绪影响是不可能的，我们是否有办法避免夫妻关系这样恶化呢？最简单的一条忠告是，选择一位不会造成这样螺旋下降的伴侣。当然了，你可以寻求数以百计的选配方法，从星相学到统计学，但是我认为你只需要一条河、一只独木舟、两只桨。</p>

<p> 我每次去划独木舟，总会看到夫妻或者情人因为无意中把船弄得直打转或撞到石头上而争论不休。独木舟看似容易，真正划起来却不简单，因此很容易把夫妻带到战争的边缘。我和一些夫妻一起喝酒或者去他们家吃饭，很少遇到他们发生争论，这不完全因为人们尽量要做到举止得体（说到底，难道两口子在划船时就不想举止得体吗）。我认为，这与人们有关平日正常活动的即成行为模式有关（当着生人在饭桌上激烈争论，在大多数家庭中都是绝对禁止的）。</p>

<p> 但是一到了河面上，情况就大不相同了。没有现成的规则，河水流速及流向无法预测，独木舟一会儿漂流，一会儿打转，很难预见和控制。（生活也一样，充满着意外的压力和障碍。）前后之间没有明确的劳动分工。在这种环境下，倒是有充分的机会建立和观察新鲜的行为模式。</p>

<p> <strong>如果你是夫妻中的一员，划船过程中会发生些什么？只要船不听话，你们是否就会互相抱怨（“你难道没看见那块礁石”），你们是否会一直吵得不可开交，弃船跳水，游到岸上，整整一个钟头谁也不理谁？或者，你们碰到了礁石，会不会一起找原因，弄清楚应该注意什么，同心协力继续前进？</strong></p>

<p> 这就是说，在确立长期关系之前你们应该首先寻找一种环境，那里没有现成的社交规则，来探索你们在其中的共同行为（例如，我认为那女双方在决定结婚之前应该先规划他们的婚礼）。还有，应该密切注意那些可能导致关系恶化的行为方式。一旦观察到早期的警示迹象，我们应该立即采取行动，绕开不理想的路径。</p>

<p> 最后的一条教训是：不管是划船还是在现实生活中，先冷静下来，再决定采取何种行动对我们才是有利的。否则，我们的决定将来一定会碰壁。</p></blockquote>

<p>“不过，人一旦被情绪控制，谁能说得准呢？” :p</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[There are other choices]]></title>
    <link href="http://mindon.github.com/blog/2012/04/15/there-are-other-choices/"/>
    <updated>2012-04-15T10:29:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/04/15/there-are-other-choices</id>
    <content type="html"><![CDATA[<p>昨天送Aby到机场，从地铁出来往机场的中途有个扶手电梯正在维修中。因为拖着很沉的大箱子的缘故，第一想法就是糟了——要怎么拖下那个楼梯？虽然有斜坡，但那也是不容易的事情。</p>

<p>幸运的是，旁边一个路人提醒了——左手边上有电梯！太好了！问题解决了——然而，为什么看到扶手电梯不可用的时候，只想到了旁边的楼梯，而没考虑过这样的地方一定会有直升电梯的呢？就如地铁里总有直升电梯，给不方便的人群提供选择。</p>

<p>如果独我一人这样也就算了，当我回来的时候，发现陆续走过的人也在面临同样的问题时——我提醒他们了，旁边有电梯可用——觉得这个问题其实是很普遍的。</p>

<p>这个事情的关键是：在问题的最接近的地方提供了一种选择（解决方案），并且最好的选择被放置在一个不容易发现的地方，且没有指示。</p>

<p>手动扶梯有问题了，最近且最容易被发现的解决方案是走楼梯，在没有任何提醒的情况下大多数人都没有考虑可能有别的选择——另一种就在不远处，且更好的解决方案。</p>

<p>当然，要解决这个问题其实是很简单的，就是在问题发生处，箭头指示替代方案所在。</p>

<p>在做产品过程中，这个案例是有所启发的。特此警醒自己。</p>

<hr />

<p>由这个现象，我想起了以前碰到的另外一件事情：</p>

<!--more-->


<p>相信大家对于门禁都有使用经验，刷卡的时候门禁绿灯应该会闪一下，并发出嘀的声音提醒，然后推门通过。</p>

<p>有不止一次，发现3到5个人在门禁处等待，并在轮流刷卡，门禁并没有动静，于是大家等待一个可以刷出反应的卡的到来。</p>

<p>事实是，门禁其实出故障了（具体原因未知，可能是断电了，因为灯没亮），门是开着的，只要推一下就能进去了。</p>

<p>然而，我们的判断确是：是不是自己的卡出问题了，下一张看应该可以刷开吧？却没有人动手推一下那门。</p>

<p>这个事情源于我们的思维惯性：推门动作发生总应该在门禁给出通过提示的时候进行，于是故障出现时，就出现了大家都会诧异自己为什么没有推门试试的一幕。</p>

<hr />

<p>总结：问题发生时，解决方案不一定是唯一的，要想到有别的解决方案存在的可能。</p>

<p><strong>There will be a door! Don&#8217;t hit the wall :-p</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Match encrypt &amp; decrypt in PHP and NodeJS]]></title>
    <link href="http://mindon.github.com/blog/2012/03/31/match-encrypt-and-decrypt-in-php-and-nodejs/"/>
    <updated>2012-03-31T00:20:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/03/31/match-encrypt-and-decrypt-in-php-and-nodejs</id>
    <content type="html"><![CDATA[<p>String encoded in PHP needs to decode in NodeJS?</p>

<p>Or encoded in NodeJS needs to decode in PHP?</p>

<p>Here&#8217;s a match result with aes-128-cbc &amp; their demo code, you could choose your 16 characters key &amp; a different iv(initial vector):</p>

<p>NodeJS</p>

<pre><code>var crypto = require('crypto')
  , key = 'abcdefghijklmnop'
  , iv = '0123456789123456'
  , cipher = crypto.createCipheriv('aes-128-cbc', key, iv);

var text = 'Clipher Message'
  , crypted = cipher.update(text, 'utf-8', 'hex');

crypted += cipher.final('hex');

// encrypted
console.log(crypted);


var decipher = crypto.createDecipheriv('aes-128-cbc', key, iv)
  , decrypted = decipher.update(crypted, 'hex', 'utf-8');

decrypted += decipher.final('utf-8');

// decrypted
console.log(decrypted);
</code></pre>

<!--more-->


<p>PHP</p>

<pre><code>&lt;?php
function hex2bin($hex_string) {
    return pack('H*', $hex_string);
}
$text = 'Clipher Message';
$key = 'abcdefghijklmnop';
$iv = '0123456789123456';

function iEncrypt($data, $key, $iv) {
    $blocksize = 16;
    $pad = $blocksize - (strlen($data) % $blocksize);
    $data = $data . str_repeat(chr($pad), $pad);
    return bin2hex(mcrypt_encrypt(MCRYPT_RIJNDAEL_128, $key, $data, MCRYPT_MODE_CBC, $iv));
}

function iDecrypt($data, $key, $iv) {
    return mcrypt_decrypt(MCRYPT_RIJNDAEL_128, $key, hex2bin($data), MCRYPT_MODE_CBC, $iv);
}

$encrypted = iEncrypt($text, $key, $iv);
echo $encrypted.'&lt;br/&gt;';
echo iDecrypt($encrypted, $key, $iv);
?&gt;
</code></pre>

<p><a href="http://stackoverflow.com/questions/3716691/relation-between-input-and-ciphertext-length-in-aes">Relation between input and ciphertext length in AES</a></p>

<blockquote><p>Some encryption algorithms are stream ciphers which encrypt data &#8220;bit by bit&#8221; (or &#8220;byte by byte&#8221;). Most of them produce a key-dependent stream of pseudo-random bytes, and encryption is performed by XORing that stream with the data (decryption is identical). With a stream cipher, the encrypted length is equal to the plain data length.</p>

<p>Other encryption algorithms are block ciphers. A block cipher, nominally, encrypts a single block of data of a fixed length. AES is a block cipher with 128-bit blocks (16 bytes). Note that AES-256 also uses 128-bit blocks; the &#8220;256&#8221; is about the key length, not the block length. The chaining mode is about how the data is to be split into several such blocks (this is not easy to do it securely, but CBC mode is fine). Depending on the chaining mode, the data may require some padding, i.e. a few extra bytes added at the end so that the length is appropriate for the chaining mode. The padding must be such that it can be unambiguously removed when decrypting.</p>

<p>With CBC mode, the input data must have a length multiple of the block length, so it is customary to add PKCS#5 padding: if the block length is n, then at least 1 byte is added, at most n, such that the total size is a multiple of n, and the last added bytes (possibly all of them) have numerical value k where k is the number of added bytes. Upon decryption, it suffices to look at the last decrypted byte to recover k and thus know how many padding bytes must be ultimately removed.</p>

<p>Hence, with CBC mode and AES, assuming PKCS#5 padding, if the input data has length d then the encrypted length is (d + 16) &amp; ~15. I am using C-like notation here; in plain words, the length is between d+1 and d+16, and multiple of 16.</p>

<p>There is a mode called CTR (as &#8220;counter&#8221;) in which the block cipher encrypts successive values of a counter, yielding a stream of pseudo-random bytes. This effectively turns the block cipher into a stream cipher, and thus a message of length d is encrypted into d bytes.</p>

<p>Warning: about all encryption systems (including stream ciphers) and modes require an extra value called the IV (Initial Value). Each message shall have its IV, and no two messages encrypted with the same key shall use the same IV. Some modes have extra requirements; in particular, for both CBC and CTR, the IV shall be selected randomly and uniformly with a cryptographically strong pseudo-random number generator. The IV is not secret, but must be known by the decrypter. Since each message gets its own IV, it is often needed to encode the IV along with the encrypted message. With CBC or CTR, the IV has length n, so, for AES, that&#8217;s an extra 16 bytes. I do not know what mcrypt does with the IV, but, cryptographically speaking, the IV must be managed at some point.</p></blockquote>

<p>An article on AES cliper (in Chinese) <a href="http://blog.csdn.net/searchsun/article/details/2516191">http://blog.csdn.net/searchsun/article/details/2516191</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Amazing WebGL and HTML5 Apps]]></title>
    <link href="http://mindon.github.com/blog/2012/03/26/amazing-webgl-and-html5-apps/"/>
    <updated>2012-03-26T22:13:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/03/26/amazing-webgl-and-html5-apps</id>
    <content type="html"><![CDATA[<ul>
<li><strong>Cell Cycle</strong>
Creating 3d-printable cellular models.</li>
</ul>


<p>You can shape, twist, and subdivide, transforming a simple mesh to a complex patterned structure.</p>

<p><img src="http://mindon.github.com/images/blog/chrome/nervous.png" alt="" />
Visit: <a href="http://www.chromeexperiments.com/detail/cell-cycle/">Chrome Experiments</a> | <a href="http://n-e-r-v-o-u-s.com/">Nervous System</a></p>

<ul>
<li><strong>Fluid Simulation with Turing Patterns</strong>
Author: <strong>Felix Woitzel</strong> <a href="http://www.cake23.de">http://www.cake23.de</a></li>
</ul>


<p>This demo is built on the Reaction-Diffusion template from the WebGL playground and Evgeny Demidov&#8217;s fluid simulation.</p>

<p><img src="http://mindon.github.com/images/blog/chrome/fluid.png" alt="" />
Visit: <a href="http://www.chromeexperiments.com/detail/fluid-simulation-with-turing-patterns/">Chrome Experiments</a></p>

<!--more-->


<ul>
<li><strong>Zygote Body</strong>
Author: <strong>Zygote</strong> <a href="http://www.zygote.com/">http://www.zygote.com/</a></li>
</ul>


<p>Explore a detailed 3D model of the human body. Zygote Body uses WebGL and taps directly into the GPU to accelerate rendering of 3D scenes. Take it for a spin and learn about different layers of anatomy by moving the slider or toggling layers on and off with the buttons. Not sure where something is? Try the search box</p>

<p><img src="http://mindon.github.com/images/blog/chrome/body.png" alt="" />
Visit: <a href="http://www.chromeexperiments.com/detail/body-browser/">Chrome Experiments</a></p>

<ul>
<li><strong>Google Maps - Street View</strong></li>
</ul>


<p>Google Maps with Street View lets you explore places around the world through 360-degree street-level imagery. You can check out restaurants, plan your next trip or even visit the Amazon!</p>

<p><img src="http://mindon.github.com/images/blog/chrome/amazon.jpg" alt="" />
Visit: <a href="http://maps.google.com/help/maps/streetview/gallery.html">Street View Gallery</a></p>

<p>More will be appended &#8230;</p>

<h2>How to get WebGL enable?</h2>

<ul>
<li><strong>Firefox</strong>
WebGL is supported in <a href="http://www.mozilla.com/en-US/firefox/new/">Firefox/4.0</a></li>
</ul>


<p>For testing/debugging purposes, software rendering can be used through OSMesa (off-screen Mesa), by setting the &#8220;webgl.osmesalib&#8221; variable to point to the OSMesa shared library (typically /usr/lib/libOSMesa.so). Note that the OSMesa library is required to use &#8220;gl&#8221; prefixes, not &#8220;mgl&#8221;.
You can also try setting the &#8220;webgl.force-enabled&#8221; variable to true if WebGL is not working. Variables can be accessed by typing &#8220;about:config&#8221; in the address bar.</p>

<ul>
<li><strong>Safari</strong></li>
</ul>


<p>WebGL is supported on Mac OS X 10.6 in the <a href="http://nightly.webkit.org/">WebKit nightly builds</a>.</p>

<p>After downloading and installing the browser, open the Terminal and type the following:</p>

<pre><code>defaults write com.apple.Safari WebKitWebGLEnabled -bool YES
</code></pre>

<p>This command only needs to be run once. All future invocations of the browser will run with WebGL enabled.</p>

<ul>
<li><strong>Chrome</strong></li>
</ul>


<p>WebGL is available in the <a href="http://www.google.com/chrome/">stable release of Chrome</a>.</p>

<p>Please report issues you find to either the <a href="https://www.khronos.org/webgl/public-mailing-list/">public WebGL mailing list</a> or via the <a href="http://code.google.com/p/chromium/issues/list">Chromium issue tracker</a>.</p>

<p>Enable WebGL in Chrome - <a href="about:flags">about:flags</a></p>

<p><a href="http://commondatastorage.googleapis.com/chromium-browser-continuous/index.html?path=Win/">Chrome Nightly Build</a></p>

<ul>
<li><strong>Opera</strong></li>
</ul>


<p>WebGL is supported in <a href="http://www.opera.com/browser/next/">Opera 12 alpha</a>.</p>

<p><a href="http://www.khronos.org/webgl/wiki/Getting_a_WebGL_Implementation">Getting a WebGL Implementation</a></p>

<p><a href="http://wjlgryx.iteye.com/blog/973961">开启WebGL!</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[眼干或视力模糊（中医验方）]]></title>
    <link href="http://mindon.github.com/blog/2012/03/26/improve-eyes-dry-or-eyesight-blur-problem/"/>
    <updated>2012-03-26T21:43:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/03/26/improve-eyes-dry-or-eyesight-blur-problem</id>
    <content type="html"><![CDATA[<p>Improve eyes dry or eyesight blur problem</p>

<h2>1.枸杞鲫鱼汤（中医验方）</h2>

<p><strong>主治</strong>：近视眼，视物模糊。</p>

<p><strong>配方</strong>：鲫鱼一尾（约2000克），枸杞10克。</p>

<p><strong>用法</strong>：将鲫鱼洗净去内脏，和枸杞一起煮汤，吃肉饮汤。</p>

<p><strong>按注</strong>：一方用白鱼或其他鱼代鲫鱼也可。</p>

<h2>2.牛奶鸡蛋饮（民间方）</h2>

<p><strong>主治</strong>：近视眼。</p>

<p><strong>配方</strong>：鸡蛋1只，牛奶1杯，蜂蜜1匙。</p>

<p><strong>用法</strong>：将鸡蛋打碎，冲入加热的牛奶中，用小火煮沸，鸡蛋熟后待温，再加蜂蜜服食。</p>

<h2>3.猪肝蛋汤（民间方）</h2>

<p><strong>主治</strong>：近视眼。</p>

<p><strong>配方</strong>：猪肝150克，鸡蛋1只。</p>

<p><strong>用法</strong>：将猪肝洗净切片，入锅内加油煸炒，烹黄酒，加水煮沸，打入鸡蛋，加盐少许，服食。</p>

<!--more-->


<h2>4.银杞明目汤（民间方）</h2>

<p><strong>主治</strong>：肝肾两虚之近视。</p>

<p><strong>配方</strong>：银耳20克，枸杞20克，茉莉花10克。</p>

<p><strong>用法</strong>：上述各味水煎汤饮，每日1剂，连服数日。</p>

<h2>5.枸杞炖猪肝（中医验方）</h2>

<p><strong>主治</strong>：近视眼，迎风流泪。</p>

<p><strong>配方</strong>：枸杞子20克，猪肝300克，食油、葱、姜、白糖、黄酒、淀粉各少许。</p>

<p><strong>用法</strong>：用猪肝洗净，同枸杞放入锅内，加水适量煮1小时，捞出猪肝切片备用。油锅烧热，葱、姜炝锅放入猪肝片炒，烹白糖、黄酒兑入原汤少许，收汁，勾入淀粉，汤汁明透即成。</p>

<h2>6.醒目汤（中医验方）</h2>

<p><strong>主治</strong>：近视眼。</p>

<p><strong>配方</strong>：枸杞10克，陈皮3克，桂圆肉10个，蜂蜜1匙。</p>

<p><strong>用法</strong>：将枸杞子、陈皮放在纱布内扎好，然后与桂圆肉一起，放在锅内，加水适量，煮沸半小时后，取桂圆肉及汤，并加蜂蜜，当点心吃。</p>

<h2>7.羊肝粥《中医脏器食疗学》</h2>

<p><strong>主治</strong>：肝血不足所致的近视、目昏等症。</p>

<p><strong>配方</strong>：羊肝一具，葱子30克，大米30克。</p>

<p><strong>用法</strong>：将羊肝切细，大米淘净。先将葱子水煎取汁，加羊肝、大米煮为稀粥。待熟后调入食盐适量服食。</p>

<h2>8.猪肝羹《圣惠方》</h2>

<p><strong>主治</strong>：血不养肝，远视无力。</p>

<p><strong>配方</strong>：猪肝125克，葱白15克，鸡蛋1个，豉汁适量。</p>

<p><strong>用法</strong>：将猪肝切成薄片，葱白去须根，切成短节，入豉汁中作羹，临熟，将鸡蛋打破，混匀蛋白蛋黄，入汤内成羹，单食或佐餐服食。</p>

<h2>9.桂杞山萸眼（中医验方）</h2>

<p><strong>主治</strong>：近视。</p>

<p><strong>配方</strong>：桂圆肉15克，枸杞子15克，山萸肉15克，猪（牛、羊）眼1对。</p>

<p><strong>用法</strong>：猪眼洗净加桂圆肉、枸杞、山萸肉隔火炖服之。</p>

<h2>10.菠菜猪肝汤（民间方）</h2>

<p><strong>主治</strong>：血虚视力减退。</p>

<p><strong>配方</strong>：菠菜125克，猪肝125克，熟猪油、生姜、葱白、清汤、食盐、水豆粉、味精各适量。</p>

<p><strong>用法</strong>：菠菜洗净，在沸水中烫片刻，脱去涩味，切段，将猪肝切成薄片，与食盐、味精、水豆粉拌匀，将清汤浇沸，加入洗净拍破的生姜、切成短节的葱白、熟猪油等。煮几分钟后，放入拌好的猪肝片及菠菜，至肝片、菠菜煮熟即可，佐餐常服。</p>

<h2>11.冰糖木耳（民间方）</h2>

<p><strong>主治</strong>：高血压眼底出血、红眼目糊、视力不清。</p>

<p><strong>配方</strong>：黑木耳适量，冰糖适量。</p>

<p><strong>用法</strong>：将黑木耳洗净，用清水浸泡一夜取出，蒸一小时，加冰糖。每次用黑木耳6克，冰糖适量，睡前服用，连服至症状缓解为止。</p>

<p><strong>按注</strong>：用本方加黑豆煎成羹也可。</p>

<h2>12.炒羊肝（民间方）</h2>

<p><strong>主治</strong>：目暗昏花，夜盲，视神经萎缩，中心性视肉膜炎，白内障等。</p>

<p><strong>配方</strong>：羊肝200克。</p>

<p><strong>用法</strong>：洗净切片，包芡素油爆炒，调以佐料，佐餐。</p>

<h2>13.枸杞粥（中医验方）</h2>

<p><strong>主治</strong>：肝虚目暗，老年多泪，目眩等。</p>

<p><strong>配方</strong>：枸杞子30克，大豆100克。</p>

<p><strong>用法</strong>：同煮为粥。</p>

<h2>14.猪肝粥（民间方）</h2>

<p><strong>主治</strong>：眼生翳膜，暴发火眼，视网膜出血，虹膜睫状体炎。</p>

<p><strong>配方</strong>：荠菜200克，大米100克。</p>

<p><strong>用法</strong>：同煮为粥。</p>

<h2>15.猪肝粥（民间方）</h2>

<p><strong>主治</strong>：各种慢性虚性眼病。</p>

<p><strong>配方</strong>：新鲜猪肝100~200克，大米适量。</p>

<p><strong>用法</strong>：猪肝洗净切碎，与米同煮烂熟加调味品食之。</p>

<h2>16.杞实粥（中医验方）</h2>

<p><strong>主治</strong>：各种虚性眼病，肝虚雀目。</p>

<p><strong>配方</strong>：枸杞子20克，芡实30克，大米适量。</p>

<p><strong>用法</strong>：煮至浓烂后加调味品食之。</p>

<h2>17.山药杞子瘦肉汤（中医验方）</h2>

<p><strong>主治</strong>：慢性虚性眼病。</p>

<p><strong>配方</strong>：淮山药30克，枸杞子15克，瘦猪肉100克（洗净切碎）。</p>

<p><strong>用法</strong>：加水煲至烂熟，加调味品食之。</p>

<h2>18.羊肝羹《健美与抗衰老菜谱》</h2>

<p><strong>主治</strong>：目疾，贫血。</p>

<p><strong>配方</strong>：羊肝250克，菠菜100克，鸡蛋1只。精盐、味精、葱花、姜末、生油、羊肉汤。</p>

<p><strong>用法</strong>：锅中加油烧热，加入羊肝、葱、姜煸炒，加入羊肉汤、精盐共煮，煮至羊肝熟烂，将菠菜加入锅中，将鸡蛋打破入锅，稍搅动，煮至菠菜、鸡蛋熟即可，用味精调味出锅。</p>

<h2>19.韭菜羊肝粥《药粥治百病》</h2>

<p><strong>主治</strong>：目视不明。</p>

<p><strong>配方</strong>：韭菜150克，羊肝200克，大米100克。</p>

<p><strong>用法</strong>：韭菜洗净，切碎，羊肝切小块，与大米同煮为粥即可。随意服用。</p>

<p>orginal from web.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Upgrade winxp from sp2 to sp3]]></title>
    <link href="http://mindon.github.com/blog/2012/03/24/upgrade-winxp-from-sp2-to-sp3/"/>
    <updated>2012-03-24T17:59:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/03/24/upgrade-winxp-from-sp2-to-sp3</id>
    <content type="html"><![CDATA[<p>I&#8217;ve tried more than 3 times before:</p>

<p>to upgrade my HP Mini winxp to sp3</p>

<p>Lots of time spended on this stupid issue &#8211; winxp sp3 upgrade problem.</p>

<p>The problem i faced last time is &#8220;A Problem is preventing windows from accurately checking the license&#8221;. 0x80070002</p>

<p>Who knows what the hell was happening, my winxp is lisenced!</p>

<p>Tons of softwares need sp3 &#8211; something like &#8220;Visual C++ 2010 Express&#8221;.</p>

<p>That&#8217;s why I need sp3 package installed.</p>

<p>Here are the steps I followed, to upgrade sp3:</p>

<ol>
<li><p>download sp3 package from microsoft
<a href="http://www.microsoft.com/download/en/details.aspx?displaylang=en&amp;id=24">http://www.microsoft.com/download/en/details.aspx?displaylang=en&amp;id=24</a></p></li>
<li><p>backup following files from windows/system32</p>

<p>   dpcdll.dll <br/>
   pidgen.dll <br/>
   uxtheme.dll<br/>
   wpa.dbl</p></li>
<li><p>Restart my winxp &amp; press F8 to start from safe mode</p></li>
<li><p>Install sp3</p></li>
<li><p>Restart &amp; press F8 to start from safe mode</p></li>
<li><p>Backup new files from sp3 version</p>

<p>   dpcdll.dll <br/>
   pidgen.dll <br/>
   uxtheme.dll<br/>
   wpa.dbl</p></li>
<li><p>Replace these files with the old files backuped in step 2</p></li>
<li><p>Restart</p></li>
<li><p>Done!</p></li>
</ol>


<p>I don&#8217;t know if my steps make it or the sp3 package is different or something else &#8230;</p>

<p>But i do upgrade my HP Mini windows xp from sp2 to sp3 successfully this time :-)</p>

<p>God bless you!</p>

<p>Thanks for <a href="http://hi.baidu.com/xiaohuibai/blog/item/69fa16f4b7e1e8f77609d7d9.html">this blog</a> (in Chinese) &#8211; I didn&#8217;t use any files it provides.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Start a NodeJS addon under windows]]></title>
    <link href="http://mindon.github.com/blog/2012/03/24/start-a-nodejs-addon-under-windows/"/>
    <updated>2012-03-24T12:15:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/03/24/start-a-nodejs-addon-under-windows</id>
    <content type="html"><![CDATA[<h2>Code &amp; tools preparation</h2>

<p><strong>NodeJS source code</strong>
<a href="https://github.com/joyent/node">https://github.com/joyent/node</a></p>

<p><strong>VISUAL C++ 2010 EXPRESS</strong>
Free tools to create applications on Windows using Visual C++.
(Needs SP3 under winxp)</p>

<p><a href="http://www.microsoft.com/visualstudio/en-us/products/2010-editions/visual-cpp-express">Download VC++ 2010 EXPRESS</a></p>

<p><strong>Python 2.6 or 2.7</strong>
<a href="http://www.python.org/download/">http://www.python.org/download/</a></p>

<h2>Compile your NodeJS</h2>

<p>Run vcbuild.bat under NodeJS source folder.</p>

<h2>Compile the Hello-world</h2>

<p><strong>General Steps also fit for other addons</strong></p>

<!--more-->


<p>Get into folder test\addons\hello-world\ of NodeJS source</p>

<p>1, <strong>Edit binding.cc</strong></p>

<p>Add <strong>NODE_MODULE_EXPORT</strong> before <strong>void init</strong>
or Add <strong>NODE_EXTERN</strong> between <strong>void</strong> and <strong>init</strong></p>

<p>This could help avoid running &#8220;Unkown error&#8221; when require the addon in nodejs.</p>

<p>2, <strong>Generate project files</strong></p>

<pre><code>set NODE_ROOT=your-node-js-src-root 
python %NODE_ROOT%\tools\gyp_addon binding.gyp
</code></pre>

<p>3, <strong>Setup VC ENV variables</strong></p>

<p>Run</p>

<pre><code>"D:\Microsoft Visual Studio 10.0\VC\vcvarsall.bat"
</code></pre>

<p>4, <strong>Build</strong></p>

<pre><code>@set Configuration=Release
</code></pre>

<p>5, <strong>Test</strong></p>

<pre><code>node
require('./Release/binding')
</code></pre>

<h2>Compile node-expat</h2>

<ol>
<li><p>Install Expat under windows
<a href="http://sourceforge.net/projects/expat/files/latest/download">http://sourceforge.net/projects/expat/files/latest/download</a></p></li>
<li><p>Prepare GYP build file</p></li>
</ol>


<pre><code>{
  'targets': [
    {
      'target_name': 'node-expat',
      'sources': [ 'node-expat.cc' ],
      'include_dirs': [ 'expat-install-folder/Source/lib' ],
      'libraries': [ '-lexpat-install-folder/Bin/libexpat.lib'  ],
    }
  ]
}
</code></pre>

<h2>Compile node-xmpp</h2>

<ol>
<li><p>ICU unicode
<a href="http://site.icu-project.org/download/48">http://site.icu-project.org/download/48</a></p></li>
<li><p>node-stringprep windows version
<a href="https://github.com/andreasbotsikas/node-stringprep/tree/windows-build">https://github.com/andreasbotsikas/node-stringprep/tree/windows-build</a></p></li>
<li><p>node-xmpp</p></li>
</ol>


<p><a href="https://github.com/astro/node-xmpp">https://github.com/astro/node-xmpp</a></p>

<p><a href="http://www.adarshr.com/papers/xmpp">http://www.adarshr.com/papers/xmpp</a></p>

<h2>Reference</h2>

<ul>
<li><p><strong>Addons NodeJS document</strong>
<a href="http://nodejs.org/docs/latest/api/addons.html">http://nodejs.org/docs/latest/api/addons.html</a></p></li>
<li><p><strong>Windows上编译NodeJS native extension</strong>
<a href="http://cnodejs.org/topic/4f1fa3ed817ae4105c040fb4">http://cnodejs.org/topic/4f1fa3ed817ae4105c040fb4</a></p></li>
<li><p><strong>Building a Node.js Windows C/C++ Addon</strong>
<a href="http://coderesearchlabs.com/articles/BNWCA.pdf">http://coderesearchlabs.com/articles/BNWCA.pdf</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to write a mail in HTML]]></title>
    <link href="http://mindon.github.com/blog/2012/03/24/how-to-write-a-mail-in-html/"/>
    <updated>2012-03-24T12:07:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/03/24/how-to-write-a-mail-in-html</id>
    <content type="html"><![CDATA[<h2>编写原则：</h2>

<ol>
<li><p>全局规则之一，不要写<code>&lt;style&gt;</code>标签、不要写class，所有CSS都用style属性，什么元素需要什么样式就用style写内联的CSS。</p></li>
<li><p>全局规则之二，少用图片，邮箱不会过滤你的img标签，但是系统往往会默认不载入陌生来信的图片，如果用了很多图片的邮件，在片没有载入的情况下，丑陋无比甚至看不清内容，没耐心的用户直接就删除了。图片上务必加上alt。</p></li>
<li><p>不要在style里面写float、position这些style，因为会被过滤。那么如何实现左右布局或者更复杂的布局呢？用table。</p></li>
<li><p>style内容里面background可以设置color，但是img会被过滤，就是说不能通过CSS来设置背景图片了。但是有一个很有意思的元素属性，也叫background，里面可以定义一个图片路径，这是个不错的替代方案，虽然这样功能有限，比如无法定位背景图片了，有总比没有好。例如要给一个单元格加一个背景，必须这样写：
<code>&lt;td background=”http://image1.koubei.com/images/common/logo_koubei.gif”&gt;&lt;/td&gt;</code></p></li>
<li>div模式的邮箱不支持flash，iframe模式的有待验证。</li>
</ol>


<!--more-->


<p>最后提一句，sohu的邮箱很怪异，会在每个文本段后面加一个空格，导致原本正常的排版一行放不下而换行，从而使某些布局错乱。所以，如果你要兼容sohu邮箱的话，遇到一些紧凑的布局就要格外小心了，尽量减少文本段的数量，留足宽度。</p>

<p>邮件模板，请严格按照下面的规则执行。邮件客户端和Web页面的需求不同，在编写代码的时候，考虑的方向也不一样。</p>

<h2>!Doctype声明 </h2>

<p>为了向前兼容和避免某些浏览器的怪癖，使用html5的!doctype声明，格式如下：
<code>&lt;!DOCTYPE HTML&gt;</code></p>

<h2>原则，及思维出发点 </h2>

<ol>
<li><p>不需要考虑DOM节点的精简和结构的优化。
以完成设计样式为最优先。必要时，不必吝啬使用表格嵌套，不必吝啬使用空的表格元素来占据空间。</p></li>
<li><p>宁可冗余，也不可缺少必要定义。</p></li>
<li><p>充分利用表格的私有属性来布局。width, height, bgcolor, background, align, valign等</p></li>
<li><p>可替代性：
在编写html的时候，请思考当你页面的所有图片都被屏蔽时，是否用户还能了解页面的主要内容。
请务必在所有要设置背景图片的元素上，定义背景颜色。</p></li>
<li><p>可利用Dreamweaver等工具来协助编写html，但切记，一定要时候做好每行代码的检查。</p></li>
</ol>


<h2>Mackup </h2>

<ol>
<li><p>主体页面，包括细节处理，尽量使用<code>&lt;table&gt;</code>布局。</p></li>
<li><p>不允许在<code>&lt;tr&gt;</code>元素上定义CSS样式，请将样式尽量定义在<code>&lt;td&gt;</code>元素上。（Gmail等邮件客户端会过滤<code>&lt;tr&gt;</code>上的属性）</p></li>
<li><p>禁止使用<code>&lt;style type=”text/css”&gt;&lt;/code&lt;来处理主要样式，所有的Web邮件系统都会过滤该标签。因此邮件模板中不能使用伪类（pseudo class）和伪元素（pseudo elements），以及高级选择符。</p></li>
</ol>


<p>但是，我们仍然可以使用<code>&lt;style&gt;</code>来提升一些比较先进的邮件PC客户端的体验，比如伪类。</p>

<p>必须使用表格和元素样式来完成所有基本样式和布局。</p>

<ol>
<li><p>禁止使用<code>&lt;link&gt;</code>来加载外联CSS</p></li>
<li><p>可以使用<code>&lt;div&gt;</code>来实现细节的，具有典型块级元素(block)的布局样式。而尽量避免使用<code>&lt;p&gt;</code>，因为我们不容易清除<code>&lt;p&gt;</code>在不同浏览器的默认样式</p></li>
<li><p>注意定义图片的替换文字（alt），及替换文字的颜色。</p></li>
</ol>


<h2>样式 </h2>

<ul>
<li><p> 文字的处理。
font-* 族的CSS属性不允许使用缩写，请分别定义 font-size, font-weight, line-height, font-family(font-family有可能被过滤)</p></li>
<li><p> 继承性
注意表格不会继承外部的font等属性，请务必，在每个<code>&lt;td&gt;</code>元素上都定义字体属性和颜色。</p></li>
<li><p> 背景的处理
不允许使用style=”background:url(http://…)”，请使用<code>&lt;td&gt;</code>的属性(attribute) background=“http://…”。（由于CSS背景图片是一种会影响页面渲染速度的定义，因此大多数Web邮件系统会过滤它。）</p></li>
</ul>


<p>背景颜色，也请使用表格的bgcolor属性。</p>

<ul>
<li><p> 对于复杂样式的处理，可以大胆地、大块地切图。</p></li>
<li><p> 避免尝试让两个table-cell的元素对齐，如果, 一个元素是用具体的宽度定义（width=”100″），另一个元素是用百分比来定位( width=”50%”)</p></li>
<li><p> 避免使用list-style来处理列表样式，请使用 “ &#8226; ” 字符来替代。</p></li>
<li><p> 避免使用<code>&lt;img&gt;</code>元素拼接的方式，来实现背景大图的分割，尽量使用表格的background</p></li>
</ul>


<p>我们知道，在<code>&lt;img&gt;</code>元素下4px空白的问题。</p>

<p>禁用的，和不建议使用的CSS样式（见参考文献1）</p>

<p>这些样式，大都是可能引起元素偏移到容器外的样式</p>

<p>禁止使用 position, background, float</p>

<h2>特别说明： </h2>

<p>margin: margin的使用要非常谨慎，不允许使用margin作为重要的布局依据，不允许使用负margin，避免使用非零和非auto的margin属性。</p>

<h2>常见问题 </h2>

<ul>
<li> 如何让邮件在Gmail等Web页面中居中
有几种方式：</li>
</ul>


<p>a> 在 body上定义style=”width:apx; margin:auto”。注意，在Web邮件中，会自动为你生成一个<code>&lt;div style=”width:apx; margin:auto”&gt;&lt;/code&gt; 的元素在最外层。(可以有效利用这一特性，定义背景颜色等样式，和实现其他可能的事情)</p>

<p>而不要尝试自己在邮件模板最外层添加一个带有margin:auto的<code>&lt;div&gt;</code>元素。</p>

<p>b> 使用<code>&lt;center&gt;</code></p>

<ul>
<li> 如何在邮件的布局中占据空白
请使用空白的<code>&lt;td&gt;</code>元素，设置height属性来起到站位的作用。</li>
</ul>


<p>origin from <a href="http://user.qzone.qq.com/21195254/blog/1296205414">http://user.qzone.qq.com/21195254/blog/1296205414</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Magic Code Switching Comment Syntax]]></title>
    <link href="http://mindon.github.com/blog/2012/03/22/magic-code-switching-comment-syntax/"/>
    <updated>2012-03-22T23:58:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/03/22/magic-code-switching-comment-syntax</id>
    <content type="html"><![CDATA[<p>This a kind of c-style code comments to switch two blocks of code for debug or testing.</p>

<pre><code>/*/
  //... Section A (commented)
/*/
  //... Section B (working)
//*/
</code></pre>

<p>By adding one single / at the beginning, it turns into:</p>

<pre><code>//*/
  //... Section A (working)
/*/
  //... Section B (commented)
//*/
</code></pre>

<p>Another simple section comment:</p>

<pre><code>//*/
  //... working
//*/
</code></pre>

<p>remove a single / at the beginning, it turns into:</p>

<pre><code>/*/
  //... commented
//*/
</code></pre>

<ul>
<li><p>Curiosity</p></li>
<li><p>Passion</p></li>
<li><p>Focus</p></li>
<li><p>Fun</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript Micro-Templating]]></title>
    <link href="http://mindon.github.com/blog/2012/03/21/javascript-micro-templating/"/>
    <updated>2012-03-21T10:52:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/03/21/javascript-micro-templating</id>
    <content type="html"><![CDATA[<p>This is a modification version of <strong>John Resig</strong>&#8217;s <a href="http://ejohn.org/blog/javascript-micro-templating/">Javascript Micro-Templating</a></p>

<p>The modifications are mostly about filters for field values.</p>

<p>I like this javascript mico-templating code from <a href="http://ejohn.org/"><strong>John Resig</strong></a>, it&#8217;s really simple, easy-to-use.</p>

<blockquote><p>I&#8217;ve had a little utility that I&#8217;ve been kicking around for some time now that I&#8217;ve found to be quite useful in my JavaScript application-building endeavors. It&#8217;s a super-simple templating function that is fast, caches quickly, and is easy to use. I have a couple tricks that I use to make it real fun to mess with.</p></blockquote>

<!--more-->


<blockquote><p>Here&#8217;s the source code to the templating function (a more-refined version of this code will be in my upcoming book Secrets of the <a href="http://jsninja.com/">JavaScript Ninja</a>):</p></blockquote>

<p>original code:</p>

<pre><code>// Simple JavaScript Templating
// John Resig - http://ejohn.org/ - MIT Licensed
(function(){
  var cache = {};

  this.tmpl = function tmpl(str, data){
    // Figure out if we're getting a template, or if we need to
    // load the template - and be sure to cache the result.
    var fn = !/\W/.test(str) ?
      cache[str] = cache[str] ||
        tmpl(document.getElementById(str).innerHTML) :

      // Generate a reusable function that will serve as a template
      // generator (and which will be cached).
      new Function("obj",
        "var p=[],print=function(){p.push.apply(p,arguments);};" +

        // Introduce the data as local variables using with(){}
        "with(obj){p.push('" +

        // Convert the template into pure JavaScript
        str
          .replace(/[\r\t\n]/g, " ")
          .split("&lt;%").join("\t")
          .replace(/((^|%&gt;)[^\t]*)'/g, "$1\r")
          .replace(/\t=(.*?)%&gt;/g, "',$1,'")
          .split("\t").join("');")
          .split("%&gt;").join("p.push('")
          .split("\r").join("\\'")
      + "');}return p.join('');");

    // Provide some basic currying to the user
    return data ? fn( data ) : fn;
  };
})();
</code></pre>

<p>modified code:</p>

<pre><code>// Simple JavaScript Templating
// John Resig - http://ejohn.org/ - MIT Licensed
(function(){
  var cache = {};

  // Added by Mindon
  this.tmplCall = {
    nohtml: function(v) {
      return typeof v == 'string'
        ? v.replace(/&amp;/g,'&amp;amp;').replace(/&lt;/g,'&amp;lt;')
           .replace(/&gt;/g,'&amp;gt;').replace(/[ ]{2}/g, '&amp;nbsp; ')
        : v;
    }
  , br: function(v) {
      return typeof v == 'string'
        ? v.replace(/\n{2,}/g, '&lt;br/&gt;&lt;br/&gt;').replace(/\n/g, '&lt;br/&gt;')
        : v;
    }
  };

  // Updated by mindon@gmail.com Nov. 3, 2011 ( options parameter append )
  this.tmpl = function tmpl(str, data, opt){
    var _t, _f; // added by Mindon

    // Figure out if we're getting a template, or if we need to
    // load the template - and be sure to cache the result.
    var fn = !/\W/.test(str) ?
      cache[str] = cache[str] ||
        tmpl(document.getElementById(str).innerHTML, 0, opt) : // updated by Mindon

      // Appended by Mindon
      ( (_t = opt &amp;&amp; opt.html ? 1: 'tmplCall.nohtml') &amp;&amp; 
        (_f = opt &amp;&amp; opt.fields ? '(' +opt.fields +')(d)' : 1) &amp;&amp;
        ((_t===1&amp;&amp;(_t=0)) || (_f===1&amp;&amp;(_f=0))) &amp;&amp; 0
        // fields: function(){return {fieldName: handlefn(v){}}}
      ) ||

      // Generate a reusable function that will serve as a template
      // generator (and which will be cached).
      new Function("d",
        "var p=[],print=function(){p.push.apply(p,arguments);}, _f=" + _f +", _t="
          +_t +",_v=function(k,v){" 
          +'return tmplCall.br('
          +(_f?'_f[k]?_f[k](':'') +(_t?'_t(v)':'v') +(_f?'):'
          +(_t?'_t(v)':'v'):'') +")};" + // updated

        // Introduce the data as local variables using with(){}
        "p.push('" +

        // Convert the template into pure JavaScript
        str.replace(/[\r\t\n]/g, " ")
          .split("&lt;%").join("\t")
          .replace(/((^|%&gt;)[^\t]*)'/g, "$1\r")
          .replace(/\t=(.*?)%&gt;/g, "',_v('$1',d['$1']),'") // updated
          .split("\t").join("');")
          .split("%&gt;").join("p.push('")
          .split("\r").join("\\'")
      + "');return p.join('');");

    // Provide some basic currying to the user
    return data ? fn( data ) : fn;
  };
})();
</code></pre>

<p>Templates example:</p>

<pre><code>&lt;script type="text/html" id="item_tmpl"&gt;
  &lt;div id="&lt;%=id%&gt;" class="&lt;%=(i % 2 == 1 ? " even" : "")%&gt;"&gt;
    &lt;div class="grid_1 alpha right"&gt;
      &lt;img class="righted" src="&lt;%=profile_image_url%&gt;"/&gt;
    &lt;/div&gt;
    &lt;div class="grid_6 omega contents"&gt;
      &lt;p&gt;&lt;b&gt;&lt;a href="http://mindon.github.com/&lt;%=from_user%&gt;"&gt;&lt;%=from_user%&gt;&lt;/a&gt;:&lt;/b&gt; &lt;%=text%&gt;&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/script&gt;
</code></pre>

<p>Another with inline script:</p>

<pre><code>&lt;script type="text/html" id="user_tmpl"&gt;
  &lt;% for ( var i = 0; i &lt; users.length; i++ ) { %&gt;
    &lt;li&gt;&lt;a href="&lt;%=users[i].url%&gt;"&gt;&lt;%=users[i].name%&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;% } %&gt;
&lt;/script&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis: REmote DIctionary Server]]></title>
    <link href="http://mindon.github.com/blog/2012/03/17/redis-remote-dictionary-server/"/>
    <updated>2012-03-17T22:54:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/03/17/redis-remote-dictionary-server</id>
    <content type="html"><![CDATA[<h2>Redis tutorial</h2>

<p>These slides and notes were originally written to accompany a three hour Redis tutorial I gave at the NoSQL Europe conference on the 22nd of April 2010. <a href="http://simonwillison.net/static/2010/redis-tutorial/"><strong>Redis tutorial</strong></a></p>

<p>REmote DIctionary Server(Redis) 是一个由Salvatore Sanfilippo写的key-value存储系统。</p>

<p><a href="http://www.petermao.com/redis/65.html">redis源代码分析</a></p>

<p><a href="http://blog.csdn.net/archimedes_zht/article/details/6909074">Redis为什么不使用Libevent或者Libev</a>
<a href="http://www.redis.io/topics/internals-eventlib">http://www.redis.io/topics/internals-eventlib</a></p>

<p><strong>Salvatore Sanfilippo：</strong>
Redis使用一个简洁的事件循环（event loop），我能够完全控制它。Libevent库自身的代码量已经是Redis目前代码量的3倍大了。</p>

<!--more-->


<p>大的库也并不总是每个方面都没有瑕疵的。例如，Libevent的稳定发布版在运行时对事件的数组做无意义的重新分配（Libevent在2.0版本里改进了这一点，但是这个版本还不是稳定的）。我修改了ae.c让它模块化，并且通过多分配一些内存为代价来避免在事件循环内部的各种类型的O(N)操作（但是这个多分配的内存对于Redis这个内存数据库来说并不是一个问题，因为可能只占总占用内存的0.001% :)）。现在添加和删除一个event是O(1)了，这对于有10K个客户端连接来说很重要。现在我们在Redis里面仅仅使用一个Timer，但是如果以后我们需要更多的，我可以修改ae.c通过使用skip list（跳跃表）来达到O(log(N))。我们现在有了2个模块：ae_select.c和ae_epoll.c，考虑到写一个新的模块的工作是如此的少，我肯定会增加ae_kevent.c。</p>

<p><strong>Sergey Shepelev：</strong>
Yeah，Libevent比较差劲，相反，libev是一个小巧、well thought、clean的库，它并没有提供任何高级的feature比如Http，但是它确实提供了非常好的底层feature。可以试一下：<a href="http://software.schmorp.de/pkg/libev.html">http://software.schmorp.de/pkg/libev.html</a></p>

<p><strong>Pedro Melo：</strong>
赞同使用Libev，使用它，你将会非常高兴满意。:)</p>

<p><strong>Salvatore Sanfilippo：</strong>
现在Redis已经支持kevents了，请看一下我在ae.c里面的新实现，它是多么简单的支持添加一个新模块，添加、删除事件都是O(1)的。底层的模块像ae_epoll.c ae_select.c ae_kevent.c仅仅导出一个最小的完美的API接口，上层则关注当前活跃的最大的FD和管理上层的状态。</p>

<p>我认为我们能够满足当前的实现而根本不用添加额外的依赖，另外这也不排除在某个时候，我们将会让我们的事件循环有一个更有意思的语义，for instance for LOCK if it will ever get implemented and for Virtual Memory (ability to &#8220;pause&#8221; events, ability to read chunks of on-disk files in background and so forth).例如：实现VM的时候，能够LOCK住事件循环，暂停事件，后台从磁盘读取文件等。我们也许要修改ae.c足够的多来让它和我们的代码一起工作而不是通过链接其他东西到Redis。当然，这有很多工作要做。</p>

<p><strong>Pedro Melo：</strong>
我的提议并不是关于添加这些模块有多简单或者复杂，我关注的是正确性。请看一下Libev的ChangLog，and seach for broken：所有这些高速的网络API都被相同OS的不同版本，或者更差的是不同的OS之间的小的不兼容困扰过。我认为Redis的主要努力不是为了创建另一个事件驱动的IO库，因此对我来说，“重用”一个已经仔细考虑过这些问题的库是更加明智的，然后把精力放在safe, working, backends上。</p>

<p><strong>Salvatore Sanfilippo：</strong>
我认为从软件工程的观点来看你是正确的，通过重用一个已经很好测试过的库，Redis的事件循环出现bug的概率会小很多。这是阻止我做正确选择的一系列things，顺便说一下，我也并不要求它们被客观接受。因此我对分歧所涉及的问题理解的很清楚：</p>

<ul>
<li><p>许多库在理论上被很好测试过了，但是如果通过一种和使用它的前N个项目不同的方式来用它，还是会发现bug的。例如，Redis唯一使用的外部代码：LZF压缩已经存在很多年了。在使用它一些天后，我发现了一个内存崩溃的bug。几乎所有人都在使用它，它也被很好测试过，但是bug仍然存在。</p></li>
<li><p>我计划以后使用很多timer。所有这些库都使用一个0(N)的定时器算法，这至少是我从源码中看到的。一个平衡树或者跳跃表可以用来提升性能。当我将需要时，我能够自己实现而不用等待外部的开发者来合并我的修改。</p></li>
<li><p>我讨厌 ./configure。事实上，在像事件循环库这种事情上，configure的魔法实际上只针对X个知名的系统。我对现在使用Redis的zero-configuration的体验非常满意。当然不使用./configure的另一种选择就是直接把代码放到Redis里面并且在发现问题时及时升级，但是我也并不想依赖于外部的源码。</p></li>
<li><p>我需要在任何地方使用 zfree/zmalloc。</p></li>
<li><p>写另一个事件循环库也是有一定价值的，如果这个库比其他的要易于阅读。例如，一些天前，我就看到某位同学在Twitter上推荐ae.c是一个关于简单事件循环很好的阅读对象，并且是能够在真实世界正确工作的。</p></li>
</ul>


<p>因此，从一个绝对的观点来看，你是正确的。但是我有一些我自己的主观原因在Redis中使用ae.c。</p>

<p><strong>Pedro Melo：</strong>
当然，不存在没有bug的库。我仅仅能够说的是libev非常的活跃，作者对在maillist上报告的bug也反应的非常快。我相信timer是O(log(N))，你可以看看文档的算法复杂度部分：http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod#ALGORITHMIC_COMP&#8230; 。事实上，libev是将它使用的算法的复杂度文档化的少有的几个库之一。总之，我确信它将能够很好的工作。</p>

<p><strong>Salvatore Sanfilippo：</strong>
Pedro，没有任何问题，我认为你的观点是很好的，我今天读了一会儿libev代码后，也同意libev的代码很好。如果我们把这个问题当作一个纯粹的软件工程问题，换句话说，假如我们将为宇宙飞船写一个组件，毫无疑问正确的做法是使用能够工作并且被很好测试过的库。</p>

<p>但是也有其他可能的观点，并且我感觉这些观点也同等的重要（也一样不是客观的）。我认为这个讨论与编写软件最大的动机问题有很深的联系（I think this discussion has some deep link with the most important motivations for writing software.）。我认为简洁代码的价值不仅在于能够做需要做的事情，而且在于易于阅读。库是一个让伟大工作快速完成的伟大想法。Libraries are a great idea to accomplish great things in short time, but things like libev finish to  resemble every day more what they wanted to avoid, after all there was libevent already. 毕竟已经有Libevent了，它有很多bug吗？既然这样为什么不fix呢？或者开出分支出来？因为Libevent非常复杂，一团糟等等。但是最终，这些库包括libev，试图毁坏每个人最初的简单设计。需要在同一个FD上注册更多完全相同的事件？对我来说，这是一个设计错误。对通用的库来说，这是一个feature，因为有同学在使用。等等。</p>

<p>没有外部依赖也很有价值。我没有证据，但是我打赌，Redis开始吸引一些用户不仅仅是由于它作为数据库的优点，也在于它是如此易于上手。能够非常容易的理解它是怎么工作的，很容易的编译，运行甚至不需要配置。它的语义是如此的简单，以至于我知道一些同学使用不同的语言（Erlang, Java, Javascript, &#8230; ）实现Redis的山寨版仅仅为了乐趣。</p>

<p>If you take the street of simplicity this should be adopted in everything, from the protocol to the fact there are no dependencies, and that everybody with some C skill can open ae.c and understand how an event loop works.</p>

<p>如果你认可“简洁”，也可以拓展到其他方面：从协议到没有依赖的事实，到每一个有一定C技能的同学可以打开ae.c并且理解一个事件循环是如何工作的。</p>

<p>当然我也不太确定，因为它是全新的代码。我几乎是从头编写的ae.c，但是如果有bug的话，我将能够很快的fix掉。我认为这付出的努力是值得的。顺便说下，最后一次提交之后，我已经进入了feature freeze阶段。我将利用下个月在发布rc1前的时间来从头阅读整份代码，并且做很多的测试，“简洁”在这个时候就非常有帮助了。</p>

<h2>Node.js Redis Client</h2>

<p>https://github.com/mranney/node_redis</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDB: The internal file structure]]></title>
    <link href="http://mindon.github.com/blog/2012/03/17/mongodb-the-internal-file-structure/"/>
    <updated>2012-03-17T11:43:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/03/17/mongodb-the-internal-file-structure</id>
    <content type="html"><![CDATA[<p><a href="http://www.quora.com/Jared-Rosoff">Jared Rosoff</a></p>

<p>Each logical db has its own set of files in your dbpath. You can find them as <dbname>.<file_number>. If you&#8217;re using directory-per-db option, then they may be in separate directories.</p>

<p>The dbfiles themselves are broken up into extents. Each extent is assigned to a namespace and contains data for that namespace. Each collection is its own namespace. Also each Index is its own namespace.</p>

<p>Documents in a collection are stored as a doubly linked list within extents. The document itself is formatted as BSON. There is a header that has, among other things, pointers to the next and previous document in the collection.</p>

<p>Index data is also stored in these files, but they are stored as B-Tree&#8217;s rather than doubly linked lists.</p>

<p>There is also a namespace file that contains namespace (collections, indexes, freelist) meta data and how they map to their extents.</p>

<p>If you&#8217;re running with journaling enabled, then there is also a set of journal files that contain a history of changes to collection data.</p>

<h2>MongoDB数据文件内部结构</h2>

<p>Origin from <a href="http://blog.nosqlfan.com/html/3515.html">http://blog.nosqlfan.com/html/3515.html</a></p>

<p>有人在Quora上提问：MongoDB数据文件内部的组织结构是什么样的。随后10gen的工程师Jared Rosoff出来做了简短的回答。</p>

<!--more-->


<p>每一个数据库都有自己独立的文件。如果你开启了directoryperdb选项，那你每个库的文件会单独放在一个文件夹里。</p>

<p>数据库文件在内部会被切分成单个的块，每个块只保存一个名字空间的数据。在MongoDB中，名字空间用于区分不同的存储类别。比如每个collection有一个独立的名字空间，每个索引也有自己的名字空间。</p>

<p>在一个块中，会保存多条记录，每条记录是BSON格式的，记录与记录之间通过双向链表进行连接。</p>

<p>索引数据也存在数据文件中，不过索引是被组织成B-Tree结构，而不是双向链表。</p>

<p>对每个数据库，有一个命名空间文件，用于保存每个名字空间对应的元数据。我们通过查询这些元数据来找到对应的名字空间的存储块位置。</p>

<p>如果你开启了jorunaling日志，那么还会有一些文件存储着你所有的操作记录。</p>

<p>下面图片摘自10gen工程师Mathias Stearn在MongoSV2011大会上的发言稿，手绘的数据文件结构。</p>

<ol>
<li><p><strong>每个数据库有相应的数据文件和命名空间文件</strong>
<img src="http://mindon.github.com/images/blog/mongodb-internal/1.jpg" alt="" /></p></li>
<li><p><strong>数据文件从16MB开始，新的数据文件比上一个文件大一倍，最大为2GB</strong>
<img src="http://mindon.github.com/images/blog/mongodb-internal/2.jpg" alt="" /></p></li>
<li><p><strong>文件使用MMAP进行内存映射，会将所有数据文件映射到内存中，但是只是虚拟内存，只有访问到这块数据时才会交换到物理内存。</strong>
<img src="http://mindon.github.com/images/blog/mongodb-internal/3.jpg" alt="" />
<img src="http://mindon.github.com/images/blog/mongodb-internal/3-0.jpg" alt="" /></p></li>
<li><p><strong>MongoDB的数据文件映射到内存表中的位置</strong>
<img src="http://mindon.github.com/images/blog/mongodb-internal/4.jpg" alt="" />
<img src="http://mindon.github.com/images/blog/mongodb-internal/4-0.jpg" alt="" /></p></li>
<li><p><strong>使用32位机器的话，内存地址最大可以标识4GB内存</strong>
<img src="http://mindon.github.com/images/blog/mongodb-internal/5.jpg" alt="" />
<img src="http://mindon.github.com/images/blog/mongodb-internal/5-0.jpg" alt="" /></p></li>
<li><p><strong>但是在32位机器上，4GB内存会有1GB被内核战用，大约0.5GB会用于mongod进程的stack空间，只剩下大约2.5GB可用于映射数据文件。</strong>
<img src="http://mindon.github.com/images/blog/mongodb-internal/6.jpg" alt="" />
<img src="http://mindon.github.com/images/blog/mongodb-internal/6-0.jpg" alt="" /></p></li>
<li><p><strong>在64位机器上则最多可以表示128TB的空间</strong>
<img src="http://mindon.github.com/images/blog/mongodb-internal/7.jpg" alt="" />
<img src="http://mindon.github.com/images/blog/mongodb-internal/7-0.jpg" alt="" />
<img src="http://mindon.github.com/images/blog/mongodb-internal/7-1.jpg" alt="" /></p></li>
<li><p><strong>每个数据文件会被分成一个一个的数据块，块与块之间用双向链表连接</strong>
<img src="http://mindon.github.com/images/blog/mongodb-internal/8.jpg" alt="" />
<img src="http://mindon.github.com/images/blog/mongodb-internal/8.jpg" alt="" /></p></li>
<li><p><strong>在名字空间文件中，保存的是一个hash table，保存了每个名字空间的存储信息元数据，包括其大小，块数，第一块位置，最后一块位置，被删除的块的链表以及索引信息</strong>
<img src="http://mindon.github.com/images/blog/mongodb-internal/9.jpg" alt="" />
<img src="http://mindon.github.com/images/blog/mongodb-internal/9-0.jpg" alt="" /></p></li>
<li><p><strong>这些位置通过DiskLoc数据结构进行存储，存储了数据文件编号和块在文件中的位置</strong>
<img src="http://mindon.github.com/images/blog/mongodb-internal/a.jpg" alt="" />
<img src="http://mindon.github.com/images/blog/mongodb-internal/a-0.jpg" alt="" />
<img src="http://mindon.github.com/images/blog/mongodb-internal/a-1.jpg" alt="" />
<img src="http://mindon.github.com/images/blog/mongodb-internal/a-2.jpg" alt="" /></p></li>
<li><p><strong>对每一个块来说，其头部包含了一些块的元数据，比如自己的位置，上一个和下一个块的位置以及块中第一条和最后一条记录的位置指针。剩下的部分用于存储具体的数据，具体数据之间也是通过双向链接来进行连接。</strong>
<img src="http://mindon.github.com/images/blog/mongodb-internal/b.jpg" alt="" />
<img src="http://mindon.github.com/images/blog/mongodb-internal/b-0.jpg" alt="" />
<img src="http://mindon.github.com/images/blog/mongodb-internal/b-1.jpg" alt="" /></p></li>
<li><p><strong>下面是B-Tree的存储结构和工作原理</strong>
<img src="http://mindon.github.com/images/blog/mongodb-internal/c.jpg" alt="" />
<img src="http://mindon.github.com/images/blog/mongodb-internal/c-0.jpg" alt="" />
<img src="http://mindon.github.com/images/blog/mongodb-internal/c-1.jpg" alt="" />
<img src="http://mindon.github.com/images/blog/mongodb-internal/c-2.jpg" alt="" />
<img src="http://mindon.github.com/images/blog/mongodb-internal/c-3.jpg" alt="" />
<img src="http://mindon.github.com/images/blog/mongodb-internal/c-4.jpg" alt="" />
<img src="http://mindon.github.com/images/blog/mongodb-internal/c-5.jpg" alt="" />
<img src="http://mindon.github.com/images/blog/mongodb-internal/c-6.jpg" alt="" />
<img src="http://mindon.github.com/images/blog/mongodb-internal/c-7.jpg" alt="" /></p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes on MongoDB]]></title>
    <link href="http://mindon.github.com/blog/2012/03/17/notes-on-mongodb/"/>
    <updated>2012-03-17T11:12:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/03/17/notes-on-mongodb</id>
    <content type="html"><![CDATA[<p><strong>MongoDB资料汇总专题</strong>
<a href="http://blog.nosqlfan.com/html/3548.html">http://blog.nosqlfan.com/html/3548.html</a></p>

<h2>MongoDB 最佳实践</h2>

<p>Original from <a href="http://www.oschina.net/question/12_38878">http://www.oschina.net/question/12_38878</a></p>

<p><strong>1. 始终启用备份</strong></p>

<p>备份能保证你应用的高可用性。假如你的一个节点down了，第
二节点可以迅速启用，你的应用不会中断。</p>

<p><strong>2. 使用最新版本</strong></p>

<p>10gen在不断的发布更新，特别是2.0.x包含了很高的性能提升
和并行改进，索引改进和bug修复。如果你还在使用 1.6.3的话
，你应该尽快升级。</p>

<!--more-->


<p><strong>3. 不要在32位的系统上跑MongoDB</strong></p>

<p>MongoDB在32位系统上有“2.5GB数据限制”。它的存储引擎使用
内存映射来读取文件以获得更好的性能。这个功能依赖于内存
寻址，而32位系统的内存不能超过4GB。</p>

<p><strong>4. 默认开启日志</strong></p>

<p>MongoDB支持数据库操作的提前日志（write-ahead journaling
）。这个功能有助于灾难恢复。</p>

<p><strong>5. 注意你数据文件的位置</strong></p>

<p>你应该保证你的MongoDB的数据文件是存储在物理驱动器上，例
如 /data/mongodb。当然你也可以使用虚拟的驱动器，但是必
须非常小心。因为它有可能会影响到你的集群架构。我们建议
你使用 Amazon EBS 来存放你的数据库文件。</p>

<p><strong>6. 保证足够大的内存</strong></p>

<p>为了保证整个集群的性能，你要确保整个所有MongoDB的工作实
例（working set）包括索引可以完全装入内存。如果你发现
“page faults”的概率在增加，很有可能mongoDB的数据量超出
了你的内存。在这种情况下你有两种选择：加内存，或者创建
分片集群（Sharding）。我们建议你先考虑加内存。</p>

<p><strong>7. 保持 65% 以内的压力</strong></p>

<p>如果你发现你的集群压力达到了65%，那么你应该考虑扩大你的
集群了。通常，你应该保证数据库压力低于65%。</p>

<p><strong>8. 特别小心分片集群</strong></p>

<p>分片集群需要你充分理解你应用的数据访问方式。你应该充分
了解MongoDB的分片工作方式，并且确认你确实需要这个功能。
还有，选择一个分片钥匙（sharding key）是对于性能也是很
重要的。</p>

<p>配置服务器对于一个集群的健康也是很重要的。在分片集群的
环境中，你必须有三台配置服务器。永远不要删除配置服务器
的数据，时常备份这些数据。这些配置服务器也需要64位的环
境。还有，不要把三台配置服务器放在同一台机器上！</p>

<p><strong>9. 使用 Mongo MMS 来图形化的监控你的数据库</strong></p>

<p>如果你还没有使用 Mongo MMS的话，我强烈推荐这个工具。
10gen 正在大力开发这个产品。它提供了一个非常友好的可视
化的界面来监控你的MongoDB集群。</p>

<p><strong>10. MongoDB 资源</strong></p>

<p>技术总是在不断进步，你需要市场关注这些信息：</p>

<ul>
<li>Documentation: <a href="http://www.mongodb.org/display/DOCS/Home">http://www.mongodb.org/display/DOCS/Home</a></li>
<li>Google Group: <a href="http://groups.google.com/group/mongodb-user">http://groups.google.com/group/mongodb-user</a></li>
<li>Bugs: <a href="https://jira.mongodb.org">https://jira.mongodb.org</a></li>
<li>Blog: <a href="http://blog.mongodb.org/">http://blog.mongodb.org/</a></li>
</ul>


<p><a href="http://www.engineyard.com/blog/2011/mongodb-best-practices/"><strong>MongoDB Best Practices</strong></a> <a href="http://www.programmer.com.cn/9999/">中文</a></p>

<p><strong>MongoDB运行状态、性能监控，分析</strong>:
<a href="http://blog.nosqlfan.com/html/3346.html">http://blog.nosqlfan.com/html/3346.html</a></p>

<p><strong>MongoDB容量规划</strong>:
<a href="http://blog.nosqlfan.com/html/3322.html">http://blog.nosqlfan.com/html/3322.html</a></p>

<p><strong>MongoQ</strong>:
<a href="https://github.com/zzdhidden/mongoq">https://github.com/zzdhidden/mongoq</a></p>

<p><strong>MongoSpy, MongoWatch及MongoDB数据压缩</strong></p>

<p><a href="http://blog.nosqlfan.com/html/3205.html">http://blog.nosqlfan.com/html/3205.html</a></p>

<h2>五步优化你的MongoDB</h2>

<ol>
<li><p><strong>查询优化</strong>
确认你的查询是否充分利用到了索引，用explain命令查看一下查询执行的情况，添加必要的索引，避免扫表操作。</p></li>
<li><p><strong>搞清你的热数据大小</strong>
可能你的数据集非常大，但是这并不那么重要，重要的是你的热数据集有多大，你经常访问的数据有多大（包括经常访问的数据和所有索引数据）。使用MongoDB，你最好保证你的热数据在你机器的内存大小之下，保证内存能容纳所有热数据。</p></li>
<li><p><strong>选择正确的文件系统</strong>
MongoDB的数据文件是采用的预分配模式，并且在Replication里面，Master和Replica Sets的非Arbiter节点都是会预先创建足够的空文件用以存储操作日志。这些文件分配操作在一些文件系统上可能会非常慢，导致进程被Block。所以我们应该选择那些空间分配快速的文件系统。这里的结论是尽量不要用ext3，用ext4或者xfs。</p></li>
<li><p><strong>选择合适的硬盘</strong>
这里的选择包括了对磁盘RAID的选择，也包括了磁盘与SSD的对比选择。</p></li>
<li><p><strong>Shard分片</strong>
在单个节点压力太大时，我们可以考虑使用MongoDB的auto-sharding机制来将数据分片到多个节点以缓解压力。</p></li>
</ol>


<p>火丁筆記: <a href="http://huoding.com/2011/08/09/104">记一次MongoDB性能问题</a></p>

<p><strong>NUMA Problem（Warn)</strong>
<a href="http://www.mongodb.org/display/DOCS/NUMA">http://www.mongodb.org/display/DOCS/NUMA</a></p>

<p>shell> numactl &#8211;interleave=all /path/to/mongod</p>

<p>NUMA下，内存是按照物理CPU来划分的，不是按逻辑CPU/核划分的</p>

<p>每个核访问分配给自己的内存会比访问分配给其它核的内存要快，有下面几种访问控制策略：</p>

<ol>
<li><p>缺省(default)：总是在本地节点分配（分配在当前进程运行的节点上）；</p></li>
<li><p>绑定(bind)：强制分配到指定节点上；3.交叉(interleave)：在所有节点或者指定的节点上交织分配；</p></li>
<li><p>优先(preferred)：在指定节点上分配，失败则在其他节点上分配。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lasers Can Be Used to Steer Lightning In Mid-Strike]]></title>
    <link href="http://mindon.github.com/blog/2012/03/15/lasers-can-be-used-to-steer-lightning-in-mid-strike/"/>
    <updated>2012-03-15T22:23:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/03/15/lasers-can-be-used-to-steer-lightning-in-mid-strike</id>
    <content type="html"><![CDATA[<p>Laser light can not only trigger lightning but redirect it, causing it to strike in the same place over and over, according to new research. This means lasers could serve as lightning rods. Because that would be awesome.</p>

<p>Laser lightning rods have been a research subject for several decades, because they could trigger lightning and guide it to a specific place. Firing a laser would create an ionized channel in the atmosphere, which could conduct the lightning to the ground. Laser lightning rods could be an alternative to lightning rockets, according to Aurlien Houard of the Laboratoire d&#8217;Optique Appliquée in Palaiseau, France, a co-author of this study. Lightning rockets can apparently trigger a lightning strike by bringing a conductive material, like some type of salts, toward the static layer of a thunderhead. But a laser would be easier to control than a rocket.</p>

<p>A team of French researchers set out to test how well lasers can harness and control lightning. They sent a laser beam past a spherical electrode toward an oppositely charged flat electrode. The laser stripped away the outer electrons from the atoms in its way, ionizing the pathway between the electrodes and creating a plasma filament — like lab lightning — that channeled an electrical discharge from the flat electrode to the spherical one.</p>

<p>Then the team added a longer, pointed electrode to their set of electrode shapes and watched what happened. Left to its own devices, lightning follows the path of least resistance, striking the first thing it comes across — in a thunderstorm, that’s the tallest thing, and in this experiment, it’s the nearest thing. With no laser lightning rod, the discharge predictably hit the tall pointed electrode first. But when the researchers used the laser filament to guide it, the electrical discharge followed the ionized path and hit the spherical electrode instead.</p>

<p>The team found they could pull this off even after the discharge was already on its way, meaning they could divert the path of lightning. The research appears in the American Institute of Physics journal <a href="http://aipadvances.aip.org/resource/1/aaidbi/v2/i1/p012151_s1?bypassSSO=1">AIP Advances</a>.</p>

<p>Original from POPSCI: <a href="http://www.popsci.com/technology/article/2012-03/lightning-can-strike-twice-if-you-have-some-lasers">Lasers Can Be Used to Steer Lightning In Mid-Strike</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Absurd]]></title>
    <link href="http://mindon.github.com/blog/2012/03/15/words-that-sound-different/"/>
    <updated>2012-03-15T20:30:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/03/15/words-that-sound-different</id>
    <content type="html"><![CDATA[<p>The video from youtube <a href="http://www.youtube.com/watch?v=R281PhQufHo"><strong>GDC 2012</strong> - Porting your game to NaCl</a>.</p>

<p>When I finished watching this video at noon, I visit the speaker&#8217;s Google+. There I see this sentence as his motto</p>

<p><strong>Colt McAnlis</strong> &#8211; &#8220;If at first, the idea is not absurd, then there is no hope for it&#8221;</p>

<p>This is the first time I met the word: <strong>absurd</strong>!</p>

<p>Another article “Man, give it five minutes.”</p>

<p><a href="http://37signals.com/svn/posts/3124-give-it-five-minutes">http://37signals.com/svn/posts/3124-give-it-five-minutes</a></p>

<blockquote><p>There are two things in this world that take no skill: 1. Spending other people’s money and 2. Dismissing an idea.</p>

<p>Dismissing an idea is so easy because it doesn’t involve any work. You can scoff at it. You can ignore it. You can puff some smoke at it. That’s easy. The hard thing to do is protect it, think about it, let it marinate, explore it, riff on it, and try it. The right idea could start out life as the wrong idea.</p>

<p>So next time you hear something, or someone, talk about an idea, pitch an idea, or suggest an idea, give it five minutes. Think about it a little bit before pushing back, before saying it’s too hard or it’s too much work. Those things may be true, but there may be another truth in there too: It may be worth it.</p></blockquote>

<p>“Your first design may be the best, but you won&#8217;t know until you can&#8217;t find a better one.”</p>

<p><a href="http://blog.intercom.io/criticism-and-two-way-streets/">http://blog.intercom.io/criticism-and-two-way-streets/</a></p>

<h2>Working on TikTalk</h2>

<p>This time, when we start a new product. I need a name for it: I choose tiktalk hoping the product could be someting like a drop of water in the ocean of internet: providing a kind of driving force of a website&#8217;s life.</p>

<p>A name for product is importance to express our idea, activate our creative power to push it forward. (I learn this from the global mail project last year.)</p>

<p>It&#8217;s a hard work during these 3 weeks:</p>

<ol>
<li><p>Design the front-end &amp; back-end frameworks</p></li>
<li><p>Setup service of back-end</p></li>
<li><p>Rewrite front-end codes</p></li>
</ol>


<p>Today, finish front-end demo: a few features in detail, fixing bugs&#8230;</p>

<p>TikTalk is working fine! :-)</p>

<p>Next week, making back-end service more stable &amp; flexible is big challenge for me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Key of TCM -- Recommended Books]]></title>
    <link href="http://mindon.github.com/blog/2012/03/10/key-of-tcm-recommended-books/"/>
    <updated>2012-03-10T15:13:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/03/10/key-of-tcm-recommended-books</id>
    <content type="html"><![CDATA[<h2>《醫鑰》推薦閱讀</h2>

<ul>
<li><p>《黃帝內經》</p></li>
<li><p>《神農本草經》</p></li>
<li><p>《傷寒論》</p></li>
<li><p>《金匱》</p></li>
<li><p>《針灸大成》</p></li>
<li><p>《傷寒雜病論》</p></li>
<li><p>《千金藥方翼方》（古籍部分）</p></li>
</ul>


<p><strong>近代書籍</strong></p>

<ul>
<li><p>《中西匯通醫書五種》（四川 唐容川 字宗海 著）</p></li>
<li><p>《傷寒發微，金匱發微》（江蘇淮陰 曹穎甫 著）</p></li>
<li><p>《傷寒論新義，金匱要略新義》（餘無言著）</p></li>
<li><p>《單穴治病選萃》（人民衛生出版社）</p></li>
<li><p>《疾病預測學》（楊力 著，北京科學出版社）</p></li>
<li><p>《經方實驗錄》（姜佐景 著）</p></li>
<li><p>《針灸大成》（明朝 楊繼州 編寫）</p></li>
</ul>


<h2>麥盾推薦閱讀</h2>

<ul>
<li><p>《<a href="http://big5.ifeng.com/gate/big5/book.ifeng.com/lianzai/detail_2010_02/07/339087_0.shtml">問中醫幾度秋涼(艾寧)</a>》</p></li>
<li><p>《<a href="http://www.verycd.com/topics/2824440/">醫鑰——揭開中醫的奧秘(彭奕竣)</a>》</p></li>
<li><p> <a href="http://jicheng.sabi.tw/jcw/">笈成資料庫</a>: 笈成是一個收集、整理中醫藥典籍的開放計畫，未來也會考慮納入醫家、中藥、方劑、方歌資料的整理。</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[激情 - Passion]]></title>
    <link href="http://mindon.github.com/blog/2012/03/10/programmers-are-born-not-made/"/>
    <updated>2012-03-10T14:04:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/03/10/programmers-are-born-not-made</id>
    <content type="html"><![CDATA[<h2>Passion</h2>

<blockquote><p>Sometimes when you give an impressionable young mind (anybody deciding to learn to code, age is irrelevant) two tools and a problem, they will use the two tools to create four more tools. Then they will get on the internets and find some more tools … soon they have twenty tools and what was the problem you wanted me to solve again?</p>

<p>That’s passion!</p>

<p>Pure unadulterated passion for programming. When you can be fascinated, even excited, about this stuff without a need to solve a problem. Hell, even if you are solving a problem that you know is a meaningless exercise … that’s where greatness lies.</p>

<p>It doesn’t matter what age you started coding at – many studies have shown experience is not a predictor of quality in our world – what matters is that you have a passion for this stuff.</p>

<p>Because if you’ve got the passion, then you probably have everything else you need as well.</p></blockquote>

<!--more-->


<p><a href="http://swizec.com/blog/programmers-are-born-not-made/swizec/3369">Programmers are born not made</a></p>

<h2>激情</h2>

<blockquote><p>有时候，当你给一个有上进心的年轻心灵(任何愿意学习编程的人，年龄不是问题)两种工具和一个难题。他会使用这两种工具创造出4种工具。他会搜索互联网，发现更多的工具…很快，他有了20种工具，请问你还让我解决什么问题？</p>

<p>这就是激情！</p>

<p>心无杂念的对编程的激情。没有问题需要解决时仍然对编程入迷，甚至兴奋。甚至把解决一个已知的问题也当作一次普通的练习…这就是卓越之处。</p>

<p>多大岁数才开始学习编程，这并不重要——很多研究显示，在我们这个世界里，编程的工龄并不是水平的指示符——重要的是你对这个行业有个充满激情的心。</p>

<p>因为，一旦有了激情，你就拥有了所有其它的一切。</p></blockquote>

<p>做任何事情，如果没有激情，就没法做得比别人更好！</p>

<p>在IBG数年，有两个同事说的话一直让我印象深刻：</p>

<ol>
<li><p>技术，要有激情！ —— Teddy</p></li>
<li><p>同样的事情，你来做和别人做能有什么不一样？ —— Flying</p></li>
</ol>


<p>今天看到【外刊IT评论】的这篇文章（<a href="http://www.aqee.net/programmers-are-born-not-made/">一个人是否能成为程序员是上天注定的</a>），深有感触！特以此文自勉。</p>
]]></content>
  </entry>
  
</feed>
