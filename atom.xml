<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Mindon.IDEA]]></title>
  <link href="http://mindon.github.io/atom.xml" rel="self"/>
  <link href="http://mindon.github.io/"/>
  <updated>2014-11-16T13:05:30+08:00</updated>
  <id>http://mindon.github.io/</id>
  <author>
    <name><![CDATA[Mindon Feng]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[DJI Inspire 1 - Fly With Camera]]></title>
    <link href="http://mindon.github.io/blog/2014/11/16/dji-inspire-1-fly-with-camera/"/>
    <updated>2014-11-16T10:46:12+08:00</updated>
    <id>http://mindon.github.io/blog/2014/11/16/dji-inspire-1-fly-with-camera</id>
    <content type="html"><![CDATA[<p>对于Drone，一直也还是处于关注的角度，纯粹的关注者，还没有入门。</p>

<p>从对“Context”概念的关注，在TED看到的“Robots that fly … and cooperate” － 飞行的机器人且能协作</p>

<p><a href="http://www.ted.com/talks/vijay_kumar_robots_that_fly_and_cooperate">http://www.ted.com/talks/vijay_kumar_robots_that_fly_and_cooperate</a></p>

<p>到最近看的“A flying camera … on a leash” (by Fotokite.com) <a href="http://www.ted.com/talks/sergei_lupashin_a_flying_camera_on_a_leash">http://www.ted.com/talks/sergei_lupashin_a_flying_camera_on_a_leash</a></p>

<p>以及最近DJI发布的 Inspire 1，这款介于专业和非专业之间的令人振奋的产品。</p>

<p>嗯，我目前也还只是个看客。借别人的眼睛去飞越荒野，瞭望巨鲸翻腾……</p>

<p>对于飞行，我甚至还没有信心接过遥控器感受飞行的乐趣。</p>

<p>对于摄影，我也还只是用自动挡的自动党成员。</p>

<p>不过，我那颗的心，却时刻为科技的前行而兴奋不已，为眼睛触碰到的独特视野而雀跃。</p>

<p>分享一下目前找到的一些关于 DJI Inspire 1，“银思派.蚊”（自己给起的中文名，非官方；以后是不是有银思派.兔，银思派.梭利，银思派.拂鸥，银思派.珐埃…… 咱就不得而知了）</p>

<p>首先是官方的</p>

<p>“DJI Inspire 1 产品介绍”</p>

<p><embed src="http://player.youku.com/player.php/sid/XODI1NDc2OTQ4/v.swf" allowFullScreen="true" quality="high" width="480" height="400" align="middle" allowScriptAccess="always" type="application/x-shockwave-flash"></embed></p>

<p>“DJI Inspire 1- 展翅蓝天”</p>

<p><embed src="http://player.youku.com/player.php/sid/XODI1NDc1MjIw/v.swf" allowFullScreen="true" quality="high" width="480" height="400" align="middle" allowScriptAccess="always" type="application/x-shockwave-flash"></embed></p>

<p>DJI 的飞行器竟然有SDK，这也是极其令人兴奋的事情，特别对于我们这种做软件开发的爱好者来说（虽说我目前还算不上是个合格的爱好者）。 <a href="https://dev.dji.com">https://dev.dji.com</a></p>

<h2>收集各路评测：</h2>

<p>Fro Knows Photo 对DJI Inspire 1的Review</p>

<!--more-->


<p><embed src="http://player.youku.com/player.php/sid/XODI2Mzk2MDM2/v.swf" allowFullScreen="true" quality="high" width="480" height="400" align="middle" allowScriptAccess="always" type="application/x-shockwave-flash"></embed></p>

<p>【触动力】全新DJI专业一体化航拍飞行器 Inspire 1  （同官方视频，配中文说明而已）</p>

<p><embed src="http://player.youku.com/player.php/sid/XODI2Njk2MzQ4/v.swf" allowFullScreen="true" quality="high" width="480" height="400" align="middle" allowScriptAccess="always" type="application/x-shockwave-flash"></embed></p>

<p>The Verge Review</p>

<p><embed src="http://player.56.com/v_MTMwMjI1OTMz.swf" type="application/x-shockwave-flash" width="320" height="270" allowfullscreen="true" allownetworking="all" allowscriptaccess="always"></embed></p>

<p>Dronefly 评测</p>

<p><embed src="http://player.56.com/v_MTMwMTk4MDg4.swf" type="application/x-shockwave-flash" width="320" height="270" allowfullscreen="true" allownetworking="all" allowscriptaccess="always"></embed></p>

<p>暂时没找到更多的视频了，真正Inspire 1出来之后估计会更好 :-) 期待吧！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[喜欢这个TED演讲]]></title>
    <link href="http://mindon.github.io/blog/2014/11/15/i-like-this-ted-talk/"/>
    <updated>2014-11-15T15:40:37+08:00</updated>
    <id>http://mindon.github.io/blog/2014/11/15/i-like-this-ted-talk</id>
    <content type="html"><![CDATA[<p>This TED talk is from Philippe Starck: “Design and destiny”。</p>

<p>Philippe的英语口音听起来特别有意思——嗯……很有喜感。</p>

<p>他说话的和风格和生动的配音都引入入胜。当然，还有他演讲的内容也很能激发思考的。</p>

<p>目光的高度注定文明的程度，不过不要把目光放到头顶，因为那便到了胡扯的神的位置。</p>

<p>45亿年以来，人类不过是地球文明故事过程中间的一个环节，回望那个地球生命初期“愚蠢的”细菌，40多亿年之后的东西会怎么看人类呢？</p>

<p>这个TED很欢乐且会让你有所收获，推荐大家看看：</p>

<p>设计师 Philippe Starck—没有秀什么漂亮幻灯片—以 18 分钟追根究底探索「为什么要设计？」 这个问题。</p>

<!--more-->




<iframe src="https://embed-ssl.ted.com/talks/lang/zh-cn/philippe_starck_thinks_deep_on_design.html" width="640" height="360" frameborder="0" scrolling="no" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p>喜欢优酷的可以到这里看： <a href="http://v.youku.com/v_show/id_XNDYwMDExMzY4.html">Philippe Starck:对设计的深入思考</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Discuz安装错误]]></title>
    <link href="http://mindon.github.io/blog/2014/11/13/an-error-when-installing-discuz/"/>
    <updated>2014-11-13T14:08:05+08:00</updated>
    <id>http://mindon.github.io/blog/2014/11/13/an-error-when-installing-discuz</id>
    <content type="html"><![CDATA[<p>昨天在MBP上安装简体／繁体版本的时候遭遇这么一个错误：</p>

<p>“数据库连接错误”</p>

<p>“No such file or directory”</p>

<p>请返回修复。</p>

<p>除此之外没有任何的线索。这样的提示信息并对下一步解决问题并不能提供任何帮助。</p>

<p>搜索和尝试跟踪错误都无果。最后解决的办法是把缺省的 localhost 改成了 127.0.0.1 ，之后顺利安装！</p>

<p>Discuz，貌似并没有支持响应式，虽然有手机版。</p>

<p>正如Aby跟我说的，移动互联网时代，论坛可能是Out掉的东西了，除了在某些团体和领域局部留存之外。</p>

<p>前几个月用WordPress搭建的WeChat Blog根据访问数据来看，访问量里已经有超过70%的用户是通过移动设备访问的了。这即便对于我这样冲在互联网技术前沿的开发者来说，也是个难以想象的变化异常迅速的现象。Web从PC转到移动端，也就是短短的两年内发生的翻转。</p>

<p>移动端Web，目标响应时间1秒。</p>

<p>Docker容器式配置，极速扩展部署响应。</p>

<p>应用化部署，无感响应体验。</p>

<p>大数据挖掘，移动和社交营销，即时的用户反馈和沟通。</p>

<p>移动互联的时代，无不在追求响应的极速。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DJI - the Future of Possible]]></title>
    <link href="http://mindon.github.io/blog/2014/11/09/dji-phantom-the-future-of-possible/"/>
    <updated>2014-11-09T03:01:05+08:00</updated>
    <id>http://mindon.github.io/blog/2014/11/09/dji-phantom-the-future-of-possible</id>
    <content type="html"><![CDATA[<p>DJI - provides flying and camera stabilization systems all around the world.</p>

<p>对于遥控飞行器来说，常见的小直升机和遥控飞机在玩具市场还是不少的。而知道DJI之前比较有名气的是 Parrot AR.Drone 了。刚开始的时候Drone还是挺贵的。今年看到他们出了两款便宜些的产品，记得好像一个是可配轮贴墙走，一个是会跳的摄像头。</p>

<p>知道大疆DJI应该是近一两年的事情了，年终发奔驰事情之后很长时间才知道那就是DJI——应该是送飞行器礼物给沃兹的时候才关注到的。而今知道有前同事已经加盟DJI确实有些激动，之前也就简单的关注其生产的飞行器和精彩航拍视频。</p>

<p>对于飞行器，在TED里看过协作飞行，自主飞行的演示——极其精彩，建议找来看看（ <a href="http://ted.com">ted.com</a> ）。还有上个月TED网看到的 <a href="http://fotokite.org">Fotokite</a>也是挺有意思的。</p>

<p>DJI经历了8年之后，成为“全球无人机控制与航拍影像系统先驱”，是智能硬件发展的大环境下必然会出现的角色。能在全球做出自己的品牌并用心研发，很了不起，赞！</p>

<!--more-->


<p>虽然对飞行器一直有兴趣，但总还没觉得到买来玩的时候，一方面可能是因为自己还没有进入这个圈子。（自己与硬件相关的活动也就是去听过一次早期的柴火创客初期的讲座活动，关注柴火的论坛和微信。）</p>

<p>对于航拍飞行器，若作为使用者，我会主要关注： 1）飞行器耐用、好用；2）拍照稳定、清楚。上周有了一次近距接触DJI的大众型飞行器的体验，结合最近一直在看的《Design of Everyday Things》，记录几个点：</p>

<p>1）  携带问题——如果是旅游携带，电池是个大问题。（机场提供电池租售业务？）</p>

<p>2）  飞行操作——人机方向一致还好操作，不一致的时候就有些难度了。（能否有类似地图指南针的指示，操作的方向在眼前能直观体现。）</p>

<p>3）  告警偏弱——不够明显。比较奇怪，为何过速危险还允许过速？高空坠落方案能否避免？（比如若当前高度 > 起飞高度 + 1.5m 就不允许停机。）如果高空停机或失速，若配置弹射降落伞进行保护是否可行？</p>

<p>4）  控制和拍摄视觉是否可以分离以获得更佳的视界分离？</p>

<p>5）  是否需要增加黑匣子记录？记录干扰和异常数据，作为事故调查和产品改进。</p>

<p>6）  未来是否可以增加风热传感器，让飞行器可以感知周边环境状况。</p>

<p>7）  摄影设备是否需要增加流体罩，避免摄影设备外形制造湍流影响飞行和拍照的稳定性。</p>

<p>8）  有没有草丛里飞行的微拍mini飞行器？</p>

<p>9）  飞行器噪声和抗风能力也会是优化方向。</p>

<p>10）  建立专业问题和事故分析数据库…</p>

<p>未来，是具有无限可能的一个领域。DJI 飞吧！ <a href="http://dji.com">http://dji.com</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Two Problems Found in Jekyll When Using Octopress]]></title>
    <link href="http://mindon.github.io/blog/2014/11/09/two-bugs-found-in-jekyll/"/>
    <updated>2014-11-09T01:55:48+08:00</updated>
    <id>http://mindon.github.io/blog/2014/11/09/two-bugs-found-in-jekyll</id>
    <content type="html"><![CDATA[<p>我对Ruby并不太熟，也只是偶尔稍微学习过一点而已。用得比较频繁的就是这个博客的生成工具Octopress了。这个基于Sekyll框架的全静态博客生成工具就是ruby实现的。每次安装一系列的工具和依赖包带来的郁闷不亚于装其它一堆以来的linux工具。因为这个我一直在计划用go重写一个静态博客生成工具，当然github上已经能找到些了，比如gor。——话题跑远了。</p>

<p>这两个Sekyll的bug估计是被我折腾出来的。最近换笔记本，想把我的github博客工程迁到新笔记本上。这需要安装 Octopress 以来的Ruby运行环境，这个过程中搞了两个升级，一个是把Mac OS Yosemite自带的Ruby 2.0.0升级到了2.1.4，另一个是把 Octopress 也顺手升级到了github里的最新版。</p>

<p>升级安装Octopress环境过程中，首先遭遇了openssl问题，导致rake命令abort。一通折腾之后重启电脑莫名就好了。可以rake new_post了，不过rake generate报错…</p>

<!--more-->


<p>遭遇的第一个报错时因为我把原来博客项目里的 source 和 plugins, <em>deploy, public, </em>config.yaml 都拷贝过来了，剩下一个sass目录没搬到新的Octopress目录导致。</p>

<p>一系列的工具都可以正常运行之后，却遭遇了代码相关的rake generate报错：文件找不到！呃的神，报错没有任何指示是哪个rb文件——对于一个没有真正做过ruby项目和编码的人来说还是期待网上能找到解决方案的。不过，一些列的尝试失败之后，还是决定跟踪代码调试（差点没装 ruby-debug 和 rdebug 来搞）。</p>

<p>第1个bug是：运行 rake generate 的时候，老提示 sitemap.xml 读取失败文件不存在。估计是版本或安装混乱引发。</p>

<p>“Error reading file /<em>a**/gems/jekyll-sitemap-0.6.1/lib/sitemap.xml: No such file or directory @ rb_sysopen - /Users/</em>u<strong>/*a</strong>/gems/jekyll-sitemap-0.6.1/lib/sitemap.xml”</p>

<p>线索很明显，正确的路径前加多了一个项目source的路径。还好，找到 jekyll-sitemap-0.6.1/lib/ 目录里只有一个.rb文件，代码量不多，通过print的办法定位到了 Page.new，找到 sekyll 的 page.rb 再定位到 read_yaml() 从而发现了 convertible.rb 里的 site.in_source_dir(base, name) —— 就是这里的问题，当 base 是一个非项目内路径时，就发生了前面多加了项目source路径的情况。找到问题之后解决就容易了，判断一下就好了</p>

<pre><code>    if base.include? name
      fpath = site.in_source_dir(base, name)
    else
      fpath = File.join(base, name)
    end
</code></pre>

<p>这个修复本身也还不严谨，不过是够解决我的问题能写写博客就ok了。用这里的 fpath 替代原有的 File.read 里直接用的 site.in_source_dir(base, name) 就可以了。</p>

<p>第2个bug是一堆warning，估计是因为升级Octopress之后有的。</p>

<p>“Build Warning: Layout &lsquo;nil&rsquo; requested in blog/categories/***/atom.xml does not exist.”</p>

<p>这个相对简单了，就是模版里的 layout 部分出的问题，新Octopress只认null不认nil了。于是找到了 source/atom.xml 改nil为null。但是categories这个不是atom.xml让我一通找，最后在 _includes/custom/category_feed.xml 找到，同样修改解决。</p>

<p>折腾这个加写这篇博文就花了我几乎半天……</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shortcuts for Linux Console]]></title>
    <link href="http://mindon.github.io/blog/2014/11/08/shortcuts-for-linux-console/"/>
    <updated>2014-11-08T15:14:07+08:00</updated>
    <id>http://mindon.github.io/blog/2014/11/08/shortcuts-for-linux-console</id>
    <content type="html"><![CDATA[<p>I&rsquo;m using text editor coding HTML &amp; JavaScript. Enjoying compiling android apps, blackberry 10 apps, adobe air apps &hellip;</p>

<p>But moving cursor in a console command line is such a painful thing. Ah, yes, shortcuts, there must be some for console.</p>

<p>Here they are - shortcuts for linux console and Mac Terminal:</p>

<p>Ctrl+n:  next command (downward arrow) 下一个命令（往上箭头）</p>

<p>Ctrl+p:  previous command (upward arrow) 前一个命令（往下箭头）</p>

<p>Ctrl+r:  retrieve history commands 搜索历史命令</p>

<p>Ctrl+a:  ahead 跳至行首</p>

<p>Ctrl+e:  end 跳至行尾</p>

<p>Ctrl+b:  backward 左移 （往左箭头）</p>

<p>Ctrl+f:  forward 右移 （往右箭头）</p>

<!--more-->


<p>Ctrl+w:  wipe to ahead 删至行首</p>

<p>Ctrl+k:  kick out to tail 删至行尾</p>

<p>Ctrl+u:  undo to clean current command 取消命令</p>

<p>Ctrl+h:  delete history by one single character 往回删除一个字符</p>

<p>Ctrl+d:  delete one single character 删除光标字符</p>

<p>Ctrl+y:  yank, to paste text removed by Ctrl+u，Ctrl+k，Ctrl+w 粘贴上次删掉的文本</p>

<p>Ctrl+t:  taking left character to right 右移光标及其左一字符</p>

<p>Ctrl+i:  infill command auto 自动补充完整</p>

<p>Ctrl+m:  move (Enter) 行动（相当Enter键）</p>

<h2>Other shortcuts:</h2>

<p>Ctrl+s:  silence screen  使终端发呆，静止，可以使快速输出的终端屏幕停下来。</p>

<p>Ctrl+q:  quit silence  退出Ctrl+s引起的发呆。</p>

<p>Ctrl+z:  switch running task to backend (use fg to restore)  使正在运行在终端的任务，运行于后台。 （可用fg恢复）</p>

<p>Ctrl+c:  Abort current task 中断终端中正在执行的任务。</p>

<p>Ctrl+d:  EOT U+0004, exit 在空命令行的情况下可以退出终端。</p>

<p>Ctrl+[:  Escape 相当于Esc键。</p>

<p>Esc:  press 3 times to show all console commands 连续按3次显示所有的支持的终端命令。</p>

<p>Tab:   infill command auto (press 2 times to show list of candidates) 命令、路径补全功能。(连按2次显示候选列表)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开心，怒气和烦恼]]></title>
    <link href="http://mindon.github.io/blog/2014/09/19/happy-angry-and-worries/"/>
    <updated>2014-09-19T06:59:00+08:00</updated>
    <id>http://mindon.github.io/blog/2014/09/19/happy-angry-and-worries</id>
    <content type="html"><![CDATA[<p>开心：开放的心，放开的心。</p>

<p>怒气：基本上源于对相关不相关的人要求过多或者过高。</p>

<p>烦恼：大概都来自对自己过多或者过高的要求。</p>

<p>让心充满阳光，你才会体会到世界的美好；</p>

<p>让心充满好奇，你才会感受到世界的奇妙；</p>

<p>让心放空，你才能接收更多的幸福。</p>

<p>世界是丰富多彩的，未来是变幻莫测的。</p>

<p>宽容和感恩之心是走向未来的必备食粮。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Next Mobile Phone and BlackBerry 10.3]]></title>
    <link href="http://mindon.github.io/blog/2014/09/19/my-next-mobile-phone-and-blackberry-10-dot-3/"/>
    <updated>2014-09-19T06:21:00+08:00</updated>
    <id>http://mindon.github.io/blog/2014/09/19/my-next-mobile-phone-and-blackberry-10-dot-3</id>
    <content type="html"><![CDATA[<p>Yesterday, I updated my BlackBerry Q10 Dev Device to BlackBerry OS 10.3.0.738, It was from the 10.3.0.1154 autoloader.</p>

<p>It&rsquo;s flat styled - it looks much better.</p>

<p>But its camera shot method is changed to an android style, it&rsquo;s bad - it&rsquo;s a great part of the camera in BlackBerry 10 devices. Taking photo and its NFC are the features I enjoy everyday.</p>

<p>Yes, I&rsquo;m using a BlackBerry mobile phone, a dev device not for sell. Last mobile phone I bought for myself is a Nokia, now it&rsquo;s such a tiny one. Here they are</p>

<p><img src="http://mindon.github.io/images/blog/mobiles.jpg" alt="" /></p>

<p>I&rsquo;m always waitting for my next mobile phone.</p>

<p>iPhone? Yes, it&rsquo;s a great mobile phone, but I still find no reason for it - at least there&rsquo;s not enough reasons right now. Even the iPhone 6 - hmm, It&rsquo;s great and with a high price and not sell in China mainland yet :)</p>

<p>I was planning to buy a Nexus 4, then a Moto X, then a Next 5&hellip;</p>

<p>Google services is blocked in mainland China.</p>

<p>You may say a VPN may works - but I don&rsquo;t like it.</p>

<p>You may say a hosts with a rooted device works - But I don&rsquo;t like it either.</p>

<p>Before a mobile device hit my heart, I will still prefer my dev version BlackBerry Q10.</p>

<p>I have a Nexus 7(2013) and a Kindle, they are awesome devices.</p>

<p>But choosing a mobile phone, I could wait.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[那些恼人的尘灰]]></title>
    <link href="http://mindon.github.io/blog/2014/09/18/dust-in-a-old-building/"/>
    <updated>2014-09-18T22:32:00+08:00</updated>
    <id>http://mindon.github.io/blog/2014/09/18/dust-in-a-old-building</id>
    <content type="html"><![CDATA[<p>前两天台风“海鸥”的飞过，让周末刚大扫除干净的房子又满是尘灰。我们家在一栋有些老的高楼里，一到刮大风的时候就不知道哪刮出的尘灰，弄得到处都是，每次我都会想：要是有个一大的吸尘器，把整栋楼吸吸尘就好了 :p</p>

<p><img src="http://mindon.github.io/images/blog/dust.jpg" alt="" /></p>

<p>有一定年限的房子，积尘和设计上缺陷带来的漏水问题一直是让人头大的问题，有什么技术和办法能改善一下呢？</p>

<p>有待探讨。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[西少爷.肉夹馍，开分店啦]]></title>
    <link href="http://mindon.github.io/blog/2014/08/23/about-xishaoye-roujiamo/"/>
    <updated>2014-08-23T17:41:00+08:00</updated>
    <id>http://mindon.github.io/blog/2014/08/23/about-xishaoye-roujiamo</id>
    <content type="html"><![CDATA[<p>这个周日（Aug 23, 2014），<a href="http://baike.baidu.com/view/12500068.htm">西少爷肉夹馍</a>望京分店要开业了。这个肉夹馍品牌今年可算是IT圈里的热门话题。主题团队均来自BAT等大公司的离职员工——他们传递出一种信息：选择的自由，奋斗的激情，学习的能力和感染的力量。</p>

<p>孟兵，是个我没有认识和见面之前就能感受到他行动能力的小伙子。他在T工作期间，学习和工作都异于常人地努力和拼命，而且方向很明确和坚定。</p>

<p>昨天微信上看到他的分店开张的消息，可以感觉到他在一步步朝着自己的目标前行，很棒！</p>

<p>其实写这篇日志，不是因为他的新店开张，而是因为看到“肉夹馍”几个字，有点造字的一个想法，作品是……</p>

<!-- more -->


<p><img src="http://mindon.github.io/images/blog/r.png" alt="" /></p>

<p>要表达什么？嗯… 不解释。不同的人理解产生不同的诠释，才是最有意思的地方。</p>

<p>当然，顺便宣传一下也是要的 :-p</p>

<p>第一个店开在五道口，Aby在北京很熟悉和喜欢的地方，被称为“宇宙的中心”的位置。</p>

<p>第二个店：8-24（本周日）上午10：30，西少爷望京凯德Mall店准时开业！（地下一层扶梯正对第3家店）这个新店会有三种新品，据说“牛馍王”就是其中之一。免费送馍是他们店的传统了，附近的大公司工卡也能免费领。</p>

<p>祝他们生意兴隆 :-) 西少爷们，加油！</p>

<p>IT码农的才能不仅仅是Coding，我们强大的学习能力，适应能力和其他行业能力也是不容忽视的。Fighting!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seeing Is Not Always Believable]]></title>
    <link href="http://mindon.github.io/blog/2014/08/23/seeing-is-not-always-believable/"/>
    <updated>2014-08-23T16:18:00+08:00</updated>
    <id>http://mindon.github.io/blog/2014/08/23/seeing-is-not-always-believable</id>
    <content type="html"><![CDATA[<p>&ldquo;This is an illusion that&rsquo;s so good it&rsquo;s hard to believe it&rsquo;s an illusion. When the black and white lines disappear, it&rsquo;s easy to see the rectangles are moving at constant speed.  But before that they seem to be taking turns, and pausing when they reach each new line.&rdquo;</p>

<p>The original illusion image is a gif. I cannot believe it&rsquo;s a true illusion - it may be a gif animation trick. So I decided to check on the gif animation inside - frame by frame: It&rsquo;s a true illusion! Amazing!</p>

<p>To clean your doubt. I make a interactive image for this illusion:</p>

<!-- more -->


<p><svg id="illus" width="600" height="250"></svg></p>

<ol>
    <li> click vertical bars to switch between bars and pure background color;</li>
    <li> click the color block to restart animation</li>
</ol>




<script src="http://mindon.github.io/lib/snap.svg-min.js"></script>


<script>
var s = Snap('#illus');
var p = s.path("M10 0 v250 h10 v-250z").attr({
  fill: "#000000"
}).pattern(0, 0, 20, 250);

s.rect(0,0,600,250).attr({
  fill: p
}).click(function(){
  this.attr({fill: !/url/.test(this.attr('fill')) ? p : '#666666'});
});

var r1 = s.rect(0,60,40,20).attr({
  fill: '#ffff00'
}).click(resetBlocks);

var r2 = s.rect(0,160,40,20).attr({
  fill: '#0000ff'
}).click(resetBlocks);

var blocks = Snap.set(r1, r2);
function resetBlocks() {
  blocks.attr({x:0}).animate({x: 560}, 18000, mina.linear, function(){
    resetBlocks();
  });
}
resetBlocks();
</script>


<p>Still hard to believe? The Illusion &ndash; Seeing is not always believable! Be careful of what you see!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Programming Language: Swift]]></title>
    <link href="http://mindon.github.io/blog/2014/08/22/the-programming-language-swift/"/>
    <updated>2014-08-22T06:37:00+08:00</updated>
    <id>http://mindon.github.io/blog/2014/08/22/the-programming-language-swift</id>
    <content type="html"><![CDATA[<p>Swift是苹果公司今年推出的新编程语言。花了差不多两个星期看完iBooks里官方的《The Swift Programming Language》之后，感觉Swift简单易用的脚本式语法，灵活性，扩展性，清晰严格的规范确实是集成了很多语言的优点。</p>

<p>Swift + LLVM，如果再有跨平台的开发环境的话，纯从编程语言的角度来看，是具有替代C++，PYTHON，Java的强大实力。</p>

<p>不过现实是目前如此庞大的软件开发人群，要投入到一种新的即使是设计精良的编程语言，必然是一个长期的过程，而且需要需求的必要性来驱动。</p>

<p>如果Swift做不到别的语言不可替代的事情，不管语言设计本身好到什么程度，应用和推广始终会是硬伤。</p>

<p>愿Swift能顺利成长壮大，发挥威力！ :-p</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WordPress, Golang & Swift]]></title>
    <link href="http://mindon.github.io/blog/2014/08/10/wordpress-golang-and-swift/"/>
    <updated>2014-08-10T11:47:00+08:00</updated>
    <id>http://mindon.github.io/blog/2014/08/10/wordpress-golang-and-swift</id>
    <content type="html"><![CDATA[<p>&ldquo;WordPress is web software you can use to create a beautiful website or blog. We like to say that WordPress is both free and priceless at the same time.&rdquo;  &ndash; <a href="http://wordpress.org/">wordpress.org</a></p>

<p>It&rsquo;s welcomed worldwide with lots of themes and plugins to enpower its features and functions. WordPress has more than ten years history. But I setup and got into its details only at the end of June this year.</p>

<p>Customize one of its theme to our style, separated it into two versions - one is readonly without admin features as the live product for public, the other is the full version accessible only for internal network.</p>

<p>Cache, Share to facebook and sitemap.xml for SEO is also important features you cannot miss.</p>

<p>Make the blog online in 2 weeks, fixing bugs, improve SEO and share time to time in another 3 weeks.</p>

<p>Now, simple plugins, update themes, shortcode features, wordpress editor - tinymce plugin, facebook share metas &hellip; that&rsquo;s what i got from the one month project with WordPress. It&rsquo;s great to get such a project to get into WordPress, from its apache/nginx settings, .htaccess controls to some coding details all by myself.</p>

<!--more-->


<p>At the same time, I got another opportunity to practise <a href="http://golang.org">Go Language</a>. It&rsquo;s a simple internal management website with uploads, mysql database operation, oa authorization, handling JSON and sessions.</p>

<p>My first practice on golang is <strong>tof</strong> &ndash; a simple library to implement OA APIs of our company. In fact, it&rsquo;s a golang version from my former nodejs version.</p>

<p>The &ldquo;Notify Me&rdquo; in golang works like a charm. I enjoy coding in go.</p>

<p>I cannot stop learning those wonderful programming techs. I&rsquo;m reading on the Swift book on iBook. There&rsquo;s lots of coding styles of Swift and Golang are alike. As a Front-End JavaScript developer, It&rsquo;s a enjoyment.</p>

<p>Any opportunity to practise the Swift? I&rsquo;m so sure there will be one :-)</p>

<p>I like Golang, maybe Swift too!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[激活备份的敏思日志]]></title>
    <link href="http://mindon.github.io/blog/2014/06/22/restore-my-old-blogms-blogs/"/>
    <updated>2014-06-22T10:35:00+08:00</updated>
    <id>http://mindon.github.io/blog/2014/06/22/restore-my-old-blogms-blogs</id>
    <content type="html"><![CDATA[<p>10年前，开始在敏思博客写日志，并在那里认识了我们家的Aby。不过后来敏思博客网站关闭，我就用一个自己写的工具把日志备份了下来。</p>

<p>昨天用go语言(golang)写了一个读取mht格式的程序，才发现当初备份的日志里，几乎有一半的日志对应的照片和图片没能保存成功，看来mht保存并不是那么靠谱的。还好文字都保存基本没问题。</p>

<!--more-->


<p>这个程序，把MHT文件格式里的文字和图片提取出来，并转成 OCTOPRESS （ 基于Jekyll ）用的markdown日志模板格式和独立图片文件。</p>

<p>总共六百多篇日志，因为很多照片日志图片丢失，清理了一下，最后剩下三百余篇统一放到了BlogMS分类中。</p>

<p>感谢敏思社区，特此文纪念。</p>

<p>（注：原敏思的朋友，如果是用麦盾当初的备份工具备份日志的，需要整理成简单html格式的可联系我，一定会抽空免费为大家处理，不过大部分日志图片/照片保存失败的事情，很抱歉，因为才发现这个问题，所以麦盾也无能为力了。）</p>

<p><span id="link-tags">敏思博客;敏思社区;OCTOPRESS;Jekyll;markdown</span></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Free Prototype Design Tools]]></title>
    <link href="http://mindon.github.io/blog/2014/06/17/free-prototype-design-tools/"/>
    <updated>2014-06-17T06:00:00+08:00</updated>
    <id>http://mindon.github.io/blog/2014/06/17/free-prototype-design-tools</id>
    <content type="html"><![CDATA[<p>原型设计工具推荐</p>

<p>Here&rsquo;s some great free prototype design tools:</p>

<h2>AXure RP</h2>

<p>An Interactive Wireframe Software and Mockup Tool.</p>

<p>Axure RP gives you the wireframing, prototyping and specification tools needed to make informed design choices, persuade any skeptics, get your design built to spec&hellip; and maybe win a few fans along the way. Choose the Standard edition for prototyping or go Pro to add documentation and collaboration features.</p>

<p><a href="http://www.axure.com/">Axure RP</a> 是一个专业的快速原型设计工具。Axure（发音：Ack-sure），代表美国Axure公司；RP则是Rapid Prototyping（快速原型）的缩写。</p>

<p>Axure RP是美国Axure Software Solution公司旗舰产品，是一个专业的快速原型设计工具，让负责定义需求和规格、设计功能和界面的专家能够快速创建应用软件或Web网站的线框图、流程图、原型和规格说明文档。作为专业的原型设计工具，它能快速、高效的创建原型，同时支持多人协作设计和版本控制管理。</p>

<h2>Origami</h2>

<p><a href="http://facebook.github.io/origami/">Origami</a> is a free design prototyping with Quartz Composer — created by the Facebook Design team—that makes interactive design prototyping easy and doesn’t require programming.</p>

<!--more-->


<p>Quartz Composer is a freely-available Mac OS X application by Apple that&rsquo;s been around for nearly a decade.</p>

<p>Origami 是一个来自 Facebook 设计团队的作品，是 Quartz Composer 的免费工具包，可在无需编程的情况下轻松实现与设计原型进行交互。</p>

<h2>Balsamiq Mockups</h2>

<p>Balsamiq <a href="http://webdemo.balsamiq.com/">Web Demo</a></p>

<p>Founded in March 2008, Balsamiq Studios aims to make the world a better place by helping people create software that is easier to use. Balsamiq is a fast-growing but still-very-personable software company. We like to compete on usability and customer service. Our first product is Balsamiq Mockups. Launched in June 2008, Mockups helps software designers and developers build great software by letting them easily sketch out their ideas, then quickly collaborate and iterate over them. Balsamiq Mockups has netted over $2,000,000 in sales in first 18 months of business and is gathering rave reviews.</p>

<p>Balsamiq Mockups是一种软件工程中快速原型的建立软件，可以做为与用户交互的一个界面草图，一旦客户认可可以做为美工开发HTML的原型使用。</p>

<p>Balsamiq Mockups是美国加利福利亚的Balsamiq工作室（2008年3月创建）推出的原型图绘制软件。于2008年6月发行了第一个版本。它的使命是帮助人们更好、更容易的设计软件产品。</p>

<h2>Framer</h2>

<p><a href="http://framerjs.com/">FRAMER.JS</a> is a prototyping toolkit built for designers to turn static mockups into prototypes with animation &amp; interaction. <a href="http://github.com/koenbok/Framer">Github</a></p>

<p>Framer是一款基于JavaScript的开源原型框架，可以帮助开发者及设计师轻而易举地创建出非常逼真的应用原型，还包括滤镜、弹性物理、完整的3D效果等。Framer能够同时应用于桌面和移动设备之上，通过它，开发者或设计师只需简单地创建图像、事件等模块即可构建和测试复杂的交互和动画。</p>

<h2>Pencil</h2>

<p>An open-source GUI prototyping tool that&rsquo;s available for ALL platforms.</p>

<p><a href="http://pencil.evolus.vn/">Pencil</a> is built for the purpose of providing a free and open-source GUI prototyping tool that people can easily install and use to create mockups in popular desktop platforms.</p>

<p>Pencil provides various built-in shapes collection for drawing different types of user interface ranging from desktop to mobile platforms.</p>

<p>Pencil 是一款开源的原型图绘制工具，手绘风格的，就像自己在纸上画的那样。Pencil 还可以用来绘制各种架构图和流程图，同时还提供 Firefox 的插件。</p>

<h2>Solidify</h2>

<p>Make Interface Screens Come To Life</p>

<p><a href="http://solidifyapp.com/">Solidify</a> is the quickest way to prototype interface screens for user testing feedback across devices.</p>

<p>Solidify lets you create clickable prototypes from sketches, wireframe, or mockup. Validate user flows on any device by performing user tests in person, remotely or on your testers own time to get the feedback you need.</p>

<p> Solidify 出自ZURB公司，允许用户从模型，线框或者草图创建可以点击的原型。通过它，可以对界面交互可以快速产生原型。而且，这些原型可以很容易的测试是否可以适用于平板，个人电脑或者手机。</p>

<h2>others</h2>

<p>Generator, InVision, PowerMockup, Antetype, UXPin, QuirkTools, Wireframe.CC, Easel, Proto.io, POP</p>

<p><a href="http://designmodo.com/wireframing-prototyping-tools/">10 Wireframing and Prototyping Tools for 2013</a></p>

<p><span id="link-tags">Quartz Composer;Balsamiq Studios;PowerMockup;InVision;Antetype;Wireframe.CC</span></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift - the New iOS Language]]></title>
    <link href="http://mindon.github.io/blog/2014/06/17/swift-the-new-ios-language/"/>
    <updated>2014-06-17T05:38:00+08:00</updated>
    <id>http://mindon.github.io/blog/2014/06/17/swift-the-new-ios-language</id>
    <content type="html"><![CDATA[<p><strong> Apple&rsquo;s top secret Swift language grew from work to sustain Objective-C, which it now aims to replace </strong></p>

<p>Feature By <a href="http://twitter.com/danieleran">Daniel Eran Dilger</a></p>

<p>Work on Swift—Apple&rsquo;s surprise new programming language unveiled at WWDC—started development four years ago in conjunction with efforts to keep Objective-C relevant. Swift now aims to quickly replace Objective-C for modern Cocoa development on iOS and OS X.</p>

<p><strong>LLVM</strong></p>

<p>Rather than being an entirely new &ldquo;beta&rdquo; idea, work on Swift started in the summer of 2010, <a href="http://nondot.org/sabre/">according</a> to the new language&rsquo;s originator Chris Lattner (below), who has worked at Apple since 2005. Lattner is probably best known for LLVM, the Low Level Virtual Machine compiler infrastructure project with a wyvern dragon mascot (above).</p>

<h2>LLVM: A new compiler for Objective-C</h2>

<p>LLVM <a href="http://appleinsider.com/articles/08/06/20/apples_other_open_secret_the_llvm_complier/page/1">originated</a> as Lattner&rsquo;s research project while a student at the University of Illinois, Urbana-Champaign in 2000. It was first publicly released as version 1.0 in 2003. In 2004, Lattner was a summer intern at Microsoft Research, where he worked on the Phoenix complier infrastructure, working to allow LLVM to compile and run .NET code.</p>

<p><strong>Chris Lattner</strong></p>

<p>Lattner caught the attention of Apple after posting questions about Objective-C to the company&rsquo;s objc-language mailing list. Apple in turn began contributing to Lattner&rsquo;s LLVM open source project in 2005 and subsequently hired Lattner and began funding his work.</p>

<p>In 2007, the LLVM project released <a href="http://clang.llvm.org/">Clang</a>, a front end code parser for Objective-C/C/C++ aimed to provide fast compiling with low memory use, expressive diagnostics, a modular library-based architecture, and tight integration within an IDE such as Apple&rsquo;s Xcode.</p>

<!--more-->


<p>In addition to the &ldquo;pure&rdquo; LLVM Clang project, Lattner also proposed integrating the new LLVM, featuring its advanced code optimizer and code generator, into the existing GCC (GNU C Compiler), adding modern methods for &ldquo;aggressive loop, standard scalar, and interprocedural optimizations and interprocedural analyses&rdquo; missing in the standard GCC components that had long been a core element of the development tools in Unix operating systems like Apple&rsquo;s OS X.</p>

<p>GCC&rsquo;s support for Objective-C, the primary development language of Apple&rsquo;s OS X Cocoa (and NeXTStep, its historical predecessor), had grown stagnant, so Apple&rsquo;s motivation for funding the open development of both Clang and LLVM-GCC involved keeping the Mac&rsquo;s Objective-C relevant as a language.</p>

<p>Apple began aggressively using LLVM in OS X, providing LLVM-GCC to its Mac developers in order to provide access to the new LLVM compiler and benefit from its code optimizations without requiring substantial changes to their workflow based on the previous GCC.</p>

<p>The company also integrated LLVM into the <a href="http://lists.cs.uiuc.edu/pipermail/llvmdev/2006-August/006492.html">OpenGL stack</a> of OS X 10.5 Leopard in 2006, and leveraged LLVM to help in migrating the Mac to Intel beginning in 2005 and to the ARM architecture for the iPhone in 2007.</p>

<p>By the 2012 release of OS X Mountain Lion and iOS 6, Apple had moved entirely to Clang, leaving both LLVM-GCC and GCC behind. LLVM not only powers Apple&rsquo;s software, but is also tightly integrated into the development of Apple&rsquo;s custom silicon, including the A6 and A7 Application Processors.</p>

<p>LLVM also plays a key role in other Apple technologies, from the LLDB debugger to new APIs including <a href="http://appleinsider.com/articles/14/06/04/apples-top-secret-swift-language-grew-from-work-to-sustain-objective-c-which-it-now-aims-to-replace">Metal</a>, Apple&rsquo;s new layer for high performance graphics on iOS that exposes the graphics capabilities of the newest A7 with the least possible overhead, delivering a significant performance boost over using the more general purpose OpenGL.</p>

<h2>Swift: A new language for LLVM</h2>

<p>By 2010, LLVM&rsquo;s solution to GCC&rsquo;s stagnant Objective-C support created a new scenario where LLVM could now support more features than could be easily added to Objective-C. Lattner began working on a new programming language that summer, and a year later was joined by &ldquo;a few other (amazing) people.&rdquo;</p>

<p>By July 2013, Lattner noted that the new Swift project had become &ldquo;major focus for the Apple Developer Tools group.&rdquo; It remained a <a href="http://appleinsider.com/articles/14/06/03/monday-at-wwdc-apple-delivers-big-surprises-as-most-predictions-ended-up-wrong">secret</a> to the public for the next year. Lattner notes in his <a href="http://nondot.org/sabre/Resume.html#Apple">resume</a> that he &ldquo;took over management and leadership of the entire Developer Tools department at Apple&rdquo; at the beginning of 2013.</p>

<p>&ldquo;In addition to compilers and low-level tools,&rdquo; Lattner notes, &ldquo;I am now responsible for the Xcode IDE, Instruments performance analysis tool, Apple Java releases, and a variety of internal tools. Xcode 5 is the first result of this work, though much of the feature planning and implementation was complete before I took over. I drove convergence and defined a few key features that were released at WWDC.&rdquo;</p>

<p>Lattner noted that the new Swift language &ldquo;is the product of tireless effort from a team of language experts, documentation gurus, compiler optimization ninjas, and an incredibly important internal dogfooding group who provided feedback to help refine and battle-test ideas. Of course, it also greatly benefited from the experiences hard-won by many other languages in the field, drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list.&rdquo;</p>

<p>Apple&rsquo;s free <a href="https://itunes.apple.com/WebObjects/MZStore.woa/wa/viewBook?id=881256329">iBook on Swift</a> also notes that &ldquo;Swift has been years in the making,&rdquo; adding that &ldquo;Apple laid the foundation for Swift by advancing our existing compiler, debugger, and framework infrastructure.</p>

<p>&ldquo;We simplified memory management with Automatic Reference Counting (ARC). Our framework stack, built on the solid base of Foundation and Cocoa, has been modernized and standardized throughout. Objective-C itself has evolved to support blocks, collection literals, and modules, enabling framework adoption of modern language technologies without disruption. Thanks to this groundwork, we can now introduce a new language for the future of Apple software development.&rdquo;&ldquo;Swift is the first industrial-quality systems programming language that is as expressive and enjoyable as a scripting language&rdquo;</p>

<p>The company also observes that Swift &ldquo;is friendly to new programmers. It is the first industrial-quality systems programming language that is as expressive and enjoyable as a scripting language.&rdquo;</p>

<p>Apple also draws attention to the integration between Swift and LLVM, noting that the new language &ldquo;combines the best in modern language thinking with wisdom from the wider Apple engineering culture. The compiler is optimized for performance, and the language is optimized for development, without compromising on either.&rdquo;</p>

<h2>Swift&rsquo;s Interactive Playgrounds &amp; REPL</h2>

<p>Lattner also commented on two new features associated with Swift: Xcode&rsquo;s new Playgrounds (below) and REPL (Read-Eval-Print-Loop) debugging console.</p>

<p>&ldquo;The Xcode Playgrounds feature and REPL were a personal passion of mine, to make programming more interactive and approachable,&rdquo; Lattner noted. &ldquo;The Xcode and LLDB teams have done a phenomenal job turning crazy ideas into something truly great.</p>

<p>&ldquo;Playgrounds were heavily influenced by Bret Victor&rsquo;s <a href="http://worrydream.com/#!/LearnableProgramming">ideas</a> [ which are cited as a inspiration for Khan Academy&rsquo;s online environment for <a href="http://www.khanacademy.org/computing/cs">learning to program</a> ], by <a href="http://www.chris-granger.com/lighttable/">Light Table</a> [an open source IDE designed to provide realtime feedback about code and how programs work] and by many other interactive systems.</p>

<p>&ldquo;I hope that by making programming more approachable and fun, we&rsquo;ll appeal to the next generation of programmers and to help redefine how Computer Science is taught,&rdquo; Lattner stated.</p>

<p>Apple&rsquo;s presentation of Swift notes that &ldquo;Playgrounds make writing Swift code incredibly simple and fun. Type a line of code and the result appears immediately. If your code runs over time, for instance through a loop, you can watch its progress in the timeline assistant. The timeline displays variables in a graph, draws each step when composing a view, and can play an animated SpriteKit scene. When you&rsquo;ve perfected your code in the playground, simply move that code into your project.&rdquo;</p>

<p>The company states that Xcode&rsquo;s Playground lets users &ldquo;design a new algorithm, watching its results every step of the way; create new tests, verifying they work before promoting into your test suite; experiment with new APIs to hone your Swift coding skills.&rdquo;</p>

<p>Apple notes that the REPL debugging console in Xcode &ldquo;includes an interactive version of the Swift language built right in. Use Swift syntax to evaluate and interact with your running app, or write new code to see how it works in a script-like environment.&rdquo;</p>

<p>Apple says it plans to rapidly evolve Swift in response to developers needs and feature requests.</p>

<p>Thinkful, an education startup focused on mentor-led programming education, has already announced plans to offer a <a href="https://www.thinkful.com/a/dlp/learn-blue/base/IOS-002">course on developing in Swift</a>, in a program that begins July 16.</p>

<p><span id="link-tags">iOS;XCode;Clang;Chris Lattner;LLVM;Objective-C;Swift;NeXTStep;REPL</span></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于健康，我们忘掉了什么？]]></title>
    <link href="http://mindon.github.io/blog/2014/06/14/what-we-missed-with-our-health/"/>
    <updated>2014-06-14T20:30:00+08:00</updated>
    <id>http://mindon.github.io/blog/2014/06/14/what-we-missed-with-our-health</id>
    <content type="html"><![CDATA[<p>当我们在争论中医还是西医更强大更有效的时候，不自觉中却忘掉了医术是为什么而生的。而身体的状态和需求，才是医术需要关注的主角。</p>

<p>第一次在书城看到王唯工教授的《气的乐章》已经是数年前的事情了，至今依旧印象深刻。这是难得的一部结合现代科学技术来解读传统中医原理的著作：试图解释人体身上看起来不寻常的结构和状态。《气的乐章》以心脏的博动为核心，五脏处于不同共振谐波态，之间通过共振来交互协调。</p>

<p>上周末看了几年前梁冬主持的《国学堂》对话王唯工教授的节目，提到了另外一本《水的漫舞》，讲述的是二氧化碳和酸水的危害。这两本书都是王唯工教授近三十余年来用现代科学实验手段通过试验和实践总结出来的成果，给现代医学的发展带来了令人鼓舞的火花。其中具体的细节和观点可能跟复杂的实际多少可能会有所偏向，也不一定就是真理。但带来的思考和对未来中医发展方向的反思确是异常宝贵的。</p>

<p>抛开医学的阵营，一切繁复丰富的技术和理论，如果回归到人体这个生命体本身，医术需要关注的是什么呢？</p>

<!--more-->


<ul>
<li><p>2009年6月8日，法国人斯蒂凡·弗苏闭气时间达到11分35秒，创造了一项静止闭气世界纪录。</p></li>
<li><p>人的核心体温为37摄氏度，降到大约24度时心跳就会停止，导致死亡。</p></li>
<li><p>即使在寒冷的环境中（水流失速度缓慢），没有水，人们也只能坚持7天左右。</p></li>
<li><p>1963年12月28日，加利福尼亚州圣地亚哥的17岁在校生兰迪·加德纳从起床开始，创下的264小时（11天）记录至今仍是科学验证过的最长的不睡觉时长。</p></li>
<li><p>最长时不进食记录者是1981年爱尔兰绝食抗议者基兰·多尔蒂，他在绝食73天后死去。在补充维生素和水的情况下，人们可以不吃东西活一年。</p></li>
</ul>


<p>由此可见，人体要保持正常，首要的是氧气，然后是水，再则是食物。另外要保持正常的体温，充足的睡眠。</p>

<p>从维持生命体最基本的条件，我们才能更清楚地了解身体的状态，并进行适当的调整和干预。</p>

<ol>
<li>氧气； 2. 水份； 3. 食物； 4. 体温； 5. 睡眠</li>
</ol>


<p>可以预见，人体故障除物理损伤以外，大多都是跟人体生存基本条件的供给和传输变化有关的。</p>

<ul>
<li><p>氧气作为生存的首要条件，对应的获取途径是呼吸系统（鼻腔、呼吸道、肺），传输相关系统（心脏、血管）。</p></li>
<li><p>水分的重要作用是作为介质，为氧气和养份的传入和吸收提供协助，以及排出代谢产物的功能。</p></li>
<li><p>食物则作为系统正常运作所需能量和养份的主要提供途径，也是氧气消耗的主战场。</p></li>
<li><p>体温是人体维持正常运作最直接的环境因素，会直接影响到氧气在体内的化学反应和物理作用。</p></li>
<li><p>睡眠则是人体进行系统故障修复，代谢产物处理的核心场景。</p></li>
</ul>


<p>紧急程度相对低必要程度相对低的健康条件，必然是为核心健康条件服务的，而且在关键情况下是可以牺牲的，这就是生病的根本原因：系统为了保障核心健康条件的满足，要减少次要因素的供给，甚至放弃局部的功能。</p>

<p>这是从王唯工教授那里得来的启示。从这个指导思想出发，整理、发展和完善现有的医学技术，而不是割裂中医和西医，才能营造一个健康领域的新纪元。</p>

<p>科学从来都是面向未来的，而不是停步在过去和现在。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Facebook Open Sourcing Paper Animation Engine Pop]]></title>
    <link href="http://mindon.github.io/blog/2014/05/02/facebook-open-sourcing-paper-animation-engine-pop/"/>
    <updated>2014-05-02T11:09:00+08:00</updated>
    <id>http://mindon.github.io/blog/2014/05/02/facebook-open-sourcing-paper-animation-engine-pop</id>
    <content type="html"><![CDATA[<p>The Pop animation engine is responsible for all of the transitions and animations displayed on Paper, including all scrolling, bouncing, and unfolding effects.</p>

<p>source code: <a href="https://github.com/facebook/pop">https://github.com/facebook/pop</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Extract Strings From Source Codes?]]></title>
    <link href="http://mindon.github.io/blog/2014/05/02/how-to-extract-strings-from-source-codes/"/>
    <updated>2014-05-02T08:26:00+08:00</updated>
    <id>http://mindon.github.io/blog/2014/05/02/how-to-extract-strings-from-source-codes</id>
    <content type="html"><![CDATA[<p>I&rsquo;d developed a simple online tool (Using <a href="http://nodejs.org">Node.JS</a>) to extract Chinese strings and merge translations automatically before, in a global mail project.</p>

<p>The tool doesn&rsquo;t care about the source languages. it extracts non-ascii line-based strings, skipping something else - such as HTML codes.</p>

<p>It&rsquo;s a simple aid tool only, not much time to improve.</p>

<p>I&rsquo;m always searching open source tools to extract strings from all kinds of source codes, but it seems no such a stuff.</p>

<p>Last month, I found one: the <a href="http://highlightjs.org/">highlightjs</a>!</p>

<p>Yes, it knows lots of programming languages - that&rsquo;s what I&rsquo;m looking for.</p>

<!--more-->


<p>I try to update the core js to testing the idea - it works: Using syntax highlight library to extract strings.</p>

<p>It&rsquo;s great!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[All Kinds of 2048!]]></title>
    <link href="http://mindon.github.io/blog/2014/05/02/all-kinds-of-2048/"/>
    <updated>2014-05-02T08:17:00+08:00</updated>
    <id>http://mindon.github.io/blog/2014/05/02/all-kinds-of-2048</id>
    <content type="html"><![CDATA[<p>在 Flappy Bird 的疯狂Clone之后，又有了 2048 复制 three 的疯狂。</p>

<p>Exploring the open source 2048 game javascript examples</p>

<p><a href="http://learnjs.io/blog/2014/03/17/exploring-open-source-2048-game-javascript-examples/">http://learnjs.io/blog/2014/03/17/exploring-open-source-2048-game-javascript-examples/</a></p>

<p>2048玩法思路【果壳日志】</p>

<p><a href="http://www.guokr.com/blog/748078/">http://www.guokr.com/blog/748078/</a></p>

<!--more-->


<p>More 2048
<a href="http://cyberzhg.github.io/2048/">http://cyberzhg.github.io/2048/</a></p>

<p>源码：<a href="https://github.com/CyberZHG/2048">https://github.com/CyberZHG/2048</a></p>

<p>从2 到 2048 需要</p>

<p>2 - 4 - 8 - 16 - 32 - 64 - 128 - 256 - 512 - 1024 - 2048 - &hellip;</p>

<p>即 2<sup>1</sup>  &hellip;. 2<sup>11</sup>， 需提供11种状态即可到2048</p>
]]></content>
  </entry>
  
</feed>
