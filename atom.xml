<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Mindon.IDEA]]></title>
  <link href="http://mindon.github.com/atom.xml" rel="self"/>
  <link href="http://mindon.github.com/"/>
  <updated>2012-09-15T15:14:37+08:00</updated>
  <id>http://mindon.github.com/</id>
  <author>
    <name><![CDATA[Mindon Feng]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Quantum Locking]]></title>
    <link href="http://mindon.github.com/blog/2012/09/09/quantum-levitation-n-quantum-locking/"/>
    <updated>2012-09-09T22:26:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/09/09/quantum-levitation-n-quantum-locking</id>
    <content type="html"><![CDATA[<p>I watched this TED video last week. It&#8217;s amazing!</p>

<p>&#8220;How can a super-thin 3-inch disk levitate something 70,000 times its own weight? In a riveting demonstration, Boaz Almog shows how a phenomenon known as quantum locking allows a superconductor disk to float over a magnetic rail &#8211; completely frictionlessly and with zero energy loss. Experiment: Prof. Guy Deutscher, Mishael Azoulay, Boaz Almog, of the High Tc Superconductivity Group, School of Physics and Astronomy, Tel Aviv University.&#8221;</p>

<!--more-->




<object width="526" height="374"><param name="movie" value="http://video.ted.com/assets/player/swf/EmbedPlayer.swf"></param><param name="allowFullScreen" value="true" /><param name="allowScriptAccess" value="always"/><param name="wmode" value="transparent"></param><param name="bgColor" value="#ffffff"></param><param name="flashvars" value="vu=http://video.ted.com/talk/stream/2012G/Blank/BoazAlmog_2012G-320k.mp4&su=http://images.ted.com/images/ted/tedindex/embed-posters/BoazAlmog_2012G-embed.jpg&vw=512&vh=288&ap=0&ti=1495&lang=zh-cn&introDuration=15330&adDuration=4000&postAdDuration=830&adKeys=talk=boaz_almog_levitates_a_superconductor;year=2012;theme=presentation_innovation;theme=what_s_next_in_tech;event=TEDGlobal+2012;tag=demo;tag=innovation;tag=magic;tag=physics;tag=science;tag=technology;&preAdTag=tconf.ted/embed;tile=1;sz=512x288;" /><embed src="http://video.ted.com/assets/player/swf/EmbedPlayer.swf" pluginspace="http://www.macromedia.com/go/getflashplayer" type="application/x-shockwave-flash" wmode="transparent" bgColor="#ffffff" width="526" height="374" allowFullScreen="true" allowScriptAccess="always" flashvars="vu=http://video.ted.com/talk/stream/2012G/Blank/BoazAlmog_2012G-320k.mp4&su=http://images.ted.com/images/ted/tedindex/embed-posters/BoazAlmog_2012G-embed.jpg&vw=512&vh=288&ap=0&ti=1495&lang=en&introDuration=15330&adDuration=4000&postAdDuration=830&adKeys=talk=boaz_almog_levitates_a_superconductor;year=2012;theme=presentation_innovation;theme=what_s_next_in_tech;event=TEDGlobal+2012;tag=demo;tag=innovation;tag=magic;tag=physics;tag=science;tag=technology;&preAdTag=tconf.ted/embed;tile=1;sz=512x288;"></embed></object>


<blockquote><p>The phenomenon you saw here for a brief moment is called quantum levitation and quantum locking. And the object that was levitating here is called a superconductor. Superconductivity is a quantum state of matter, and it occurs only below a certain critical temperature.</p>

<p>你们在这里看到的这个短暂的现象是 被称为量子悬浮和量子锁定。 这个悬浮在这里的物体 被称为超导体。 超导是物质的一种量子状态， 只在特定的关键温度下发生。</p>

<p>Now, it&#8217;s quite an old phenomenon; it was discovered 100 years ago. However, only recently, due to several technological advancements, we are now able to demonstrate to you quantum levitation and quantum locking.</p>

<p>现在，这是一个比较老的现象了； 100年前被发现。 然而，就在最近， 由于若干科技进步， 我们现在能够向你们展示 量子悬浮和量子锁定。</p>

<p>So, a superconductor is defined by two properties. The first is zero electrical resistance, and the second is the expulsion of a magnetic field from the interior of the superconductor. That sounds complicated, right? But what is electrical resistance? So, electricity is the flow of electrons inside a material. And these electrons, while flowing, they collide with the atoms, and in these collisions they lose a certain amount of energy. And they dissipate this energy in the form of heat, and you know that effect. However, inside a superconductor there are no collisions, so there is no energy dissipation.</p>

<p>那么，超导体具备两种特性。 第一种特性是零电阻， 第二种特性是从超导体的内部驱逐磁场。 这听起来有点复杂，是吗？ 但什么是电阻呢？ 那么，电就是物体内部的电子流。 这些电子，当他们流动时， 它们与原子相撞，在碰撞过程中 它们损失一定的能量。 这种能量以热的形式消耗， 你们知道这种效果的。 然而，在超导体的内部，不存在这种碰撞， 因此也就没有能量消耗。</p></blockquote>

<p>超导体让电流无阻，却完全隔离磁场，这个挺有意思的。有没有让磁场无阻，电流完全隔离的东西呢？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[天才在左，疯子在右]]></title>
    <link href="http://mindon.github.com/blog/2012/09/09/genius-on-the-left-madness-on-the-right/"/>
    <updated>2012-09-09T21:31:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/09/09/genius-on-the-left-madness-on-the-right</id>
    <content type="html"><![CDATA[<p>《天才在做，疯子在右》这书名其实挺早之前就知道了，一直没有动力去读。最近看公司内的一个分享，里面提到了“你也是蘑菇”的案例。这引起了我的兴趣，于是周五晚上就在Kindle上读了一下，没想到一发不可收拾，周六就把整本书看完了。当然，最吸引我的是那些不同的世界观的案例，可以说跟TED很类似，能激发思考。</p>

<p>看到“生化奴隶”这一篇的时候，想起来前段时间在“译言网”上看到过一篇文章“<a href="http://select.yeeyan.org/view/279625/311822">微生物造就人类</a>”——人类不只是人类，同样也是由大量微生物组成的个体。</p>

<p><img src="http://cdn.yeeyan.org/upload/image/2012/08/19030420_17652.jpg" alt="" /></p>

<p>世界观特别的精神病人是很有意思的，即使他们描述的是事实，所谓“正常人”也是不能接受的，因为人们已经把他们放到了“精神病人”这个类别，认同他们相当于把自己也归于此类——这往往是大家所避讳的。</p>

<p>其中有些案例，如果当事人把想法写成PPT，到TED分享，那也是走在科学前沿的IDEA :-)</p>

<p>《天才在做，疯子在右》，作者 高铭，网易读书上链接：<a href="http://data.book.163.com/book/home/009200190005/0000JYfK.html">阅读</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to make a Tai-Chi]]></title>
    <link href="http://mindon.github.com/blog/2012/09/09/how-to-make-a-tai-chi/"/>
    <updated>2012-09-09T20:41:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/09/09/how-to-make-a-tai-chi</id>
    <content type="html"><![CDATA[<p>Tai-Chi diagram is a very important symbol in Chinese culture.</p>

<p>It merges &#8220;阴yin&#8221; and &#8220;阳yang&#8221; into one, the balance of two different sides of one.</p>

<p>Two large round component &amp; two half size round component: combining into one, that&#8217;s how comes the tai-chi.</p>

<p><img src="http://mindon.github.com/images/blog/tai-chi.png" alt="" /></p>

<!--more-->


<p>Here&#8217;s how to make a two sides tai-chi with paper. ( Two large round component, four half size component )</p>

<p><img src="http://mindon.github.com/images/blog/tai-chi.jpg" alt="" /></p>

<p>Same componets with different size &amp; different status make up a perfect tai-chi. Also the real complex world.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nexus 7 Issues]]></title>
    <link href="http://mindon.github.com/blog/2012/09/05/nexus-7-from-google-play/"/>
    <updated>2012-09-05T22:56:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/09/05/nexus-7-from-google-play</id>
    <content type="html"><![CDATA[<p>I bought <strong>Nexus 7</strong> from a online shop on <strong>taobao</strong> at July. It was got from Google Play from US.</p>

<p>An android device with hardware: NFC, GPS, Camera, Motion detect, &#8230; latest app from Google, that is what I want.</p>

<p>I got my Nexus 7 before August. I love it before and when I touch it. It looks great, runs fast &amp; smooth.</p>

<p><img src="http://mindon.github.com/images/blog/nexus/n7-love.png" alt="" /></p>

<p>And I still love it now, even it will be ill sometimes.</p>

<ul>
<li>Screen Touch Problem</li>
</ul>


<p>It doesn&#8217;t work well sometimes, and could be fixed by switching it to sleep mode and wake it back immediately.</p>

<p><img src="http://mindon.github.com/images/blog/nexus/n7-touch.png" alt="" /></p>

<ul>
<li>Cannot see and run Google Play Books outside US.</li>
</ul>


<p>I did not activate the device with an US VPN, that made these Books &amp; Magazine disabled from Nexus 7. It make me very upset. But I don&#8217;t want to root it any way.</p>

<p><img src="http://mindon.github.com/images/blog/nexus/n7-app.png" alt="" /></p>

<!--more-->


<ul>
<li>Flicker when wifi signal is poor</li>
</ul>


<p>At first, I thought it was from the auto-adjust of the lightness. But Google result tells me, the poor wifi makes it happen.</p>

<p><img src="http://mindon.github.com/images/blog/nexus/n7-flicker.gif" alt="" /></p>

<ul>
<li>Zero power status</li>
</ul>


<p>When its power is zero, the charging does not help the device start. Maybe there&#8217;s some problem to charge the battery, 10 minutes charge does not help. Nexus 7 cannot start sometimes in low power.</p>

<p><img src="http://mindon.github.com/images/blog/nexus/n7-power.png" alt="" /></p>

<ul>
<li>Fail to start when poor power, even charging</li>
</ul>


<p>Maybe battery charge is failed, After the Nexus 7 ( It&#8217;s hard to make it sometimes ), the screen turns into scratch lines &#8230;</p>

<p><img src="http://mindon.github.com/images/blog/nexus/n7-dash.png" alt="" /></p>

<ul>
<li>Slow battery charge</li>
</ul>


<p>Today, problem 4. and 5. found. and another issue is 8 hours charging only reaches to 65%&#8230; :-(</p>

<p><img src="http://mindon.github.com/images/blog/nexus/n7-charge.png" alt="" /></p>

<ul>
<li>It seems the screen working fine when the battery with 10%+ power.</li>
</ul>


<p>Even with these problems, It&#8217;s still an amazing android device for me.</p>

<p>Maybe WP8 tablet could be better, or Kindle Fire 2 may be better. But the Nexus 7 is still a device worth to own.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS3 Tai-Chi Diagram]]></title>
    <link href="http://mindon.github.com/blog/2012/08/28/css3-tai-chi/"/>
    <updated>2012-08-28T21:25:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/08/28/css3-tai-chi</id>
    <content type="html"><![CDATA[<p>If you cannot see a Tai-Chi diagram, then your browser is old enough. Maybe you should update it to a morden one: IE9+, Safari, Chrome or Firefox, or Opera.</p>

<p>If you could see a rolling Tai-Chi, then your browser is ready for CSS3, that will be great.</p>

<!--more-->


<p>Here&#8217;s the Chinese Tai-Chi diagram:</p>

<div>
<link rel="stylesheet" type="text/css" href="http://mindon.github.com/blog/styles/tai-chi.css" >
<div class="yinyang">
  <div class="yin"><div class="yinc"><div class="yind"></div></div></div>
  <div class="yang"><div class="yangc"><div class="yangd"></div></div></div>
</div>
<!--[if lt IE 9]>
It&#8217;s a pitty, you are using a browser out of the date.
<![endif]-->
</div>


<p>Wood-Fire-Metal-Water-Earth! The 5 fundamental elements running circle balance in a human body.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[20年后的再次相聚]]></title>
    <link href="http://mindon.github.com/blog/2012/08/28/again-we-met-after-20-years/"/>
    <updated>2012-08-28T01:32:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/08/28/again-we-met-after-20-years</id>
    <content type="html"><![CDATA[<p>20年了！这次高中同学相识20周年聚会，回想起来，也是个相当大的项目。从几个热心活跃同学最初冒出的想法，到后来联系天南海北的旧日同学，以及班长的高度重视以及精心组织，而且逐个同学、老师通知并确认。</p>

<p>饮食、住宿以及期间活动的安排，都是异常劳心费力的事情。除了几个无法联系以及特殊情况的同学之外，四十余位旧日同窗分别在周六（8/18）汇聚岑溪，有从湛江冒着13级台风连夜赶火车，凌晨3点多到达的同学，也有18日一大早从广州开车回来的同学…</p>

<!--more-->


<p>（我是17日搭了老高的顺风车，因为我还没学车，全程都是老高一人开车，真是辛苦了，近6个小时的车程。19日的回程则搭了老蔡到广州的车… 一个人开车这么远的路程还是相当辛苦的。）</p>

<p>回到岑溪已经是夜里十点，筹委会的同学们准备好了美味宵夜迎接，家乡的味道还是很亲切的。相聚的热情更是让赶回来的同学们忘却了路途的奔波和困累。</p>

<p>18日早晨开始，一直到中午，同学们陆续赶来签到、拍照、领纪念品。十多年未见的同学很多都是熟悉的面容，却想不起名字。即便如此，在短短的一个小时之内，大家又如当初在学校里一样的亲切和熟悉了。20年的时光在各自的头上、脸上以及肚子上都留下了不同的痕迹，不变的是我们的同学情谊，那颗青春依旧、充满热情的心。</p>

<p>20年，同学们又再次相聚了，一起欢颜笑语，抛开生活的压力，现实的种种，重返了校园——在那早已翻天覆地变化的校园里找寻往日的记忆。回味那些无忧无虑，点点滴滴的高中生活。</p>

<p>聚会安排了1天半时间，全程有拍照、录像，各种水果（龙眼最多:D），相互留言签名，晚会，唱K，第2天上午的早餐，篮球排球活动…</p>

<p>估计好多同学跟我一样，很久没有打球了，在球场里奔跑、跳跃、投篮、扣球——大汗淋漓也是非常痛快的事情。</p>

<p>20年的再次相聚，其实更多的内容是聊天，聊各自的生活、工作、事业。其实每个同学这期间都在为自己的精彩而拼搏奋斗，谱写着自己独特的人生。有些收获了美满幸福的生活，有的则事业有成，有的升官进爵…… 看到大家十多年的付出的艰辛和血汗，换来今日的成绩，也是同学之间深感自豪和骄傲的事情。</p>

<p>大家之间的相互激励、启发和合作互助，会是聚会更大的一个收获。</p>

<p>感谢班长老盘，还有筹委会的同学们，给我们组织了这么精彩难忘的岑溪中学922班20周年聚会。祝愿大家都健康、幸福、快乐！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TED: Danny Hillis]]></title>
    <link href="http://mindon.github.com/blog/2012/08/15/ted-danny-hillis/"/>
    <updated>2012-08-15T23:10:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/08/15/ted-danny-hillis</id>
    <content type="html"><![CDATA[<p><img src="http://mindon.github.com/images/blog/danny-hillis.jpg" alt="" /></p>

<p><strong>Hillis</strong> is an inventor, scientist, author and engineer. While completing his doctorate at MIT, he pioneered the concept of parallel computers that is now the basis for most supercomputers, as well as the RAID disk array technology used to store large databases. He holds over 100 U.S. patents, covering parallel computers, disk arrays, forgery prevention methods, and various electronic and mechanical devices. He is also the designer of a 10,000-year mechanical clock.</p>

<p>知道科学家Danny Hillis存在是因为最近看TED入迷了，看到了他1994年的“<a href="http://www.ted.com/talks/danny_hillis_back_to_the_future_of_1994.html">Back to the future</a>”，对技术发展和生命进化关联之间的见解让我着迷。于是，Google搜索了一下Danny Hillis，发现他在2011年有另外一个TED分享：“<a href="http://www.ted.com/talks/danny_hillis_two_frontiers_of_cancer_treatment.html">Understanding cancer through proteomics</a>” （用蛋白质组学解读癌症）是一个医学前沿的研究课题与技术应用，对于精确诊断有革命性意义，为的是解决目前医疗中一个大难题：诊断问题。</p>

<!--more-->




<object width="526" height="374"><param name="movie" value="http://video.ted.com/assets/player/swf/EmbedPlayer.swf"></param><param name="allowFullScreen" value="true" /><param name="allowScriptAccess" value="always"/><param name="wmode" value="transparent"></param><param name="bgColor" value="#ffffff"></param><param name="flashvars" value="vu=http://video.ted.com/talk/stream/2010P/Blank/DannyHillis_2010P-320k.mp4&su=http://images.ted.com/images/ted/tedindex/embed-posters/DannyHillis-2010P.embed_thumbnail.jpg&vw=512&vh=288&ap=0&ti=1082&lang=zh-cn&introDuration=15330&adDuration=4000&postAdDuration=830&adKeys=talk=danny_hillis_two_frontiers_of_cancer_treatment;year=2010;theme=medicine_without_borders;theme=tales_of_invention;event=TEDMED+2010;&preAdTag=tconf.ted/embed;tile=1;sz=512x288;" /><embed src="http://video.ted.com/assets/player/swf/EmbedPlayer.swf" pluginspace="http://www.macromedia.com/go/getflashplayer" type="application/x-shockwave-flash" wmode="transparent" bgColor="#ffffff" width="526" height="374" allowFullScreen="true" allowScriptAccess="always" flashvars="vu=http://video.ted.com/talk/stream/2010P/Blank/DannyHillis_2010P-320k.mp4&su=http://images.ted.com/images/ted/tedindex/embed-posters/DannyHillis-2010P.embed_thumbnail.jpg&vw=512&vh=288&ap=0&ti=1082&lang=en&introDuration=15330&adDuration=4000&postAdDuration=830&adKeys=talk=danny_hillis_two_frontiers_of_cancer_treatment;year=2010;theme=medicine_without_borders;theme=tales_of_invention;event=TEDMED+2010;&preAdTag=tconf.ted/embed;tile=1;sz=512x288;"></embed></object>


<p>丹尼 赫力斯讲述癌症医学的前沿：蛋白质组学，研究身体内的蛋白质。赫力斯向我们解释：基因组学显示了我们身体里的“佐料”， 而蛋白质组学向我们显示了用这些“佐料”有什么效果。理解我们身体里时时变化的蛋白质水平或许能帮我们了解癌症是怎么发生的。</p>

<p>后来，了解到Hillis是Richard Feynman（费曼，1918年5月11日－1988年2月15日）的朋友，费曼是个科学界的传奇人物，1965年诺贝尔物理奖得主。读《<a href="http://book.douban.com/subject/1037602/">别闹了，费曼先生</a>》能了解到这个神奇的科学奇才，Feynman 1988年因癌症去世。</p>

<p>而Danny Hillis的公司之一 Applied Proteomics, Inc 也是非常有意思的科技与医疗研究前沿的公司 http://www.appliedproteomics.com/news/。</p>

<p>Danny Hillis的技术及见解和中医的理论和经络理论之间的类似和关联也是挺有意思的一个课题，非常值得持续关注。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Amazing Pollen]]></title>
    <link href="http://mindon.github.com/blog/2012/08/15/amazing-pollen/"/>
    <updated>2012-08-15T22:55:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/08/15/amazing-pollen</id>
    <content type="html"><![CDATA[<p>SEM: Scanning Electron Microscope 扫描电子显微镜下的花粉。</p>

<p>花粉的显微照片可以看到大自然精密得令人惊叹的结构。</p>

<p><img src="http://mindon.github.com/images/blog/pollen/acacia.jpg" alt="" /></p>

<p><img src="http://mindon.github.com/images/blog/pollen/thaliana.jpg" alt="" /></p>

<p><img src="http://mindon.github.com/images/blog/pollen/nordic-red-carnation.jpg" alt="" /></p>

<!--more-->


<p><img src="http://mindon.github.com/images/blog/pollen/ap-thatched.jpg" alt="" /></p>

<p><img src="http://mindon.github.com/images/blog/pollen/dandelion.jpg" alt="" /></p>

<p><img src="http://mindon.github.com/images/blog/pollen/fossil.jpg" alt="" /></p>

<p><img src="http://mindon.github.com/images/blog/pollen/grains.jpg" alt="" /></p>

<p><img src="http://mindon.github.com/images/blog/pollen/hellebore.jpg" alt="" /></p>

<p><img src="http://mindon.github.com/images/blog/pollen/lilium.jpg" alt="" /></p>

<p><img src="http://mindon.github.com/images/blog/pollen/marrow.jpg" alt="" /></p>

<p><img src="http://mindon.github.com/images/blog/pollen/peony.jpg" alt="" /></p>

<p><img src="http://mindon.github.com/images/blog/pollen/pine.jpg" alt="" /></p>

<p><img src="http://mindon.github.com/images/blog/pollen/pine2.jpg" alt="" /></p>

<p><img src="http://mindon.github.com/images/blog/pollen/7.jpg" alt="" /></p>

<p><img src="http://mindon.github.com/images/blog/pollen/8.jpg" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web Lab]]></title>
    <link href="http://mindon.github.com/blog/2012/08/04/web-lab/"/>
    <updated>2012-08-04T17:28:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/08/04/web-lab</id>
    <content type="html"><![CDATA[<p>&#8220;Web Lab. A series of interactive Chrome Experiments made by Google. See the magic of the web brought to life. Open to the world online. Live from the Science Museum, London. &#8221;</p>

<p>这是个很好玩的实验室。Google建的一个位于伦敦的科学馆。科学馆里配置了一些设备：如乐器和沙绘机器人（Sketchbots）。您可以通过他们的网站来编曲演奏乐器，跟世界上其他地方的人合奏。也可以通过摄像头拍照，让科学馆的机器人绘制您的头像——所有这一切，您都可以通过现场摄像头看到真实科学馆的设备看到设备的现场实时操作。很不可思议吧？您在体验一家位于伦敦的科学馆。</p>

<p>体验一下？<a href="http://www.chromeweblab.com/">Web Lab</a> :-) You need a <a href="https://www.google.com/intl/en/chrome/browser/">Chrome Browser</a>(<a href="https://www.google.com/intl/zh-CN/chrome/browser/">中文版</a>), I think.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[China Hospital Medical - The Pressure Maker]]></title>
    <link href="http://mindon.github.com/blog/2012/08/04/china-hospital-medical-the-pressure-maker/"/>
    <updated>2012-08-04T16:41:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/08/04/china-hospital-medical-the-pressure-maker</id>
    <content type="html"><![CDATA[<p>亲身体验和周边朋友的经历，似乎都在说明这么一个事情：医院已然成为了压力制造者。——这里我说的压力大多是精神上的压力。而对一些人来说更是经济上的压力。不知道何时开始，医疗机构开始采用了恐吓的方式来制造压力，达成治疗目的。这让人很容易就联想起了港片里专门帮人讨债的镜头。</p>

<p>本来，病患本身已经遭受身体及精神上的折磨，而医院为了让患者接受治疗——不管无效还是有效——而通过类似恐吓的方式来制造进一步的精神压力，这似乎不应该是作为治病救人应有的做法。</p>

<p>医疗，不应单单是从物理上消除病症，而且要从精神层面上缓解压力。</p>

<!--more-->


<p>2月份时候血糖很高（喝了大量果汁饮料），住了一个多星期的院，血糖有所控制，但在10左右，时高时低，对胰岛素很敏感——降得很快，打了一般都会在半夜血糖偏低。住院期间，就折腾各种检查了，结果一切正常。然而，咳嗽都没治好；糖尿病是什么型的也没有结论，只是怀疑是1型——什么原因也没弄清楚。后来去复诊，也是一样的模棱两可，后来又说是2型——因为没打胰岛素也控制得很好。后来没吃药，也一切正常；米饭、粥、汤都正常。偶尔测得高点的时候，吃了半片都1/4片0.5克的二甲双胍片。后来更奇怪的事情，到社区医疗中心开药的时候（注：属南山医院支持区的），竟然说我没有任何糖尿病记录，需要重新登记——难道之前的记录都是摆乌龙？之前在社区医疗中心记录过一次，而且，难道住院了还没有任何记录？不可思议！</p>

<p>各种奇怪的事情只要稍作思考，就会让你对医疗过程产生一大箩筐的疑问。真的，绝对经不起问3个为什么的，只要你敢问。</p>

<p>现在，我还是会隔段时间测一下血糖，虽然有所怀疑，不过没有别的选择——至少目前还没有更好的处理方式。（提示：我在喝党参，淮山煲的骨头汤之后，测的血糖值都非常理想。个人感觉党参对自己的血糖改善很有效果。）</p>

<p>对于血糖值，我建议大家不要对2以内的波动值过于敏感，以免徒增精神压力。</p>

<p>我用的血糖仪（罗氏 PerformaaNano）使用说明书77页上有这么一句：（AST&#8211;采血检测）</p>

<p>“如果你考虑推荐您的患者进行AST，您需要理解<strong>指尖/手掌和替代点</strong>的血糖检测结果间<strong>有可能存在很大的不同</strong>。”</p>

<p>不知道大家对“<strong>有可能存在很大的不同</strong>”怎么理解，不过，实际试验的结果是：不同的手指，甚至同一滴血，结果可能差异范围是：0 ～ 1.6。没错，1.6可能是空腹和饭后2小时的标准值差异了。这个检测结果意义只在于判断离健康标准比较大的血糖值，如10+，或4-。更精细的判断大可不必过分敏感。</p>

<p><strong>亲身感受</strong>：书店里的降血糖食物相关的书不靠谱，医生说的不能吃什么也不靠谱，适量有氧运动还不错。喝对汤水也能制造神奇效果。按时吃饭、休息好、减轻精神压力更重要。蔗糖（白砂糖）类的东西，还是不要吃，很多患者都是喝冰糖/白糖水或者大量喝果汁饮料而收获高血糖待遇的。</p>

<p>推荐：辅助降血糖穴位</p>

<p><embed src="http://player.youku.com/player.php/sid/XMjg5NDM1NzA0/v.swf" allowFullScreen="true" quality="high" width="480" height="400" align="middle" allowScriptAccess="always" type="application/x-shockwave-flash"></embed></p>

<p>推荐：辅助降血压穴位</p>

<p><embed src="http://player.youku.com/player.php/sid/XMjg5NDM1Mjgw/v.swf" allowFullScreen="true" quality="high" width="480" height="400" align="middle" allowScriptAccess="always" type="application/x-shockwave-flash"></embed></p>

<p>推荐阅读：<a href="http://jicheng.tw/jcw/book/%E5%9C%93%E9%81%8B%E5%8B%95%E7%9A%84%E5%8F%A4%E4%B8%AD%E9%86%AB%E5%AD%B8/index">《圓運動的古中醫學》</a> &#8211; 彭子益 (1947年丁亥版為底本)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[B-Z Reaction]]></title>
    <link href="http://mindon.github.com/blog/2012/08/04/b-z-reaction/"/>
    <updated>2012-08-04T10:40:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/08/04/b-z-reaction</id>
    <content type="html"><![CDATA[<p>　　1921年，伯克利加州大学的布雷(Bray，William)在用碘作催化剂使过氧化氢分解为水和氧气时，第一次发现了振荡式的化学反应。但依据经典热力学第二定律，认为任何化学反应只能走向退化的平衡态，因而当时的化学家否定了这个发现。</p>

<p>　　1952年，英国数学家图灵通过数学计算的方法，在理论上预见了化学振荡这类现象的可能性。1958年，俄国化学家别洛索夫(Belousov) 和扎鲍廷斯基(Zhabotinskii)首次报道了以金属铈作催化剂，柠檬酸在酸性条件下被溴酸钾氧化时可呈现化学振荡现象：溶液在无色和淡黄色两种状态间进行着规则的周期振荡。该反应即被称为Belousov- Zhabotinskii反应，简称B-Z反应。</p>

<p><img src="http://mindon.github.com/images/blog/250px-The_Belousov-Zhabotinsky_Reaction.gif" alt="" /></p>

<p>Computer simulation of the Belousov–Zhabotinsky reaction occurring in a Petri dish.</p>

<!--more-->


<p>　　在1959年，B.P.Belousov首先观察到并随后为A.M.Zhabotinsky深入研究，丙二酸在溶液有硫酸铈的酸性溶液中被溴酸钾氧化的反应，随后人们发现了一大批可呈现化学振荡反应现象的含溴酸盐的反应系统。人们称之为B-Z反应。</p>

<p>　　1969年，现代动力学奠基人普里戈金提出耗散结构理论，人们才清楚的认识到振荡反应产生的原因：当体系远离平衡态时，即在非平衡非线性区，无序的均匀态并不总是稳定的。在特定的动力学条件下，无序的均匀定态可以失去稳定性，产生时空有序的状态，这种状态称之为耗散结构。例如浓度随时间有序的变化(化学振荡)，浓度随时间和空间有序的变化(化学波)等。耗散结构理论的建立为振荡反应提供了理论基础，从此，振荡反应赢得了重视，它的研究得到了迅速发展。</p>

<p>　　化学振荡是一类机理非常复杂的化学过程，Field、Koros、Noyes三位科学家经过四年的努力，于1972年提出俄勒冈（FKN）模型，用来解释并描述B-Z振荡反应的很多性质。该模型包括20个基元反应步骤，其中三个有关的变量通过三个非线性微分方程组成的方程组联系起来，该模型如此复杂以至20世纪的数学尚不能一般地解出这类问题，只能引入各种近似方法。</p>

<p>The discovery of the phenomenon is credited to Boris Belousov. He noted, some time in the 1950s (various sources date ranges from 1951 to 1958), that in a mix of potassium bromate, cerium(IV) sulfate, propanedioic acid and citric acid in dilute sulfuric acid, the ratio of concentration of the cerium(IV) and cerium(III) ions oscillated, causing the colour of the solution to oscillate between a yellow solution and a colorless solution. This is due to the cerium(IV) ions being reduced by propanedioic acid to cerium(III) ions, which are then oxidized back to cerium(IV) ions by bromate(V) ions.</p>

<p>Belousov made two attempts to publish his finding, but was rejected on the grounds that he could not explain his results to the satisfaction of the editors of the journals to which he submitted his results. His work was finally published in a less respectable, non-reviewed journal.</p>

<p>Later, in 1961, a graduate student named Anatol Zhabotinsky rediscovered this reaction sequence; however, the results of these men&#8217;s work were still not widely disseminated, and were not known in the West until a conference in Prague in 1968.</p>

<p>http://en.wikipedia.org/wiki/Belousov%E2%80%93Zhabotinsky_reaction</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bed Early, Better Efficiency]]></title>
    <link href="http://mindon.github.com/blog/2012/08/03/bed-early-better-efficiency/"/>
    <updated>2012-08-03T06:12:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/08/03/bed-early-better-efficiency</id>
    <content type="html"><![CDATA[<p>早睡早起，能不能做到，是一个习惯问题。如果您经常睡得很晚，那么真的要好好思考这个坏习惯会给您身体状况造成的伤害了。</p>

<p>健康问题绝大部分来自不良的起居饮食习惯，若是不愿意去改变习惯，只想靠药物维持一种数据上看起来比较健康的状态，后果如何，都是可以想象得到的。</p>

<p>大脑在活动一整天之后，亟需切换到另外一个极端重要任务的执行——身体机能的修复和废物清理。这就是“困”这个信号的重要意义。</p>

<p><img src="http://mindon.github.com/images/blog/bedup.png" alt="" /></p>

<p>您觉得，处于活动状态一整天之后的大脑有效率呢？还是休息了一个晚上之后早上醒过来的脑子更有效率？</p>

<!--more-->


<p><img src="http://mindon.github.com/images/blog/life-history.jpg" alt="" /></p>

<p>和生物进化亿年级别，人类进化百万年级别的时间相比，您习惯形成的十年级别，哪个对健康的生命更有决定权？</p>

<p>为了您的健康，宝贵的时间更有效率，还是养成早睡早起的习惯吧（注：冬天就不要起太早了）。—— 也不能起太早，太阳升起之前寒气重。</p>

<p><strong><em>（警醒自己，要调整好作息时间！）</em></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一棵植物的再生能力]]></title>
    <link href="http://mindon.github.com/blog/2012/08/02/regeneration-of-a-plant/"/>
    <updated>2012-08-02T08:02:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/08/02/regeneration-of-a-plant</id>
    <content type="html"><![CDATA[<p>说到再生，可能大家首先会想到的是壁虎的尾巴，或是蝾螈这类爬行动物。关于这个话题，曾看过TED的一个演讲：</p>

<p><a href="http://www.ted.com/talks/lang/zh-cn/alan_russell_on_regenerating_our_bodies.html">Alan Russell: The potential of regenerative medicine - 再生医学</a></p>

<p>再生对于人类来说是很神奇的现象。对于植物，这种能力是司空见惯的。</p>

<p>上个星期台风“韦森特”来袭，造成深圳市11.5万棵树受损。我们家阳台长了好几个星期的一株淮山也受到了重创：这株爬了一米都高的植物，大部分叶子都被那个晚上的狂风撕掉了。开始我有点担心，失去了那么大部分叶子，这株细细的藤类植物供水及光合作用一定会跟不上，可能会难以维持下去了。</p>

<p>然而，过了若干天之后，就在十余个叶子被刮掉的地方，又出现了嫩芽，并慢慢长成小小的新叶子…</p>

<p>这也是个神奇的事情：它是怎么察觉叶子没了？又怎么启动的修复机制？</p>

<!--more-->


<p><img src="http://mindon.github.com/images/blog/regenerate.png" alt="" /></p>

<p>植物从种子或者块状根的一部分，或是一根折下的枝杈，就能长成一株完整的植株，是一件不可思议的事情。结合泥土或水中的养分，一点点阳光和空气，就能制造出那么精致完美的叶子、花和种子，实在是令人叹为观止的制造技术。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Auto-Resize Images in Web Pages]]></title>
    <link href="http://mindon.github.com/blog/2012/07/21/simple-auto-resize-images-in-web-pages/"/>
    <updated>2012-07-21T10:34:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/07/21/simple-auto-resize-images-in-web-pages</id>
    <content type="html"><![CDATA[<p>Nowdays, Mobile web needs to handle different mobile devices with different screen resolutions. Most effective way may be providing different sizes images for different screens in server.</p>

<p>Use this meta in your HTML header could reisze the web page to the device&#8217;s resolution.</p>

<pre><code>&lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;
</code></pre>

<p>How can we make the images auto-resize in web pages without a server or any javascript?</p>

<p>Here&#8217;s the simple HTML code:</p>

<pre><code>&lt;style type="text/css"&gt;img {display:block}&lt;/style&gt;
&lt;table width="100%" style="table-layout:fixed"&gt;
  &lt;tr&gt;
  &lt;td width="50%"&gt;&lt;a style="width:100%" href="#"&gt;&lt;img width="100%" border="0"
   src="http://mindon.github.com/images/mindon.png" /&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;td width="50%"&gt;&lt;a style="width:100%" href="#"&gt;&lt;img width="100%" border="0"
   src="http://mindon.github.com/images/mindon.png" /&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
</code></pre>

<p>The CSS help to remove paddings around the images, and the <strong>table-layout:fixed</strong> help to make a smaller width of image than its origin width.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Most Terrible Thing]]></title>
    <link href="http://mindon.github.com/blog/2012/07/21/the-most-terrible-thing/"/>
    <updated>2012-07-21T09:32:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/07/21/the-most-terrible-thing</id>
    <content type="html"><![CDATA[<h2>最可怕的是什么？</h2>

<p>其实，知道是可怕的东西并不是最可怕的东西。让你以为是最安全，其实杀伤力最大的东西才是最可怕的。</p>

<p>现实里，比如一个人总看起来很凶，那么这个人并不可怕，因为你都能看到真实的情况。最可怕的人是表面上非常友善，内心里却是黑暗和扭曲的。</p>

<p>有一个词能非常清楚地对最可怕的东西做一个总结，那就是——<strong>幻象</strong>。</p>

<p>当你在高山峻岭间驾车时，看到了一条其实并不存在的路，……</p>

<p>当你站在楼顶边缘，却看到眼前是一片广阔草原，……</p>

<!--more-->


<p>美剧X-files（X档案）中有若干场景是主角持枪，看到眼前的异形怪物（而真实情况——那是自己最好的搭档），……</p>

<p>当在你眼里，老虎变成了小猫，……</p>

<p>当你在沙漠中追逐一个海市蜃楼的湖的时候，……</p>

<p>当你梦游把别人脑袋当西瓜的时候，……</p>

<p><strong>幻象</strong> 大多时候是极其危险的。于是，人类把幻象类的疾病称之为人格分裂，精神病……</p>

<p>有一种精神不正常的场景很常见：就是一个人在大街上自言自语。而今移动生活的时代，这种场景开始越来越多地出现在精神正常的人们身上，因为他们一边走路一边讲电话。—— 试想，如果这个人用蓝牙耳机，或科技再先进一点，使用的移动电话是植入人体里的，……</p>

<p>或许，那些自言自语的人们只不过在跟他们可以通话的对象说话，这些说话对象可能是幻象，或者想象力更丰富一点——是另外一个世界的，甚至是可以通过脑电波交流的外星人。（医学对精神失常的判别是绝对有严重问题的，正常人放到精神病院也会成为精神病，这个事情不用多做探讨——毕竟人类能给一切判断找到“非常合理”的解释。）</p>

<p>总之，<strong>幻象</strong> —— 是能令任何人想起来都从内心深处感觉到恐惧的东西，你还能想到比这个更可怕的吗？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solve NodeJS 0.8 Build Problem]]></title>
    <link href="http://mindon.github.com/blog/2012/07/20/solve-nodejs-0.8-build-problem/"/>
    <updated>2012-07-20T22:04:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/07/20/solve-nodejs-0.8-build-problem</id>
    <content type="html"><![CDATA[<p>NodeJS before 0.8 is very easy to make &amp; install, which only needs OpenSSL.</p>

<p>But when I tried to update my NodeJS to version 0.8+, problems keep coming&#8230;</p>

<p>Here&#8217;s a few pre-conditions for a successful make of NodeJS v0.8+:</p>

<ol>
<li><p>GNU make 3.8.1+</p></li>
<li><p>Python 2.6 or 2.7</p></li>
<li><p>setenv FLOCK or export FLOCK</p></li>
</ol>


<p>setenv LINK g++ or export LINK=g++</p>

<p>Do remember check issues above when you meet problems building new version of NodeJS.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lost in the Tech Way]]></title>
    <link href="http://mindon.github.com/blog/2012/06/14/lost-in-the-tech-way/"/>
    <updated>2012-06-14T22:40:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/06/14/lost-in-the-tech-way</id>
    <content type="html"><![CDATA[<p>昨天察觉到的一件事情，在技术开发里可能也是比较容易出现的问题——技术迷失，特此分享和作为自我的警醒。</p>

<p>目标，使用 NodeJS 的 soap 模块，这个模块需要 node-expat 支持。在 windows 下这个模块是比较令人头疼的，虽然周末把这个问题解决了。但是我需要用的两个 WSDL API：登录验证和发邮件，却只调通了登录验证。另外一个用来发邮件提交的xml内容总是不如意，导致调用失败。node-soap模块这个github上的开源模块确实还存在太多问题，还不能处理稍微复杂一点的 WSDL。</p>

<p>因为时间原因，对soap也不太熟悉，想着——如果用这个模块不行，干脆改用 php 或 python，这个有现成的例子——于是，便尝试了一下php和python的调用。自然，API的调用很顺利，而且在 nodejs 调用 php 和 python 也不是什么麻烦的事情。可能大家觉得这样问题就解决了。</p>

<p>当然这个方案貌似没什么问题，能绕过node-soap模块的糟糕表现。可总不是自己想的那样直接用NodeJS处理。不过事情的转折出现在我找 python 例子的过程中：第一个例子是Google到的 suds 模块，用来处理 soap 的，表现不错，达到了效果。不过我却在内部知识分享平台找到了一个python封装好的现成py脚本，却没有用到任何额外模块！这让我感觉到了异常。</p>

<p>于是，大略看了一下另外部门同事分享的python脚本。突然觉醒——自己这些天都迷失在了技术中，而忘记了自己的目标是：成功调用并使用这两个 Web Service API。</p>

<p>这个python脚本是通过把需要提交的xml内容做成字符串模板形式，然后直接用 POST 提交，在HTTP头里指定 SOAPAction。这是针对具体 WSDL 调用的最直接的办法。我折腾了3天却没有想到，完全是脑子不会转弯，迷失在解决技术问题里了，而不是解决真正的问题。</p>

<p>醒了，自然不再需要node-soap，自然就不用管node-expat（虽然已经不是问题），于是按照这个python脚本的思路，花了1+个小时：写代码、封装调试、自测，把原来的登录验证改为新的调用方式。</p>

<p>问题解决了，可这个事情让不断在提“要牢记最终目标是什么”的我无法平静，这个警醒必须是深刻的 —— 切不能迷失在过程之中。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serve in Multi-Languages]]></title>
    <link href="http://mindon.github.com/blog/2012/06/12/serve-in-multi-languages/"/>
    <updated>2012-06-12T23:00:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/06/12/serve-in-multi-languages</id>
    <content type="html"><![CDATA[<p>When we want our product &#8211; a webpage for example &#8211; servered in multi-languages, what would we do?</p>

<p>Simple once working method is copy-n-translate:  Making a full copy of original language resource, translate and replace the texts. It&#8217;s a hard and dirty work.</p>

<p>Unless a few simple pages, no one will do it in this way nowdays.</p>

<p>We like to use text-id and text resources in our projects: desktop applications, J2EE projects, php websites &#8230;</p>

<p>But all of these are working in the same mode: Template + Text-Resources + Tool = Result</p>

<!--more-->


<p><img src="http://mindon.github.com/images/blog/multi-langs.png" alt="" /></p>

<p>(pro: proposition, con: contradition)</p>

<h2>Template</h2>

<ul>
<li><strong>Raw language text as text-resource-id</strong></li>
</ul>


<p>pro: Readable, directly simple, no extra work but replacement. One language file is template itself.</p>

<p>con: Dirty work, if same text appears, you have to manual replace them all.</p>

<h1>q/s#: Could we make maual-process auto?</h1>

<ul>
<li><strong>Named ID as text-resource-id</strong></li>
</ul>


<p>pro: Avoid repeat work on same phrases or sentences.</p>

<p>con: Named IDs&#8217; management, unintuitive templates using named IDs.</p>

<h1>q/s#: Could we auto-generate the named IDs and avoid unintuitive templates?</h1>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build Node-Expat Under Windows]]></title>
    <link href="http://mindon.github.com/blog/2012/06/11/build-node-expat-under-windows/"/>
    <updated>2012-06-11T09:22:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/06/11/build-node-expat-under-windows</id>
    <content type="html"><![CDATA[<h2>Preparea Developemtn Environment</h2>

<p>To build node-expat module under windows, you need the nodejs addon development env ready.</p>

<ul>
<li><p>Get and install VC++ 2010 Express from microsoft: 【<a href="http://www.microsoft.com/visualstudio/en-us/products/2010-editions/visual-cpp-express">Download VC++ 2010 Express</a>】</p></li>
<li><p>Download and unzip the NodeJS source code from Joyent&#8217;s github project: 【<a href="https://github.com/joyent/node">Download NodeJS source code</a>】</p></li>
<li><p>Get and install Python 2.7</p></li>
<li><p>Run <code>vcbuild.bat Release</code> under such as <strong>joyen-node/</strong> (where you unzip the source of nodejs) to build NodeJS.</p></li>
</ul>


<h2>Tools for building a NodeJS Module</h2>

<ul>
<li><p>Env variable set <strong>NODE_ROOT</strong>=<em>where-your-joyent-node-located</em></p></li>
<li><p>Check the <strong>tools/</strong> folder in the joyent-node/: file <strong>gyp_addon</strong>, and <strong>addon.gypi</strong> are needed.</p></li>
</ul>


<!--more-->


<p>if they are not exists, try get it from the latest tag from github of joyent-node ( Left of Files tab, find branch &#8211;> Tags ).</p>

<p>( You could use tools/<strong>gyp_node</strong> directly )</p>

<h2>Node-Expat Dependencis:</h2>

<ul>
<li><p>Install Expat under windows
<a href="http://sourceforge.net/projects/expat/files/latest/download">http://sourceforge.net/projects/expat/files/latest/download</a></p></li>
<li><p>Env variable set <strong>EXPAT_ROOT</strong>=<em>where-your-Expat-installed</em></p></li>
<li><p>Append the <strong>Bin/</strong> of Expat to <strong>PATH</strong> env.</p></li>
</ul>


<h2>Building Node-Expat:</h2>

<ul>
<li><p>Prepare <strong>build.gyp</strong> ( need to change D:/Expat to your expat root )</p>

<pre><code>{
  'variables' : {
    'target_arch': 'ia32'
  },
  'targets': [
    {
      'target_name': 'node-expat',
      'sources': [ 'node-expat.cc' ],
      'include_dirs': [
    'd:/Expat/Source/lib/'
      ],
      'libraries': [
    '-ld:/Expat/Bin/libexpat.lib'
      ]
    }
  ],
}
</code></pre></li>
<li><p>Run following commands</p></li>
</ul>


<p>to setup build version and msbuild tool env.</p>

<pre><code>@set Configuration=Release
"D:\Microsoft Visual Studio 10.0\VC\vcvarsall.bat"
</code></pre>

<p>then</p>

<pre><code>python d:\joyent-node\tools\gyp_addon build.gyp

msbuild build\build.sln
</code></pre>

<p>Now you should build the Node-Expat. But you may meet other problems:</p>

<h2>Testing</h2>

<p>if run node and require(&#8220;./build/Release/node-expat&#8221;) fail, it may be caused by following reasons:</p>

<p><strong>a)</strong>  check the node-expat.cc, and make sure there&#8217;s a <strong>NODE_MODULE_EXPORT</strong> or <strong>NODE_EXTERN</strong> before the <em>void init</em></p>

<p>something like this: <code>extern "C" NODE_EXTERN void init(Handle&lt;Object&gt; target)</code></p>

<p><strong>b)</strong> if &#8220;unable to load shared library&#8221; error, try copy <strong>libexpat.dll</strong> to the folder of <strong>node.exe</strong> located.</p>

<ul>
<li> <strong>node test.js</strong></li>
</ul>


<p>if when you run <code>node test.js</code> of expat, it may fail. Then you need following code to fix it.</p>

<pre><code>char *toCString(v8::Local&lt;v8::Value&gt; value, const char *fallback = "") {
    if (value-&gt;IsString()) {
    v8::String::Utf8Value string(value);
    char *str = (char *) malloc(string.length() + 1);
    strcpy(str, *string);
    return str;
    }
    char *str = (char *) malloc(strlen(fallback) + 1);
    strcpy(str, fallback);
    return str;
}
</code></pre>

<p>add these code below <code>using namespace node;</code>.</p>

<p>then change the line around 155 before or 165 after code above added</p>

<pre><code>return XML_ParseBuffer(parser, len, isFinal) != XML_STATUS_ERROR;
</code></pre>

<p> into</p>

<pre><code>return XML_Parse(parser, toCString(&amp;str, ""), len, isFinal) != XML_STATUS_ERROR;
</code></pre>

<p>This patch could help to remove the error &#8221;<strong>not well-formed (invalid token)</strong>&#8221;.</p>

<p>Now, your node-epxat under windows is ready for node-soap, you would need this for something like WSDL!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zettabyte FileSystem: ZFS]]></title>
    <link href="http://mindon.github.com/blog/2012/06/08/zettabyte-filesystem-zfs/"/>
    <updated>2012-06-08T10:50:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/06/08/zettabyte-filesystem-zfs</id>
    <content type="html"><![CDATA[<p>知道ZFS: Zettabyte FileSystem 说到头是从NodeJS开始的。</p>

<p>因为NodeJS开发下需要关注CPU占用和内存泄漏问题，了解到了 DTrace, mdb —— 这些 Solaris 系统下的跟踪调试工具。后来接触到了 SmartOS 系统 —— Joyent已经把这个基于Illumos的操作系统开源了。（2010 年 8 月 3 日，illumos 正式可用。「Illumos」这个词来自 Illuminare，也即拉丁语的 Illuminate，「照明、照亮」的意思。illumos 项目的最终目标有两个：一是使用开源代码取代所有仍在 OpenSolaris 使用的专有代码，二是围绕之前的OpenSolaris 代码库建立一个独立的社区。）</p>

<p>SmartOS由Illumos内核（包括ZFS，DTrace，Zones，OS级虚拟化以及下一代KVM）、BSD包管理器和GNU工具链组成。【<a href="https://github.com/joyent/smartos-live">源码</a>】,【<a href="https://download.joyent.com/pub/iso/">Live ISO</a>】</p>

<h2>Why SmartOS?</h2>

<ul>
<li>Scale as fast and big as you need</li>
</ul>


<p>SmartOS is a hypervisor lean enough to run entirely in memory, powerful enough to run as much as you want to throw at it. Provisioning is blindingly fast, thanks to zones and ZFS file system creation.</p>

<ul>
<li>Trust it to keep your data safe</li>
</ul>


<p>The ZFS file system guarantees data integrity, with particular emphasis on preventing silent data corruption.</p>

<ul>
<li>Keep your system secure with &#8220;double hulled&#8221; virtualization</li>
</ul>


<p>OS virtualization with highly secure sparse zones (most system software is read-only), and KVM for legacy apps, provide the most secure virtualization on the market.</p>

<ul>
<li>Rely on It</li>
</ul>


<p>Based on the <a href="http://illumos.org/">illumos</a> kernel, a descendant of Solaris - the most trusted enterprise operating system in computing history. Additionally, SmartOS runs from a live image: there&#8217;s no such thing as a failed upgrade when you can simply roll back to an earlier image.</p>

<ul>
<li>Use and extend freely: it’s open source</li>
</ul>


<p>SmartOS is and will remain <a href="http://smartos.org/cddl/">open source</a>. Joyent contributes <a href="https://github.com/joyent/smartos-live">our core kernel</a> work to the <a href="http://illumos.org/">illumos</a> project.</p>

<ul>
<li>Manage resources better</li>
</ul>


<p>The Service Management Facility (SMF) helps you recover more quickly from system failures and manage through service slowdowns. Fair share scheduling, CPU caps, and disk I/O throttling ensure good neighbor behavior in massively multi-tenant environments.</p>

<ul>
<li>See what’s going on throughout the software stack, in real time</li>
</ul>


<p>When something doesn’t behave as it should, you need to be able to find out quickly what is wrong and why. <a href="http://wiki.smartos.org/display/DOC/DTrace+Resources">Dynamic tracing</a> lets you see everything that&#8217;s happening throughout the software stack - safely, in real time, in production.</p>

<h2>ZFS特性介绍(转载)</h2>

<p><img src="http://mindon.github.com/images/blog/zfstour.png" alt="" /></p>

<p>from <a href="http://hub.opensolaris.org/bin/view/Community+Group+zfs/source">http://hub.opensolaris.org/bin/view/Community+Group+zfs/source</a></p>

<p>ZFS是第一个128位的文件系统，同时ZFS又被Sun Microsystems称作史上最后一个文件系统。因为这个文件系统含有多项创新技术，不仅成功地解决现有文件系统的问题和陋习，而且前瞻性地考量了未来对存储空间的需求，单个文件系统可以达到256 quadrillion（264） Zettabytes（221）。ZFS不仅符合POSIX文件系统的标准，而且提供了许多高级功能比如：Quota(配额)，Reservation(预留), Compression(压缩)， Snapshot(快照)，Clone（克隆）等。如果你还在坚持使用现有32位或者64位的文件系统，如果你还在“痛并不快乐着”地用着各式各样的Volume Manager，那就很值得看看这里列出的使用ZFS的十条理由。</p>

<!--more-->


<ol>
<li><p><strong>再也不需要fsck, scandisk</strong></p>

<p>不管你是在用Linux，UNIX还是Windows，相信大家都有过类似的体会：当系统意外断电或者非法关机，系统重起后发现文件系统有inconsistent的问题，这时 候就需要fsck或者scandisk 来修复，这段时间是非常耗时而且最后不一定能够修复成功。更糟糕的是，如果这是一台服务器需要做fsck的时候，只能offline（下线），而且现有应用往往都是大硬盘，相应fsck修 复时间也很长，这对许多使用该服务器的用户来说几乎不能忍受的。</p>

<p>而使用ZFS后大家可以彻底抛弃fsck这种工具，因为ZFS是一个基于COW（Copy on Write）机制的文件系统。COW是不会对硬盘上现有的文件进行重写，保证所有硬盘上的文件都是有效的。所以不会有这种inconsistent的概念，自然就不需要这种工具了。</p></li>
<li><p><strong>管理简单</strong></p>

<p>ZFS作为一个全新的文件系统，全面抛弃传统File System + Volume Manager + Storage的架构，所有的存储设备是通过ZFS Pool进行管理，只要把各种存储设备加 入同一个ZFS Pool，大家就可以轻松的在这个ZFS Pool管理配置文件系统。大家再也不用牢记各种专业概念，各种命令newfs, metinit及各种Volume Manager的用法。在ZFS中我们只需要两个命令，zpool(针 对ZFS Pool管理)和zfs(针对ZFS文件系统的管理)，就可以轻松管理128位的文件系统。举个例子，我们经常会遇到系统数据增长过 快，现有存储容量不够，需要添加硬盘，如果依照传统的Volume Manager管理方式，那我 们需要预先要考虑很多现有因素，还要预先根据应用计算出需要配置的各种参数。在ZFS情况下，我们的系统管理员可以彻底解放，再也不需要这种人为的复杂 考虑和计算，我们可以把这些交给ZFS，因为ZFS Pool会自动调节，动态适应需求。我们只需一个简单的命令为 这个ZFS Pool加入新的硬盘就可以了：</p>

<pre><code>zpool add zfs_pool mirror c4t0d0 c5t0d0
</code></pre>

<p>基于这个动态调节的ZFS Pool之上的所有的文件系统就可以立即使用到这个新的硬盘，并且会自动的选择最优化的参数。</p></li>
<li><p><strong>没有任何容量限制</strong></p>

<p>ZFS（Zettabyte File System）文件系统就如其名字所预示，可以提供真正的海量存储，在现实中几乎不可能遇到容量问题。在现有的64位kernel（内 核）下，它可以容纳达到16 Exabytes(264)大小的单个文件，可以使用264个存储设备，可以创建264个文件系统。</p></li>
<li><p><strong>完全保证 数据 的正确和完整</strong></p>

<p>由于ZFS所有的数据操作都是基 于Transaction（事务），一组相应的操作会被ZFS解 析为一个事务操作，事务的操作就代表着一组操作要么一起失败，要么一起成功。而且如前所说，ZFS对 所有的操作是基于COW（Copy on Write）， 从而保证设备上的数 据始终都是有效的，再也不会因为系统崩溃或者意外掉电导致数据文件的inconsistent。</p>

<p>还有一种潜在威胁 数据的可能是来自于硬件设备的问题，比如磁 盘，RAID卡的硬件问题或者驱动bug。现有文件系统通常遇到这个问题，往往只是简单的把错误数据直接交给上层应用，通常我们把这个问题称作Silent Data Corruption。而在ZFS中，对所有数据不管是用户数据还是文件系统自身的metadata数 据都进行256位的Checksum（校 验），当ZFS在提交数据时会进行校验，彻底杜绝这种Silent Data Corruption情况。</p></li>
<li><p><strong>提供优异 性能和扩展性</strong></p>

<p>和传统File System + Volume Manager + Storage架构不同，ZFS则是直接基于存储设备提供所有的功能，因此有自己独有的创新特性，性能自然非比寻常。</p>

<p><strong>Dynamic Striping vs. Static Striping</strong></p>

<p>由于ZFS是基于COW和一个全局动态的ZFS Pool，任何一次写 操作，都是对一块新数据块（Block）的一次写操作。ZFS从ZFS Pool中动态挑选出一个最优的设备，并且以一个transaction（事 务）线性写入，充分有效地利用了现有设备的带宽，我们把这个特性称为Dynamic Striping。而相对应的Static Striping则是传统文件系统所使用的方式，Static Striping需要管理员预先对这组Stripe进行正确地计算人为 设置，而且如果加入新的设备则需要再次人为的计算和设置，更为严重的是如果人为计算错误，则会直接影响系统的性能。而在使用Dynamic Striping这种特性之后，我们根本不需要人为介入，ZFS会自动调整，智能的为你 提供最佳的设备，最快的操作方式。</p>

<p><strong>支持多种 大小的数据块（Multiple Block Size）</strong></p>

<p>ZFS支持多种大小的数据块定义，从512字节到1M字节。和传统文件系统往往都是固定大小数据块不同，ZFS则是可以动态的根据不同 大小的文件进行计算，动态的选择最佳的数据块。</p>

<p>因为不同大小数据 块，直接影响到实际使用硬盘容量和读取速度。如果使用较小的数据块，存储文件所导致的碎片则较少，读写小文件更快一些，但是会导致需要创建更多的metadata，读写大文件则会更费时。如果使用较大的数据块，使用的metadata较少，更利于读写大文件，但是会导致更多的碎片。ZFS根据实际调查现有文件使 用的情况，分析出一个选择数据块大小的算法，动态的根据实际文件大小确定最佳的数据块。所以ZFS是 非常智能的，在不需要系统管理员介入，就可以得到一个自我调优的结果。当然ZFS也支持用户对单个文件或者整个文件系统 所使用的数据块大小的自定义设置。</p>

<p><strong>智能预读取（Intelligent Prefetch）</strong></p>

<p>多数的操作系统都 有这种将数据预先读取的功能，而ZFS则是建立在文件系统上直接提供的一种更加智能的数据预读取功能。它不仅可以智能地识别出多种读取模式， 进 行提前读取数据，而且可以对每个读取数据流进行这种预读取智能识别，这个对许多流媒体提供者来说是件非常好的事情。</p>

<p>在扩展性上，和现有文件系统多是基于一个受限的静态模型不同，ZFS是采用ZFS Pool这个动态概念，它的metadata也是动态，并且读写操作都是可并行的，并且具有优先级概念，所以即使在大数据量，多设备的情况下仍可以保证性能的线性增长。</p></li>
<li><p><strong>自我修复功能</strong></p>

<p><strong>ZFS Mirror 和 RAID-Z</strong></p>

<p>传统的硬盘Mirror及RAID 4，RAID 5阵列方式都会遇到前面提到过的问题：Silent Data Corruption。如果发生了某块硬盘物理问题导致数据错误，现有的Mirror，包括RAID 4，RAID 5阵列会默默地把这个错误数据提交给上层应用。如果这个错误发生在Metadata中，则会直接导致系统的Panic。 而且还有一种更为严重的情况是：在RAID 4和RAID 5阵列中，如果系统正在计算Parity数值，并再次写入新数据和新Parity值的时候发生断电，那么整个阵列的所有存储的数据都毫无意义了。</p>

<p>在ZFS中则提出了相对应的ZFS Mirror和RAID-Z方式，它在负责读取数据的时候会自动和256位校验码进行校验，会主动发现这种Silent Data Corruption，然后通过相应的Mirror硬 盘或者通过RAID-Z阵列中其他硬盘得到正确的数据返回给上层应用，并且同时自动修复原硬盘的Data Corruption 。</p>

<p><strong>Fault Manager</strong></p>

<p>在Solaris 10中，包含 一个ZFS诊断引擎和Solaris的 Fault Manager（这也是Solaris 10的 另一个新特性）交互，可以实时地诊断分析并且报告ZFS Pool和存储设备的错误，用户可以通过Fault Manager及时得到一个非常友善的消息。这个诊断引擎虽然不会采取主动的行为去修复或者解决 问题，但是会在消息中提示系统管理员可采取的动作。类似下面一个ZFS报错消息，其中REC-ACTION就是建议采取的动作：</p>

<pre><code>SUNW-MSG-ID: ZFS-8000-D3, TYPE: Fault, VER: 1, SEVERITY: Major
EVENT-TIME: Fri Mar 10 11:09:06 MST 2006
PLATFORM: SUNW,Ultra-60, CSN: -, HOSTNAME: neo
SOURCE: zfs-diagnosis, REV: 1.0
EVENT-ID: b55ee13b-cd74-4dff-8aff-ad575c372ef8
DESC: A ZFS device failed. Refer to &lt;http://sun.com/msg/ZFS-8000-D3&gt; for more information.
AUTO-RESPONSE: No automated response will occur.
IMPACT: Fault tolerance of the pool maybe compromised.
REC-ACTION: Run ’zpool status -x’ and replace the bad device.
</code></pre></li>
<li><p><strong>安全</strong></p>

<p>在安全上，ZFS支持类似NT风格NFSv4版的ACL（读取控制列表）。而且前面所提到的256位验证码，用户可选择多种验证方式，包括SHA-256验证算法，从而在物理存储单元级别上保证数据的安全性。</p></li>
<li><p><strong>超强功能</strong></p>

<p>ZFS作为“最后一个文件系统”，涵盖了基本的文件系统和Volume管理的功能，同时 一并提供许多企业级别的超强功能：Quota(配额)，Reservation(预留), Compression(压 缩)， Snapshot(快照)，Clone（克隆）。并且速度非常快。有了这个文件系统，大家再也不需要任何Volume Manager了。</p></li>
<li><p><strong>兼容性</strong></p></li>
</ol>


<p>ZFS是一个完全兼容POSIX规范的文件系统，所以处于上层的应用程序是完全不受影响。ZFS也提供一个Emulated Volume模块，可以把任何一个ZFS文件系统作为普通的块设备使用。同时ZFS也可以使用基于Volume Manager构建的Volume作为存储设备单 元。这样在不需要修改应用程序，不修改已有文件系统下，给了大家最大的自由度去获得ZFS提供的各 种特性。</p>

<p>10。 <strong>开源</strong></p>

<p>ZFS是Sun Microsystems公 司作为OpenSolaris的一个开源项目运作并且完全免费使用，点击这里(<a href="http://www.opensolaris.org/os/community/zfs/source/">http://www.opensolaris.org/os/community/zfs/source/</a>) 可以直接浏览到ZFS的代码。 这就代表着我们不仅同时可以享受商业公司的高质量，也可以获得开源模式的优点。</p>

<p>虽然目前只有Solaris支持该文件系统，但是这种开源的模式必定会促进更多基于ZFS的应用。现在已经有国外开发者正在将ZFS移植到Linux和Mac OS上来。如果想要体验一下ZFS，由于目前它和Solaris 10绑定在一起，所以需要下载最新版的Solaris 10 6/06 (<a href="http://www.sun.com/software/solaris/get.jsp">http://www.sun.com/software/solaris/get.jsp</a>)。</p>

<p><strong>参考:</strong></p>

<p>Solaris ZFS Administration Guide: <a href="http://docs.sun.com/app/docs/doc/819-5461?l=zh&amp;q=ZFS">http://docs.sun.com/app/docs/doc/819-5461?l=zh&amp;q=ZFS</a></p>

<p>Solaris 10 Zone FAQ: <a href="http://www.sun.com/software/solaris/faqs/zfs.xml">http://www.sun.com/software/solaris/faqs/zfs.xml</a>
Automatic Performance Tuning in the Zettabyte File System:  <a href="http://tesla.hpl.hp.com/self-manage03/Finals/henson-self-tune.pdf">http://tesla.hpl.hp.com/self-manage03/Finals/henson-self-tune.pdf</a></p>

<p>Other: <a href="http://www.ibm.com/developerworks/cn/linux/l-zfs/">在 Linux 上运行 ZFS</a></p>
]]></content>
  </entry>
  
</feed>
