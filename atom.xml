<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Mindon.IDEA]]></title>
  <link href="http://mindon.github.com/atom.xml" rel="self"/>
  <link href="http://mindon.github.com/"/>
  <updated>2012-03-17T23:08:49+08:00</updated>
  <id>http://mindon.github.com/</id>
  <author>
    <name><![CDATA[Mindon Feng]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Redis: REmote DIctionary Server]]></title>
    <link href="http://mindon.github.com/blog/2012/03/17/redis-remote-dictionary-server/"/>
    <updated>2012-03-17T22:54:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/03/17/redis-remote-dictionary-server</id>
    <content type="html"><![CDATA[<h2>Redis tutorial</h2>

<p>These slides and notes were originally written to accompany a three hour Redis tutorial I gave at the NoSQL Europe conference on the 22nd of April 2010. <a href="http://simonwillison.net/static/2010/redis-tutorial/"><strong>Redis tutorial</strong></a></p>

<p>REmote DIctionary Server(Redis) 是一个由Salvatore Sanfilippo写的key-value存储系统。</p>

<p><a href="http://www.petermao.com/redis/65.html">redis源代码分析</a></p>

<p><a href="http://blog.csdn.net/archimedes_zht/article/details/6909074">Redis为什么不使用Libevent或者Libev</a>
<a href="http://www.redis.io/topics/internals-eventlib">http://www.redis.io/topics/internals-eventlib</a></p>

<p><strong>Salvatore Sanfilippo：</strong>
Redis使用一个简洁的事件循环（event loop），我能够完全控制它。Libevent库自身的代码量已经是Redis目前代码量的3倍大了。</p>

<p>大的库也并不总是每个方面都没有瑕疵的。例如，Libevent的稳定发布版在运行时对事件的数组做无意义的重新分配（Libevent在2.0版本里改进了这一点，但是这个版本还不是稳定的）。我修改了ae.c让它模块化，并且通过多分配一些内存为代价来避免在事件循环内部的各种类型的O(N)操作（但是这个多分配的内存对于Redis这个内存数据库来说并不是一个问题，因为可能只占总占用内存的0.001% :)）。现在添加和删除一个event是O(1)了，这对于有10K个客户端连接来说很重要。现在我们在Redis里面仅仅使用一个Timer，但是如果以后我们需要更多的，我可以修改ae.c通过使用skip list（跳跃表）来达到O(log(N))。我们现在有了2个模块：ae_select.c和ae_epoll.c，考虑到写一个新的模块的工作是如此的少，我肯定会增加ae_kevent.c。</p>

<p><strong>Sergey Shepelev：</strong>
Yeah，Libevent比较差劲，相反，libev是一个小巧、well thought、clean的库，它并没有提供任何高级的feature比如Http，但是它确实提供了非常好的底层feature。可以试一下：<a href="http://software.schmorp.de/pkg/libev.html">http://software.schmorp.de/pkg/libev.html</a></p>

<p><strong>Pedro Melo：</strong>
赞同使用Libev，使用它，你将会非常高兴满意。:)</p>

<p><strong>Salvatore Sanfilippo：</strong>
现在Redis已经支持kevents了，请看一下我在ae.c里面的新实现，它是多么简单的支持添加一个新模块，添加、删除事件都是O(1)的。底层的模块像ae_epoll.c ae_select.c ae_kevent.c仅仅导出一个最小的完美的API接口，上层则关注当前活跃的最大的FD和管理上层的状态。</p>

<p>我认为我们能够满足当前的实现而根本不用添加额外的依赖，另外这也不排除在某个时候，我们将会让我们的事件循环有一个更有意思的语义，for instance for LOCK if it will ever get implemented and for Virtual Memory (ability to &#8220;pause&#8221; events, ability to read chunks of on-disk files in background and so forth).例如：实现VM的时候，能够LOCK住事件循环，暂停事件，后台从磁盘读取文件等。我们也许要修改ae.c足够的多来让它和我们的代码一起工作而不是通过链接其他东西到Redis。当然，这有很多工作要做。</p>

<p><strong>Pedro Melo：</strong>
我的提议并不是关于添加这些模块有多简单或者复杂，我关注的是正确性。请看一下Libev的ChangLog，and seach for broken：所有这些高速的网络API都被相同OS的不同版本，或者更差的是不同的OS之间的小的不兼容困扰过。我认为Redis的主要努力不是为了创建另一个事件驱动的IO库，因此对我来说，“重用”一个已经仔细考虑过这些问题的库是更加明智的，然后把精力放在safe, working, backends上。</p>

<p><strong>Salvatore Sanfilippo：</strong>
我认为从软件工程的观点来看你是正确的，通过重用一个已经很好测试过的库，Redis的事件循环出现bug的概率会小很多。这是阻止我做正确选择的一系列things，顺便说一下，我也并不要求它们被客观接受。因此我对分歧所涉及的问题理解的很清楚：</p>

<ul>
<li><p>许多库在理论上被很好测试过了，但是如果通过一种和使用它的前N个项目不同的方式来用它，还是会发现bug的。例如，Redis唯一使用的外部代码：LZF压缩已经存在很多年了。在使用它一些天后，我发现了一个内存崩溃的bug。几乎所有人都在使用它，它也被很好测试过，但是bug仍然存在。</p></li>
<li><p>我计划以后使用很多timer。所有这些库都使用一个0(N)的定时器算法，这至少是我从源码中看到的。一个平衡树或者跳跃表可以用来提升性能。当我将需要时，我能够自己实现而不用等待外部的开发者来合并我的修改。</p></li>
<li><p>我讨厌 ./configure。事实上，在像事件循环库这种事情上，configure的魔法实际上只针对X个知名的系统。我对现在使用Redis的zero-configuration的体验非常满意。当然不使用./configure的另一种选择就是直接把代码放到Redis里面并且在发现问题时及时升级，但是我也并不想依赖于外部的源码。</p></li>
<li><p>我需要在任何地方使用 zfree/zmalloc。</p></li>
<li><p>写另一个事件循环库也是有一定价值的，如果这个库比其他的要易于阅读。例如，一些天前，我就看到某位同学在Twitter上推荐ae.c是一个关于简单事件循环很好的阅读对象，并且是能够在真实世界正确工作的。</p></li>
</ul>


<p>因此，从一个绝对的观点来看，你是正确的。但是我有一些我自己的主观原因在Redis中使用ae.c。</p>

<p><strong>Pedro Melo：</strong>
当然，不存在没有bug的库。我仅仅能够说的是libev非常的活跃，作者对在maillist上报告的bug也反应的非常快。我相信timer是O(log(N))，你可以看看文档的算法复杂度部分：http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod#ALGORITHMIC_COMP&#8230; 。事实上，libev是将它使用的算法的复杂度文档化的少有的几个库之一。总之，我确信它将能够很好的工作。</p>

<p><strong>Salvatore Sanfilippo：</strong>
Pedro，没有任何问题，我认为你的观点是很好的，我今天读了一会儿libev代码后，也同意libev的代码很好。如果我们把这个问题当作一个纯粹的软件工程问题，换句话说，假如我们将为宇宙飞船写一个组件，毫无疑问正确的做法是使用能够工作并且被很好测试过的库。</p>

<p>但是也有其他可能的观点，并且我感觉这些观点也同等的重要（也一样不是客观的）。我认为这个讨论与编写软件最大的动机问题有很深的联系（I think this discussion has some deep link with the most important motivations for writing software.）。我认为简洁代码的价值不仅在于能够做需要做的事情，而且在于易于阅读。库是一个让伟大工作快速完成的伟大想法。Libraries are a great idea to accomplish great things in short time, but things like libev finish to  resemble every day more what they wanted to avoid, after all there was libevent already. 毕竟已经有Libevent了，它有很多bug吗？既然这样为什么不fix呢？或者开出分支出来？因为Libevent非常复杂，一团糟等等。但是最终，这些库包括libev，试图毁坏每个人最初的简单设计。需要在同一个FD上注册更多完全相同的事件？对我来说，这是一个设计错误。对通用的库来说，这是一个feature，因为有同学在使用。等等。</p>

<p>没有外部依赖也很有价值。我没有证据，但是我打赌，Redis开始吸引一些用户不仅仅是由于它作为数据库的优点，也在于它是如此易于上手。能够非常容易的理解它是怎么工作的，很容易的编译，运行甚至不需要配置。它的语义是如此的简单，以至于我知道一些同学使用不同的语言（Erlang, Java, Javascript, &#8230; ）实现Redis的山寨版仅仅为了乐趣。</p>

<p>If you take the street of simplicity this should be adopted in everything, from the protocol to the fact there are no dependencies, and that everybody with some C skill can open ae.c and understand how an event loop works.</p>

<p>如果你认可“简洁”，也可以拓展到其他方面：从协议到没有依赖的事实，到每一个有一定C技能的同学可以打开ae.c并且理解一个事件循环是如何工作的。</p>

<p>当然我也不太确定，因为它是全新的代码。我几乎是从头编写的ae.c，但是如果有bug的话，我将能够很快的fix掉。我认为这付出的努力是值得的。顺便说下，最后一次提交之后，我已经进入了feature freeze阶段。我将利用下个月在发布rc1前的时间来从头阅读整份代码，并且做很多的测试，“简洁”在这个时候就非常有帮助了。</p>

<h2>Node.js Redis Client</h2>

<p>https://github.com/mranney/node_redis</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDB: The internal file structure]]></title>
    <link href="http://mindon.github.com/blog/2012/03/17/mongodb-the-internal-file-structure/"/>
    <updated>2012-03-17T11:43:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/03/17/mongodb-the-internal-file-structure</id>
    <content type="html"><![CDATA[<p><a href="http://www.quora.com/Jared-Rosoff">Jared Rosoff</a></p>

<p>Each logical db has its own set of files in your dbpath. You can find them as <dbname>.<file_number>. If you&#8217;re using directory-per-db option, then they may be in separate directories.</p>

<p>The dbfiles themselves are broken up into extents. Each extent is assigned to a namespace and contains data for that namespace. Each collection is its own namespace. Also each Index is its own namespace.</p>

<p>Documents in a collection are stored as a doubly linked list within extents. The document itself is formatted as BSON. There is a header that has, among other things, pointers to the next and previous document in the collection.</p>

<p>Index data is also stored in these files, but they are stored as B-Tree&#8217;s rather than doubly linked lists.</p>

<p>There is also a namespace file that contains namespace (collections, indexes, freelist) meta data and how they map to their extents.</p>

<p>If you&#8217;re running with journaling enabled, then there is also a set of journal files that contain a history of changes to collection data.</p>

<h2>MongoDB数据文件内部结构</h2>

<p>Origin from <a href="http://blog.nosqlfan.com/html/3515.html">http://blog.nosqlfan.com/html/3515.html</a></p>

<p>有人在Quora上提问：MongoDB数据文件内部的组织结构是什么样的。随后10gen的工程师Jared Rosoff出来做了简短的回答。</p>

<!--more-->


<p>每一个数据库都有自己独立的文件。如果你开启了directoryperdb选项，那你每个库的文件会单独放在一个文件夹里。</p>

<p>数据库文件在内部会被切分成单个的块，每个块只保存一个名字空间的数据。在MongoDB中，名字空间用于区分不同的存储类别。比如每个collection有一个独立的名字空间，每个索引也有自己的名字空间。</p>

<p>在一个块中，会保存多条记录，每条记录是BSON格式的，记录与记录之间通过双向链表进行连接。</p>

<p>索引数据也存在数据文件中，不过索引是被组织成B-Tree结构，而不是双向链表。</p>

<p>对每个数据库，有一个命名空间文件，用于保存每个名字空间对应的元数据。我们通过查询这些元数据来找到对应的名字空间的存储块位置。</p>

<p>如果你开启了jorunaling日志，那么还会有一些文件存储着你所有的操作记录。</p>

<p>下面图片摘自10gen工程师Mathias Stearn在MongoSV2011大会上的发言稿，手绘的数据文件结构。</p>

<ol>
<li><p><strong>每个数据库有相应的数据文件和命名空间文件</strong>
<img src="http://mindon.github.com/images/blog/mongodb-internal/1.jpg" alt="" /></p></li>
<li><p><strong>数据文件从16MB开始，新的数据文件比上一个文件大一倍，最大为2GB</strong>
<img src="http://mindon.github.com/images/blog/mongodb-internal/2.jpg" alt="" /></p></li>
<li><p><strong>文件使用MMAP进行内存映射，会将所有数据文件映射到内存中，但是只是虚拟内存，只有访问到这块数据时才会交换到物理内存。</strong>
<img src="http://mindon.github.com/images/blog/mongodb-internal/3.jpg" alt="" />
<img src="http://mindon.github.com/images/blog/mongodb-internal/3-0.jpg" alt="" /></p></li>
<li><p><strong>MongoDB的数据文件映射到内存表中的位置</strong>
<img src="http://mindon.github.com/images/blog/mongodb-internal/4.jpg" alt="" />
<img src="http://mindon.github.com/images/blog/mongodb-internal/4-0.jpg" alt="" /></p></li>
<li><p><strong>使用32位机器的话，内存地址最大可以标识4GB内存</strong>
<img src="http://mindon.github.com/images/blog/mongodb-internal/5.jpg" alt="" />
<img src="http://mindon.github.com/images/blog/mongodb-internal/5-0.jpg" alt="" /></p></li>
<li><p><strong>但是在32位机器上，4GB内存会有1GB被内核战用，大约0.5GB会用于mongod进程的stack空间，只剩下大约2.5GB可用于映射数据文件。</strong>
<img src="http://mindon.github.com/images/blog/mongodb-internal/6.jpg" alt="" />
<img src="http://mindon.github.com/images/blog/mongodb-internal/6-0.jpg" alt="" /></p></li>
<li><p><strong>在64位机器上则最多可以表示128TB的空间</strong>
<img src="http://mindon.github.com/images/blog/mongodb-internal/7.jpg" alt="" />
<img src="http://mindon.github.com/images/blog/mongodb-internal/7-0.jpg" alt="" />
<img src="http://mindon.github.com/images/blog/mongodb-internal/7-1.jpg" alt="" /></p></li>
<li><p><strong>每个数据文件会被分成一个一个的数据块，块与块之间用双向链表连接</strong>
<img src="http://mindon.github.com/images/blog/mongodb-internal/8.jpg" alt="" />
<img src="http://mindon.github.com/images/blog/mongodb-internal/8.jpg" alt="" /></p></li>
<li><p><strong>在名字空间文件中，保存的是一个hash table，保存了每个名字空间的存储信息元数据，包括其大小，块数，第一块位置，最后一块位置，被删除的块的链表以及索引信息</strong>
<img src="http://mindon.github.com/images/blog/mongodb-internal/9.jpg" alt="" />
<img src="http://mindon.github.com/images/blog/mongodb-internal/9-0.jpg" alt="" /></p></li>
<li><p><strong>这些位置通过DiskLoc数据结构进行存储，存储了数据文件编号和块在文件中的位置</strong>
<img src="http://mindon.github.com/images/blog/mongodb-internal/a.jpg" alt="" />
<img src="http://mindon.github.com/images/blog/mongodb-internal/a-0.jpg" alt="" />
<img src="http://mindon.github.com/images/blog/mongodb-internal/a-1.jpg" alt="" />
<img src="http://mindon.github.com/images/blog/mongodb-internal/a-2.jpg" alt="" /></p></li>
<li><p><strong>对每一个块来说，其头部包含了一些块的元数据，比如自己的位置，上一个和下一个块的位置以及块中第一条和最后一条记录的位置指针。剩下的部分用于存储具体的数据，具体数据之间也是通过双向链接来进行连接。</strong>
<img src="http://mindon.github.com/images/blog/mongodb-internal/b.jpg" alt="" />
<img src="http://mindon.github.com/images/blog/mongodb-internal/b-0.jpg" alt="" />
<img src="http://mindon.github.com/images/blog/mongodb-internal/b-1.jpg" alt="" /></p></li>
<li><p><strong>下面是B-Tree的存储结构和工作原理</strong>
<img src="http://mindon.github.com/images/blog/mongodb-internal/c.jpg" alt="" />
<img src="http://mindon.github.com/images/blog/mongodb-internal/c-0.jpg" alt="" />
<img src="http://mindon.github.com/images/blog/mongodb-internal/c-1.jpg" alt="" />
<img src="http://mindon.github.com/images/blog/mongodb-internal/c-2.jpg" alt="" />
<img src="http://mindon.github.com/images/blog/mongodb-internal/c-3.jpg" alt="" />
<img src="http://mindon.github.com/images/blog/mongodb-internal/c-4.jpg" alt="" />
<img src="http://mindon.github.com/images/blog/mongodb-internal/c-5.jpg" alt="" />
<img src="http://mindon.github.com/images/blog/mongodb-internal/c-6.jpg" alt="" />
<img src="http://mindon.github.com/images/blog/mongodb-internal/c-7.jpg" alt="" /></p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes on MongoDB]]></title>
    <link href="http://mindon.github.com/blog/2012/03/17/notes-on-mongodb/"/>
    <updated>2012-03-17T11:12:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/03/17/notes-on-mongodb</id>
    <content type="html"><![CDATA[<p><strong>MongoDB资料汇总专题</strong>
<a href="http://blog.nosqlfan.com/html/3548.html">http://blog.nosqlfan.com/html/3548.html</a></p>

<h2>MongoDB 最佳实践</h2>

<p>Original from <a href="http://www.oschina.net/question/12_38878">http://www.oschina.net/question/12_38878</a></p>

<p><strong>1. 始终启用备份</strong></p>

<p>备份能保证你应用的高可用性。假如你的一个节点down了，第
二节点可以迅速启用，你的应用不会中断。</p>

<p><strong>2. 使用最新版本</strong></p>

<p>10gen在不断的发布更新，特别是2.0.x包含了很高的性能提升
和并行改进，索引改进和bug修复。如果你还在使用 1.6.3的话
，你应该尽快升级。</p>

<!--more-->


<p><strong>3. 不要在32位的系统上跑MongoDB</strong></p>

<p>MongoDB在32位系统上有“2.5GB数据限制”。它的存储引擎使用
内存映射来读取文件以获得更好的性能。这个功能依赖于内存
寻址，而32位系统的内存不能超过4GB。</p>

<p><strong>4. 默认开启日志</strong></p>

<p>MongoDB支持数据库操作的提前日志（write-ahead journaling
）。这个功能有助于灾难恢复。</p>

<p><strong>5. 注意你数据文件的位置</strong></p>

<p>你应该保证你的MongoDB的数据文件是存储在物理驱动器上，例
如 /data/mongodb。当然你也可以使用虚拟的驱动器，但是必
须非常小心。因为它有可能会影响到你的集群架构。我们建议
你使用 Amazon EBS 来存放你的数据库文件。</p>

<p><strong>6. 保证足够大的内存</strong></p>

<p>为了保证整个集群的性能，你要确保整个所有MongoDB的工作实
例（working set）包括索引可以完全装入内存。如果你发现
“page faults”的概率在增加，很有可能mongoDB的数据量超出
了你的内存。在这种情况下你有两种选择：加内存，或者创建
分片集群（Sharding）。我们建议你先考虑加内存。</p>

<p><strong>7. 保持 65% 以内的压力</strong></p>

<p>如果你发现你的集群压力达到了65%，那么你应该考虑扩大你的
集群了。通常，你应该保证数据库压力低于65%。</p>

<p><strong>8. 特别小心分片集群</strong></p>

<p>分片集群需要你充分理解你应用的数据访问方式。你应该充分
了解MongoDB的分片工作方式，并且确认你确实需要这个功能。
还有，选择一个分片钥匙（sharding key）是对于性能也是很
重要的。</p>

<p>配置服务器对于一个集群的健康也是很重要的。在分片集群的
环境中，你必须有三台配置服务器。永远不要删除配置服务器
的数据，时常备份这些数据。这些配置服务器也需要64位的环
境。还有，不要把三台配置服务器放在同一台机器上！</p>

<p><strong>9. 使用 Mongo MMS 来图形化的监控你的数据库</strong></p>

<p>如果你还没有使用 Mongo MMS的话，我强烈推荐这个工具。
10gen 正在大力开发这个产品。它提供了一个非常友好的可视
化的界面来监控你的MongoDB集群。</p>

<p><strong>10. MongoDB 资源</strong></p>

<p>技术总是在不断进步，你需要市场关注这些信息：</p>

<ul>
<li>Documentation: <a href="http://www.mongodb.org/display/DOCS/Home">http://www.mongodb.org/display/DOCS/Home</a></li>
<li>Google Group: <a href="http://groups.google.com/group/mongodb-user">http://groups.google.com/group/mongodb-user</a></li>
<li>Bugs: <a href="https://jira.mongodb.org">https://jira.mongodb.org</a></li>
<li>Blog: <a href="http://blog.mongodb.org/">http://blog.mongodb.org/</a></li>
</ul>


<p><a href="http://www.engineyard.com/blog/2011/mongodb-best-practices/"><strong>MongoDB Best Practices</strong></a> <a href="http://www.programmer.com.cn/9999/">中文</a></p>

<p><strong>MongoDB运行状态、性能监控，分析</strong>:
<a href="http://blog.nosqlfan.com/html/3346.html">http://blog.nosqlfan.com/html/3346.html</a></p>

<p><strong>MongoDB容量规划</strong>:
<a href="http://blog.nosqlfan.com/html/3322.html">http://blog.nosqlfan.com/html/3322.html</a></p>

<p><strong>MongoQ</strong>:
<a href="https://github.com/zzdhidden/mongoq">https://github.com/zzdhidden/mongoq</a></p>

<p><strong>MongoSpy, MongoWatch及MongoDB数据压缩</strong></p>

<p><a href="http://blog.nosqlfan.com/html/3205.html">http://blog.nosqlfan.com/html/3205.html</a></p>

<h2>五步优化你的MongoDB</h2>

<ol>
<li><p><strong>查询优化</strong>
确认你的查询是否充分利用到了索引，用explain命令查看一下查询执行的情况，添加必要的索引，避免扫表操作。</p></li>
<li><p><strong>搞清你的热数据大小</strong>
可能你的数据集非常大，但是这并不那么重要，重要的是你的热数据集有多大，你经常访问的数据有多大（包括经常访问的数据和所有索引数据）。使用MongoDB，你最好保证你的热数据在你机器的内存大小之下，保证内存能容纳所有热数据。</p></li>
<li><p><strong>选择正确的文件系统</strong>
MongoDB的数据文件是采用的预分配模式，并且在Replication里面，Master和Replica Sets的非Arbiter节点都是会预先创建足够的空文件用以存储操作日志。这些文件分配操作在一些文件系统上可能会非常慢，导致进程被Block。所以我们应该选择那些空间分配快速的文件系统。这里的结论是尽量不要用ext3，用ext4或者xfs。</p></li>
<li><p><strong>选择合适的硬盘</strong>
这里的选择包括了对磁盘RAID的选择，也包括了磁盘与SSD的对比选择。</p></li>
<li><p><strong>Shard分片</strong>
在单个节点压力太大时，我们可以考虑使用MongoDB的auto-sharding机制来将数据分片到多个节点以缓解压力。</p></li>
</ol>


<p>火丁筆記: <a href="http://huoding.com/2011/08/09/104">记一次MongoDB性能问题</a></p>

<p><strong>NUMA Problem（Warn)</strong>
<a href="http://www.mongodb.org/display/DOCS/NUMA">http://www.mongodb.org/display/DOCS/NUMA</a></p>

<p>shell> numactl &#8211;interleave=all /path/to/mongod</p>

<p>NUMA下，内存是按照物理CPU来划分的，不是按逻辑CPU/核划分的</p>

<p>每个核访问分配给自己的内存会比访问分配给其它核的内存要快，有下面几种访问控制策略：</p>

<ol>
<li><p>缺省(default)：总是在本地节点分配（分配在当前进程运行的节点上）；</p></li>
<li><p>绑定(bind)：强制分配到指定节点上；3.交叉(interleave)：在所有节点或者指定的节点上交织分配；</p></li>
<li><p>优先(preferred)：在指定节点上分配，失败则在其他节点上分配。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lasers Can Be Used to Steer Lightning In Mid-Strike]]></title>
    <link href="http://mindon.github.com/blog/2012/03/15/lasers-can-be-used-to-steer-lightning-in-mid-strike/"/>
    <updated>2012-03-15T22:23:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/03/15/lasers-can-be-used-to-steer-lightning-in-mid-strike</id>
    <content type="html"><![CDATA[<p>Laser light can not only trigger lightning but redirect it, causing it to strike in the same place over and over, according to new research. This means lasers could serve as lightning rods. Because that would be awesome.</p>

<p>Laser lightning rods have been a research subject for several decades, because they could trigger lightning and guide it to a specific place. Firing a laser would create an ionized channel in the atmosphere, which could conduct the lightning to the ground. Laser lightning rods could be an alternative to lightning rockets, according to Aurlien Houard of the Laboratoire d&#8217;Optique Appliquée in Palaiseau, France, a co-author of this study. Lightning rockets can apparently trigger a lightning strike by bringing a conductive material, like some type of salts, toward the static layer of a thunderhead. But a laser would be easier to control than a rocket.</p>

<p>A team of French researchers set out to test how well lasers can harness and control lightning. They sent a laser beam past a spherical electrode toward an oppositely charged flat electrode. The laser stripped away the outer electrons from the atoms in its way, ionizing the pathway between the electrodes and creating a plasma filament — like lab lightning — that channeled an electrical discharge from the flat electrode to the spherical one.</p>

<p>Then the team added a longer, pointed electrode to their set of electrode shapes and watched what happened. Left to its own devices, lightning follows the path of least resistance, striking the first thing it comes across — in a thunderstorm, that’s the tallest thing, and in this experiment, it’s the nearest thing. With no laser lightning rod, the discharge predictably hit the tall pointed electrode first. But when the researchers used the laser filament to guide it, the electrical discharge followed the ionized path and hit the spherical electrode instead.</p>

<p>The team found they could pull this off even after the discharge was already on its way, meaning they could divert the path of lightning. The research appears in the American Institute of Physics journal <a href="http://aipadvances.aip.org/resource/1/aaidbi/v2/i1/p012151_s1?bypassSSO=1">AIP Advances</a>.</p>

<p>Original from POPSCI: <a href="http://www.popsci.com/technology/article/2012-03/lightning-can-strike-twice-if-you-have-some-lasers">Lasers Can Be Used to Steer Lightning In Mid-Strike</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Absurd]]></title>
    <link href="http://mindon.github.com/blog/2012/03/15/words-that-sound-different/"/>
    <updated>2012-03-15T20:30:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/03/15/words-that-sound-different</id>
    <content type="html"><![CDATA[<p>The video from youtube <a href="http://www.youtube.com/watch?v=R281PhQufHo"><strong>GDC 2012</strong> - Porting your game to NaCl</a>.</p>

<p>When I finished watching this video at noon, I visit the speaker&#8217;s Google+. There I see this sentence as his motto</p>

<p><strong>Colt McAnlis</strong> &#8211; &#8220;If at first, the idea is not absurd, then there is no hope for it&#8221;</p>

<p>This is the first time I met the word: <strong>absurd</strong>!</p>

<p>Another article “Man, give it five minutes.”</p>

<p><a href="http://37signals.com/svn/posts/3124-give-it-five-minutes">http://37signals.com/svn/posts/3124-give-it-five-minutes</a></p>

<blockquote><p>There are two things in this world that take no skill: 1. Spending other people’s money and 2. Dismissing an idea.</p>

<p>Dismissing an idea is so easy because it doesn’t involve any work. You can scoff at it. You can ignore it. You can puff some smoke at it. That’s easy. The hard thing to do is protect it, think about it, let it marinate, explore it, riff on it, and try it. The right idea could start out life as the wrong idea.</p>

<p>So next time you hear something, or someone, talk about an idea, pitch an idea, or suggest an idea, give it five minutes. Think about it a little bit before pushing back, before saying it’s too hard or it’s too much work. Those things may be true, but there may be another truth in there too: It may be worth it.</p></blockquote>

<p>“Your first design may be the best, but you won&#8217;t know until you can&#8217;t find a better one.”</p>

<p><a href="http://blog.intercom.io/criticism-and-two-way-streets/">http://blog.intercom.io/criticism-and-two-way-streets/</a></p>

<h2>Working on TikTalk</h2>

<p>This time, when we start a new product. I need a name for it: I choose tiktalk hoping the product could be someting like a drop of water in the ocean of internet: providing a kind of driving force of a website&#8217;s life.</p>

<p>A name for product is importance to express our idea, activate our creative power to push it forward. (I learn this from the global mail project last year.)</p>

<p>It&#8217;s a hard work during these 3 weeks:</p>

<ol>
<li><p>Design the front-end &amp; back-end frameworks</p></li>
<li><p>Setup service of back-end</p></li>
<li><p>Rewrite front-end codes</p></li>
</ol>


<p>Today, finish front-end demo: a few features in detail, fixing bugs&#8230;</p>

<p>TikTalk is working fine! :-)</p>

<p>Next week, making back-end service more stable &amp; flexible is big challenge for me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Key of TCM -- Recommended Books]]></title>
    <link href="http://mindon.github.com/blog/2012/03/10/key-of-tcm-recommended-books/"/>
    <updated>2012-03-10T15:13:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/03/10/key-of-tcm-recommended-books</id>
    <content type="html"><![CDATA[<h2>《醫鑰》推薦閱讀</h2>

<ul>
<li><p>《黃帝內經》</p></li>
<li><p>《神農本草經》</p></li>
<li><p>《傷寒論》</p></li>
<li><p>《金匱》</p></li>
<li><p>《針灸大成》</p></li>
<li><p>《傷寒雜病論》</p></li>
<li><p>《千金藥方翼方》（古籍部分）</p></li>
</ul>


<p><strong>近代書籍</strong></p>

<ul>
<li><p>《中西匯通醫書五種》（四川 唐容川 字宗海 著）</p></li>
<li><p>《傷寒發微，金匱發微》（江蘇淮陰 曹穎甫 著）</p></li>
<li><p>《傷寒論新義，金匱要略新義》（餘無言著）</p></li>
<li><p>《單穴治病選萃》（人民衛生出版社）</p></li>
<li><p>《疾病預測學》（楊力 著，北京科學出版社）</p></li>
<li><p>《經方實驗錄》（姜佐景 著）</p></li>
<li><p>《針灸大成》（明朝 楊繼州 編寫）</p></li>
</ul>


<h2>麥盾推薦閱讀</h2>

<ul>
<li><p>《<a href="http://big5.ifeng.com/gate/big5/book.ifeng.com/lianzai/detail_2010_02/07/339087_0.shtml">問中醫幾度秋涼(艾寧)</a>》</p></li>
<li><p>《<a href="http://www.verycd.com/topics/2824440/">醫鑰——揭開中醫的奧秘(彭奕竣)</a>》</p></li>
<li><p> <a href="http://jicheng.sabi.tw/jcw/">笈成資料庫</a>: 笈成是一個收集、整理中醫藥典籍的開放計畫，未來也會考慮納入醫家、中藥、方劑、方歌資料的整理。</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[激情 - Passion]]></title>
    <link href="http://mindon.github.com/blog/2012/03/10/programmers-are-born-not-made/"/>
    <updated>2012-03-10T14:04:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/03/10/programmers-are-born-not-made</id>
    <content type="html"><![CDATA[<h2>Passion</h2>

<blockquote><p>Sometimes when you give an impressionable young mind (anybody deciding to learn to code, age is irrelevant) two tools and a problem, they will use the two tools to create four more tools. Then they will get on the internets and find some more tools … soon they have twenty tools and what was the problem you wanted me to solve again?</p>

<p>That’s passion!</p>

<p>Pure unadulterated passion for programming. When you can be fascinated, even excited, about this stuff without a need to solve a problem. Hell, even if you are solving a problem that you know is a meaningless exercise … that’s where greatness lies.</p>

<p>It doesn’t matter what age you started coding at – many studies have shown experience is not a predictor of quality in our world – what matters is that you have a passion for this stuff.</p>

<p>Because if you’ve got the passion, then you probably have everything else you need as well.</p></blockquote>

<!--more-->


<p><a href="http://swizec.com/blog/programmers-are-born-not-made/swizec/3369">Programmers are born not made</a></p>

<h2>激情</h2>

<blockquote><p>有时候，当你给一个有上进心的年轻心灵(任何愿意学习编程的人，年龄不是问题)两种工具和一个难题。他会使用这两种工具创造出4种工具。他会搜索互联网，发现更多的工具…很快，他有了20种工具，请问你还让我解决什么问题？</p>

<p>这就是激情！</p>

<p>心无杂念的对编程的激情。没有问题需要解决时仍然对编程入迷，甚至兴奋。甚至把解决一个已知的问题也当作一次普通的练习…这就是卓越之处。</p>

<p>多大岁数才开始学习编程，这并不重要——很多研究显示，在我们这个世界里，编程的工龄并不是水平的指示符——重要的是你对这个行业有个充满激情的心。</p>

<p>因为，一旦有了激情，你就拥有了所有其它的一切。</p></blockquote>

<p>做任何事情，如果没有激情，就没法做得比别人更好！</p>

<p>在IBG数年，有两个同事说的话一直让我印象深刻：</p>

<ol>
<li><p>技术，要有激情！ —— Teddy</p></li>
<li><p>同样的事情，你来做和别人做能有什么不一样？ —— Flying</p></li>
</ol>


<p>今天看到【外刊IT评论】的这篇文章（<a href="http://www.aqee.net/programmers-are-born-not-made/">一个人是否能成为程序员是上天注定的</a>），深有感触！特以此文自勉。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[For my darling: Aby]]></title>
    <link href="http://mindon.github.com/blog/2012/03/08/for-my-dear-aby/"/>
    <updated>2012-03-08T13:15:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/03/08/for-my-dear-aby</id>
    <content type="html"><![CDATA[<p>Aby, 在一起的日子里，你带来了丰富多彩的生活，让我每天都能体会到幸福的滋味。谢谢你，宝贝。</p>

<p>最想对你说的还是那三个字 :-) <a href="http://mindon.appspot.com/i-love-u">I love you</a>。其实，用多少种语言也难以表达这种从心底溢出的感情。</p>

<p><img src="http://mindon.github.com/images/blog/roses/red-rose.jpg" alt="Rose" /></p>

<!--more-->


<p>我生病的这段日子，你用心研究各种食材，每天想尽办法做营养、美味又适合我吃的饭菜。</p>

<p>——每天回家都能吃上热乎乎的美食，还有什么比这更幸福呢？</p>

<p>你所做的，远不止美食和各式各样的滋补靓汤，或是美味的馄饨、吐司面包、通心粉这些早餐…</p>

<p>还有无法数清的细微照顾和用心付出。</p>

<p>这点点滴滴，让我无时无刻都感受到幸福的温暖。</p>

<p><img src="http://mindon.github.com/images/blog/roses/purple-rose.jpeg" alt="Rose" /></p>

<p>缘分让我们由千里之外到相聚在一起，转眼数年飞逝——过去幸福快乐的分分秒秒，会永远留在记忆中，也会在未来继续精彩。</p>

<p>我们旅游的足迹会继续洒落在世界各地，世界的风景和美食也会越来越多汇合到温暖小家的照片墙上。</p>

<p>在这特别的日子里，想对你说：</p>

<h2>有你在身边，真好！</h2>

<p><img src="http://mindon.github.com/images/blog/roses/light-up-rose.jpg" alt="Rose" /></p>

<p>衷心祝愿我们家的Aby每天都健健康康，美丽和快乐！</p>

<p>节日快乐！有你就有欢乐:-)</p>

<blockquote><p>I love you more and more each day, as time goes by.</p></blockquote>

<p><img src="http://mindon.github.com/images/blog/roses/roses.jpg" alt="Rose" /></p>

<p>You are my flowers in spring,</p>

<p>Bring me fresh and happiness.</p>

<p>You are my rains in summer,</p>

<p>Keep me far from desert and dust.</p>

<p>You are my wind in autumn,</p>

<p>Bring me the golden harvest.</p>

<p>You are my sunlight in winter,</p>

<p>Warm me up in the cold morning.</p>

<p><img src="http://mindon.github.com/images/blog/roses/rose.jpg" alt="Rose" /></p>

<p>写给我们家的Aby —— 聪明能干、美丽勤劳的女主人，</p>

<p>—— 麥盾，二零一二年三月八日，深圳</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[落叶——中西医有感]]></title>
    <link href="http://mindon.github.com/blog/2012/03/06/falling-leafs-life-system/"/>
    <updated>2012-03-06T20:21:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/03/06/falling-leafs-life-system</id>
    <content type="html"><![CDATA[<p>最近，路边有一种阔叶树开始掉叶子了——这种树在三月里的几天内叶子大片大片往下掉，直至全部叶子都掉光。我第一次看到满地叶子、树干光秃秃的时候，还以为世界末日临近了呢——满树的绿叶几天内变黄落了满地。</p>

<p>可是意外的是，再过一个星期，这树又满树的绿叶嫩芽了，长新叶子的速度跟落叶的速度一样——快得令人诧异。</p>

<p>这种现象，要是放到医学里头会是很有趣的事情：</p>

<!--more-->


<h2>西医</h2>

<p>基于检测的西医，发现突然树没叶子了，定会下结论——这树生病了，而且病得非常严重——必需住院治疗了。</p>

<p>住院嘛，主要任务就是检测了——于是，X光、抽液、剥皮取样——一通检测下来，还是没能发现毛病——只能给树输液吧，什么营养液，杀虫剂，生长激素——只要跟长叶子可能相关的措施都施展一遍，还是没有什么效果。</p>

<p>过了几天之后，树又开始长叶子了，于是西医觉得自己的治疗措施起作用了……</p>

<h2>中医</h2>

<p>中医从来不把病症作为割裂的现象来看待，系统分析、强调变化和个体差异、环境和气候影响……是中医的特点。</p>

<p>中医仅仅树生长的规律、特性，便能下结论——这现象是正常的生长代谢的过程，而不是病症，无需采取任何措施。</p>

<h2>思考</h2>

<p>近来天气返潮特别严重，屋里的很多东西由于潮湿开始长霉。Aby有一天就发现浴室里的一个木梳长霉了（此木梳已经很久没有使用了），费了很大的劲才清洗干净，放在阳台晾晒干了。又放回了浴室的篮子里…</p>

<p>这个是典型的类似西医治疗方式的处理：不理会梳子长霉的原因，只对梳子上的异常进行处理——因为没有消除长霉的根源，所以梳子过些日子必然继续长霉——需要继续处理。</p>

<p>然而，中医式的处理则会追究梳子长霉的根源——湿气太重：于是，唯有除湿并晾晒梳子才能让其避免继续或者未来的发霉。对于梳子，脱离湿气重的环境才是最佳的处理方式——放到浴室之外，远离湿气。</p>

<p>虽说，中医的理论体系——系统化、动态化要比机械化和数据硬性的西医治疗模式要先进得多，不过现代城市和社会里，要找个靠谱的中医何其难？于是，我们只会看到西医院里人头攒动——人气旺得很是热闹：人们没有选择，加上洗脑式的社会宣传和推销，庞大的利益链条的推动，这是很自然的现象，也是最可悲的事情。</p>

<p>最近看了N年前一位台湾中医大夫写的书《医钥》：里面描述的台湾医疗现状何尝不是今天大陆医疗的隐忧？</p>

<p>不究病因的依赖抗生素的西医治疗方式下，毛病只会越来越多，越来越无法治疗。悲哉！</p>

<p>推薦閱讀：<a href="http://ishare.iask.sina.com.cn/f/15423125.html">中醫之鑰（6寸版pdf）</a> 彭奕竣 《醫鑰》</p>

<p>&#8212;&#8211; 麥盾，二零一二年三月六日，深圳</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Socket.IO behind proxy or firewall]]></title>
    <link href="http://mindon.github.com/blog/2012/03/06/socket-dot-io-behind-proxy-or-firewall/"/>
    <updated>2012-03-06T06:32:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/03/06/socket-dot-io-behind-proxy-or-firewall</id>
    <content type="html"><![CDATA[<p>Independently of what transport you are using (WebSocket or Comet or both), a connection can always be closed by a Proxy or Firewall, or an expected network outage can close your connection. Why is it a problem? It’s problematic when a disconnection happens as you may loose server side events if you don’t architect your application correctly.</p>

<ul>
<li><strong>long-polling</strong>: between reconnection, servers side events may happens and if they aren’t persisted, those events will never reach your client.</li>
<li><strong>websocket</strong>: Websocket are new and most if not all firewall will close them after some X idle times. Again, all server sides events will be lost</li>
<li><strong>http-streaming</strong>: Some proxy really don’t like the http-streaming technique, and will close it right away. Again, possibility to loose server sides events.</li>
<li><strong>Unexpected network outage</strong>: the connection can also be closed by something between your browser and server.</li>
</ul>


<!--more-->


<p><a href="https://github.com/LearnBoost/socket.io-client/issues/331">Query string management is messed up</a></p>

<p><a href="https://github.com/LearnBoost/socket.io/wiki/Socket.IO-and-firewall-software">Socket.IO and firewall software</a></p>

<p><a href="http://www.infoq.com/articles/Web-Sockets-Proxy-Servers">How HTML5 Web Sockets Interact With Proxy Servers</a></p>

<p><img src="http://mindon.github.com/images/blog/websocket-proxy.png" alt="Websocket Interact with proxy" /></p>

<blockquote><p>Using TLS/SSL is advised not only when you need to encrypt the traffic but also when you need to bypass proxy servers and firewalls, that otherwise will just block or not understand WebSockets connections.
<a href="http://showmetheco.de/articles/2011/2/diving-into-html5-with-websockets-and-perl.html">Diving into HTML5 with WebSockets and Perl</a></p></blockquote>

<p>Socket.IO server configuring: <strong>match origin protocol</strong></p>

<p><a href="https://github.com/LearnBoost/Socket.IO/wiki/Configuring-Socket.IO">https://github.com/LearnBoost/Socket.IO/wiki/Configuring-Socket.IO</a></p>

<p><a href="http://www.letseehere.com/reverse-proxy-web-sockets">Reverse Proxy Web Sockets with Nginx and Socket.IO</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Crush tradition! Photograph things as they are!]]></title>
    <link href="http://mindon.github.com/blog/2012/03/06/crush-tradition-photograph-things-as-they-are/"/>
    <updated>2012-03-06T05:24:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/03/06/crush-tradition-photograph-things-as-they-are</id>
    <content type="html"><![CDATA[<blockquote><p><a href="http://en.wikipedia.org/wiki/Henri_Cartier-Bresson"><strong>Henri Cartier-Bresson</strong></a> (August 22, 1908 – August 3, 2004) was a French photographer considered to be the father of modern photojournalism. He was an early adopter of 35 mm format, and the master of candid photography. He helped develop the &#8220;street photography&#8221; or &#8220;real life reportage&#8221; style that has influenced generations of photographers who followed.</p></blockquote>

<p><img src="http://mindon.github.com/images/blog/henri-cartier-bresson.jpg" alt="Henri Cartier-Bresson" /></p>

<!--more-->


<p>I got his name from the Lytro Inventor&#8217;s light field camera paper yesterday, but I&#8217;d saw his photograph long before.</p>

<p>With Google&#8217;s search result, I know more about him: &#8220;The Decisive Moment&#8221; (Images à la sauvette)</p>

<blockquote><p>In 1952, Cartier-Bresson published his book Images à la sauvette, whose English edition was titled The Decisive Moment. It included a portfolio of 126 of his photos from the East and the West. The book&#8217;s cover was drawn by Henri Matisse. For his 4,500-word philosophical preface, Cartier-Bresson took his keynote text from the 17th century Cardinal de Retz: &#8220;Il n&#8217;y a rien dans ce monde qui n&#8217;ait un moment decisif&#8221; (&#8220;There is nothing in this world that does not have a decisive moment&#8221;). Cartier-Bresson applied this to his photographic style. He said: &#8220;Photographier: c&#8217;est dans un même instant et en une fraction de seconde reconnaître un fait et l&#8217;organisation rigoureuse de formes perçues visuellement qui expriment et signifient ce fait&#8221; (&#8220;Photography is simultaneously and instantaneously the recognition of a fact and the rigorous organization of visually perceived forms that express and signify that fact&#8221;)</p>

<p><a href="http://zh.wikipedia.org/wiki/%E4%BA%A8%E5%88%A9%C2%B7%E5%8D%A1%E8%92%82%E5%B0%94-%E5%B8%83%E9%9B%B7%E6%9D%BE"><strong>亨利·卡蒂尔－布雷松</strong></a>（Henri Cartier-Bresson，又译“亨利·卡蒂埃－布列松”，1908年8月22日－2004年8月2日）是法国著名的摄影家，年少时学习绘画，1930年开始加入摄影创作，1931年广泛游历各地，作品也开始在报纸、杂志、书籍上陆续发表。偏爱黑白摄影，喜爱莱卡135旁轴相机与50mm标准镜头，反对裁剪照片与使用闪光灯，认为不应干涉现场光线，被誉为20世纪最伟大的摄影家之一及现代新闻摄影的创立人。他同时也是知名的玛格南图片社创办者。他的&#8221;决定性瞬间&#8221;摄影理论影响了无数后继的摄影人。</p>

<p>“摄影与绘画不同，”布勒松在1957年接受《华盛顿邮报》采访时说， “拍摄的那一秒是个充满创造力的瞬间，你所构建和表达的是生活本身所提供给你的，并且你必须凭直觉判断何时按下快门。按下快门的那一瞬，便是摄影师所创作的，哦&#8230;&#8230;是的，就是那一瞬！一旦你错过，它将不复存在</p>

<p>对于&#8221;决定性瞬间&#8221;，日本摄影家木村伊兵卫的注释更简单：“决定性瞬间就是光线、构图与感情相一致的瞬间。”</p></blockquote>

<p>“对我来讲，照相机就是一本速写簿，一件工具 &#8211; 是获取直觉的、自发的和令疑问和决心并存的伟大瞬间的工具。一个人要想把有意义的东西带给世界，他就必须能够与他取景框中的事物灵犀相通。这种方式需要精力集中、头脑有素、反应敏锐和对几何结构有良好感觉。拍摄照片既要认清事实本身，又要赋予它视觉感知形式上的意义。它把人的头脑、眼睛和心灵放在了同一条轴线上。”</p>

<pre><code>          -- 亨利·卡蒂埃-布列松
</code></pre>

<p><strong>“打碎陈规，照片中的东西，应该就是它们自己！(Crush tradition! Photograph things as they are!)”</strong></p>

<blockquote><p>马格南的宗旨是：“触摸时代脉搏（“feel the pulse” of the times）”。</p>

<p>马格南的首批拍摄主题是：“生活在任何地方的人们（People Live Everywhere）”、“世界青年（Youth of the World）”、“世界妇女（Women of the World）”和“儿童一代（The Child Generation）”。</p></blockquote>

<p>More&#8230;</p>

<p>【译言网】 <a href="http://article.yeeyan.org/view/222604/197644">亨利·卡蒂尔-布雷松的经典摄影</a>
【Fondation Henri Cartier-Bresson】 <a href="http://www.henricartierbresson.org/">http://www.henricartierbresson.org/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Inside the Lytro: Light Field Camera]]></title>
    <link href="http://mindon.github.com/blog/2012/03/05/inside-the-lytro-light-field-camera/"/>
    <updated>2012-03-05T21:32:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/03/05/inside-the-lytro-light-field-camera</id>
    <content type="html"><![CDATA[<p>The New York Times: <a href="http://www.nytimes.com/interactive/2012/03/01/business/inside-the-lytro.html">Inside the Lytro</a></p>

<p>The Lytro camera is the first consumer “light field camera.” It uses a new technology to create photos that can have their focus changed after they have been taken. Because of this, there is no need to auto-focus, resulting in virtually no shutter delay. Here’s how it works.</p>

<h2>Camera Overview</h2>

<p>A Lytro camera is made up of two sections. An anodized aluminum shell contains the lens assembly, while the electronics are housed within a silicone rubber grip.</p>

<p><img src="http://mindon.github.com/images/blog/lytro-cross-section.jpg" alt="" /></p>

<!--more-->


<h2>Capturing Light</h2>

<p>Lytro’s light field sensor captures not only the color, intensity and position of the light, but also its direction, which is lost in traditional cameras.</p>

<h2>Changing Focus</h2>

<p>Because all the directional information of the entering light is captured, software can change the focal plane. Clicking any point on the image brings that area into focus, whether raindrops on the surface of a window or buildings beyond.</p>

<h2>Light Field Sensor</h2>

<p>Consists of a standard digital camera CMOS sensor coupled with a micro-lens array. The array contains thousands of miniature lenses.</p>

<h2>Micro-Lens Array</h2>

<p>Tiny lenses divide the CMOS sensor’s pixels into multiple areas, each showing the image at a slightly different angle. Software uses this data to triangulate the image in 3-D space.</p>

<h2>Controlling the Camera</h2>

<p>Lytro uses a 1.46-inch touch screen. Swiping back and forth allows you to view previous or later photos, while swiping up brings up a menu bar. The shutter button and a slider for the zoom are molded into the top of the unit, while the power button and a USB connector are on the bottom.</p>

<p><a href="https://www.lytro.com/science_inside">Lytro: Science Inside</a>, <a href="http://www.lytro.com/">Lytro</a></p>

<p><a href="http://graphics.stanford.edu/papers/fourierphoto/">http://graphics.stanford.edu/papers/fourierphoto/</a></p>

<h2>Lytro Light Field Camera</h2>

<p><strong>GOOD STUFF</strong></p>

<ul>
<li><p>Light Field technology is amazing</p></li>
<li><p>Gorgeous, conversation-starting design</p></li>
<li><p>Fast and reliable performance</p></li>
</ul>


<p><strong>BAD STUFF</strong></p>

<ul>
<li><p>Aside from the focusing effect, image quality is mediocre</p></li>
<li><p>Only works really well in a few situations</p></li>
<li><p>Desktop software is a bear</p></li>
</ul>


<p><a href="http://www.theverge.com/2012/2/29/2821763/lytro-review">Lytro Review</a></p>

<p>Lytro是一家位于硅谷的创业公司，源于公司CEO Ren Ng在斯坦福的一项研究，其目标很简单：凭借其光场（light field）相机「硬件和软件」，Lytro可以从很多方面改变照相技术，因为有了它你无需对焦。</p>

<p>与此同时，这家公司的投资方包括Andreessen Horowitz和Greylock等知名投资机构，其技术团队包括Silicon Graphics联合创始人以及Palm webOS的首席架构师。那么Lytro的魅力到底在哪里呢？</p>

<p>答案是「光场（light field）照相」或者说「全光（plenoptic）照相」。Lytro背后的核心思维源于斯坦福的一篇论文「PDF文档」，原理非常简单。普通相机的工作原理和肉眼差不多，前面的镜头可以收集来自前方的光线，然后通过传感器上的光圈「单反相机上的硅胶套或眼睛里的视网膜」。为了聚焦眼睛或普通照相机，你通过不同方式调整镜头，以捕捉来自不同方向的光线，将其收集到传感器中。这会带来很多副作用，其中之一就是只能有一个焦点。这让问题变得复杂，当然如果手法得当的话可以拍出漂亮的照片。</p>

<p>但Lytro的技术之一就是在相机传感器前面布有大量微镜头。你可以把它们想象成苍蝇眼睛上的数千个微型镜头。其中的物理学和数学知识有点复杂，但最后的结果是这样的：相机传感器记录下的不是单一的图像「由镜头、光圈等设置决定」，Lytro相机可以用复杂的方式记录下来自前方场景各个部位的光线，而不仅仅是普通相机那样只能记下聚焦范围中的光线。然后Lytro软件会对图像进行解码。</p>

<p><embed src="http://player.youku.com/player.php/sid/XMjc5NDc5NDY4/v.swf" allowFullScreen="true" quality="high" width="480" height="400" align="middle" allowScriptAccess="always" type="application/x-shockwave-flash"></embed></p>

<p>这就是神奇之处。因为这个系统可以捕捉有关场景光线方向的信息，因此它可以“聚焦”照片中的任何深度，哪怕在拍照后数年。一瞬间你就可以获得理想的照片，相机可以去掉笨重、耗电和昂贵的聚焦系统，你可以更快地完成拍照，即便非专业摄影师也不必担心对焦问题。镜头还可以捕捉弱光环境下的光线。这会产生很大的影响，可能会对整个相机业带来巨大变革。</p>

<p>&#8230; 36氪<a href="http://www.36kr.com/p/30873.html">Lytro光场相机原理和应用浅析</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Walking in Chrome]]></title>
    <link href="http://mindon.github.com/blog/2012/03/03/chrome-app-walking-in-chrome/"/>
    <updated>2012-03-03T18:27:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/03/03/chrome-app-walking-in-chrome</id>
    <content type="html"><![CDATA[<p>Chrome插件&#8221;Walking in Chrome&#8221;是个有趣的应用，想法来自于“运动”概念：了解天天坐电脑前面的自己用鼠标在网上移动的距离究竟有多远，点击了多少次，为了滚动网页手指动了多少下。这些数字究竟有多大你是无法想象的 :-p
( 插件无需网络链接，在Chrome Store网站内无法统计 )</p>

<p>Find out how far you have walked on the web in Chrome, and how many clicks you&#8217;ve made or how many scrolls on your finger tip.
( No network requests in this extension, BTW: inside Chrome Web Store, it keeps still&#8230; )</p>

<p><img src="http://mindon.github.com/images/blog/walking-in-chrome.png" alt="Walking in Chrome" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to say 'I Love You']]></title>
    <link href="http://mindon.github.com/blog/2012/03/03/chrome-app-say-i-love-you/"/>
    <updated>2012-03-03T15:07:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/03/03/chrome-app-say-i-love-you</id>
    <content type="html"><![CDATA[<p>用30種不同語言說“我愛你/我爱你”（語音版/语音版）—— 送給你愛的她/他</p>

<p>跟隨愛的語言遊歷全世界 <a href="http://mindon.appspot.com/i-love-u">http://mindon.appspot.com/i-love-u</a></p>

<p>Saying &#8220;I love you&#8221; in different languages, was to show my love to my dear fiancée - Aby, before our wedding.</p>

<p>I promised her: one new language will be appended each year.</p>

<p>You can visit the webpage with roses <a href="http://mindon.appspot.com/i-love-u">http://mindon.appspot.com/i-love-u</a>.</p>

<p>The &#8220;I love you&#8221; languages are connected with Locations in Google Maps (If you are in China Mainland, you may need a proxy to see the map. Please check <a href="http://mindon.github.com/blog/2012/02/29/goagent-make-your-own-fast-proxy-with-gae/">GoAgent &#8211; Make Your Own Fast Proxy With GAE</a> or search GoAgen in Google.)</p>

<p>If you like to keep this offline. You may choose the Chrome App &#8220;I Love You&#8221; from Chrome Store: <a href="https://chrome.google.com/webstore/detail/efpkdgnjlkhjdfpnopfkdoigbjambdkf">Say &#8220;I Love You&#8221; in different languages(audio version)</a></p>

<p><img src="http://mindon.github.com/images/blog/i-love-you.png" alt="I Love You" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[You Really Can Catch Lightning in a Bottle]]></title>
    <link href="http://mindon.github.com/blog/2012/03/03/you-really-can-catch-lightning-in-a-bottle/"/>
    <updated>2012-03-03T14:41:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/03/03/you-really-can-catch-lightning-in-a-bottle</id>
    <content type="html"><![CDATA[<p>一群材料学家发现，从工业玻璃中抽出极细的一根玻璃丝，可以用来储藏和释放惊人的电量。</p>

<p>这事听起来有点荒诞，但其结果经过证明，确是千真万确。一群材料学家发现，从工业玻璃中抽出极细的一根玻璃丝，可以用来储藏和释放惊人的电量。把玻璃丝夹在两块金属板之间用作为电容器的一部分，该玻璃丝可为像心脏震颤器等设备提供大量的能量，甚至可以为新一代电动汽车提供能量。</p>

<p>【译言网】全文: <a href="http://article.yeeyan.org/view/289907/255207">捕捉瓶中闪电</a></p>

<p>Here&#8217;s something that sounds preposterous but as it turns out, it&#8217;s actually true. Take a very thinly drawn piece of industrial glass, and you can use it to store and release a surprising amount of electricity, a group of materials scientists has found. When sandwiched between two metal plates as part of a device called a capacitor, the glass slivers could provide large bursts of energy for devices such as heart defibrillators, and they could even help power the next generation of electric vehicles.</p>

<!--more-->


<p>Usually a rectangular plate of material, capacitors are essential to electronics because they can perform tasks that batteries can&#8217;t. Each contains a material called a dielectric, which can store electrical energy and then release it in a large burst. Capacitors are much faster than batteries at charging and releasing electricity, which makes them ideal for providing the pulses of power required by camera flashes and diesel engine starters. They can also endure millions of cycles of charging and discharging, compared to mere thousands of cycles for conventional rechargeable batteries.</p>

<p>To meet the power demands of modern devices, researchers have been looking for materials that can store more and more electricity. That&#8217;s where the use of industrial glass comes in. Industrial glass is stronger and more durable than the glass in household windowpanes and mirrors, and it&#8217;s more resistant to repeated chemical reactions. Materials scientists at Pennsylvania State University, University Park, have now found that an extremely thin piece of the industrial glass called barium boroaluminosilicate&#8211;which is used in flat-panel TV displays&#8211;can hold more than twice as much electrical charge as polypropylene, which is currently the most common material for high-energy capacitors.</p>

<p>Reporting online this week in Materials Letters, the researchers say they used samples of the glass about 50 micrometers thick, or about half the diameter of a human hair, which they etched in acid until the samples eroded to a thickness of only 10 to 20 micrometers. Then they hooked the samples to two electrodes and applied an increasing voltage to test the material&#8217;s breakdown strength: its ability to withstand electrical energy. When the material reached this breakdown limit&#8211;at about 22,000 volts&#8211;the stored energy was released in what resembles &#8220;a lightning bolt conducting through air,&#8221; says co-author Nicholas Smith.</p>

<p>The ability of the glass to hold so much charge renders it &#8220;of prime interest to people who make capacitors and other energy storage devices,&#8221; Smith says. He adds that the low cost of the material adds to its attractiveness, because researchers have been looking mainly at materials, such as specialty polymers and nanocomposites, that tend to be more expensive.</p>

<p>This could be a breakthrough, says chemical engineer Richard Wool of the University of Delaware, Newark. Wool, who specializes in the chemistry of glass, says the ability of the material to combine high energy storage and high breakdown strength, as well as its low cost, gives it an advantage over currently used materials.</p>

<p>Orignal form <strong>Science Magazine</strong> <a href="http://news.sciencemag.org/sciencenow/2009/05/05-02.html">You Really Can Catch Lightning in a Bottle</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beauty and the Beast: The rare moment a tornado and a rainbow come head to head in Colorado sky]]></title>
    <link href="http://mindon.github.com/blog/2012/03/03/beauty-and-the-beast-the-rare-moment-a-tornado-and-a-rainbow-come-head-to-head-in-colorado-sky/"/>
    <updated>2012-03-03T14:06:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/03/03/beauty-and-the-beast-the-rare-moment-a-tornado-and-a-rainbow-come-head-to-head-in-colorado-sky</id>
    <content type="html"><![CDATA[<p>这是一个罕见的瞬间：一条美丽的彩虹和猛烈的暴风云的短兵相接在天空中创造了一副绚丽的景象。</p>

<p>当巨大的龙卷风开始覆盖美国科罗拉多州上方的天空时，人们大部分都已经关好了门窗。</p>

<p>但是当龙卷风的威胁变小时，一群幸运的风暴追逐着们看到了罕见的一幕：一条彩虹看上去似乎和龙卷风仅仅相隔了几英里。</p>

<p>【译言网】全文: <a href="http://article.yeeyan.org/view/281379/254395">美女与野兽：美国科罗拉多州天空的罕见瞬间——龙卷风与彩虹的短兵相接</a></p>

<p>This is the rare moment a beautiful rainbow and violent storm cloud came head to head creating a stunning scene high in the sky.
As the monster tornado began to dominate the skies over Colorado, USA, most people would have been locking their doors and windows.
But as the threat diminished one lucky group of storm chasers saw the rare sight of a rainbow and tornado seemingly just a few miles apart.</p>

<p><img src="http://mindon.github.com/law-ms/tornado-rainbow.jpg" alt="Tornado and Rainbow " />
Rare sight: As the monster tornado began to dominate the skies over Colorado, USA, most people would have been locking their doors and windows, but one lucky group of storm chasers saw the rare sight of a rainbow and tornado</p>

<!--more-->


<p>The magnificent moment was captured by dedicated Dutch storm chaser Peter Gude, 47, who couldn&#8217;t believe his eyes as he spotted the unusual scene.</p>

<p>With the month of March looming, United States tornado chasers are already watching the Southeast as a nasty storm brews with the potential to spin off a batch of tornadoes.</p>

<p>But if funnel clouds develop Thursday or Friday as some forecasters believe, they won&#8217;t be the first.</p>

<p>This tornado season got an early and deadly start in late January when two people were killed by separate twisters in Alabama.</p>

<p>Preliminary reports showed 95 tornadoes struck last month, compared with 16 in January during a particularly stormy 2011.</p>

<p>The season usually starts in March and then ramps up for the next couple of months, but forecasting these storm seasons is even more imprecise than predicting hurricane seasons.</p>

<p>Tornadoes are too small and too short-lived for scientists to make seasonal predictions.</p>

<p>They don&#8217;t develop like blizzards and hurricanes, which are easier to project.</p>

<p>They pop in and pop out. The storms that give them birth may last only a few hours. Hurricanes and blizzards are lumbering beasts that spend days moving across the satellite maps.</p>

<p>When a hurricane approaches, coastlines get days warning to evacuate.</p>

<p>With a tornado, if the weather service can let people know 20 minutes in advance, it&#8217;s considered a victory.</p>

<p>&#8216;The Joplin (Missouri) tornado (that killed 158 people last May) wasn&#8217;t violent until just about the time it got to the hospital,&#8221; said Harold Brooks, a research scientist at the National Oceanic and Atmospheric Administration&#8217;s National Severe Storms Laboratory, in Norman, Oklahoma.</p>

<p>&#8216;Even when you&#8217;re in the field, there are still times when you&#8217;re surprised by the intensity of the event and how quickly it started.&#8217;</p>

<p>If a forecast for a hurricane or blizzard is off by a mile, it&#8217;s still bad weather. But a mile difference means no damage in a tornado, Brooks said: &#8216;It&#8217;s so much finer in time and space on the tornado, it does make it a harder problem.&#8217;</p>

<p>It takes a piece of debris only a few seconds to fly around an entire tornado; it takes hours to circle a hurricane. But tornadoes, though smaller, can have stronger winds.</p>

<p>Since 1950, there have been 58 tornadoes in the U.S. with winds exceeding 200 mph; six last year alone. Only three hurricanes have made U.S. landfall with winds more than 155 mph.</p>

<p>Original from <strong>MailOnline</strong> <a href="http://www.dailymail.co.uk/sciencetech/article-2105422/Beauty-Beast-The-moment-twister-rainbow-battle-space-sky.html">Beauty and the Beast: The rare moment a tornado and a rainbow come head to head in Colorado sky</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why China Will Have an Economic Crisis]]></title>
    <link href="http://mindon.github.com/blog/2012/03/03/why-china-will-have-an-economic-crisis/"/>
    <updated>2012-03-03T13:23:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/03/03/why-china-will-have-an-economic-crisis</id>
    <content type="html"><![CDATA[<hr />

<p>投资过剩，房产泡沫，政府负债，银行坏账。 昌盛的国家各有各的繁华，而危机笼罩下的国家，却都是相似的。 都是些老生常谈，争来争去逃不出了钱字。 作者虽非经济学专业人士，但也详尽阐述了一个西方人对于中国经济的看法。
【译言网】全文: <a href="http://select.yeeyan.org/view/205314/255491">时代周刊：为什么中国将发生经济危机</a></p>

<p>The view in most of the world is that China is indestructible. Shrugging off the crises multiplying elsewhere, China seems to surge from strength to strength, its spectacular growth marching on no matter what headwinds may come. It appears inevitable that China will overtake a U.S. mired in debt and division to become the world’s indispensable economy. Those businessmen and policymakers looking to the future believe China’s “state capitalism” may be a superior form of economic organization in dealing with the challenges of the modern global economy.</p>

<p>My answer to all of this is: think again.</p>

<p>I don’t doubt for a second that China will be a major economic superpower with an increasingly influential role in the global economy. In many respects, it already is a superpower. But that doesn’t mean the economy is free from problems, a good number of them created by the very statist system lauded by pundits in the U.S. and Europe. And in my opinion, if China doesn’t change course, and in a big way, the country will experience an economic crisis.</p>

<!--more-->


<p>I’ve been thinking about China’s economic future, and the likelihood it will face some sort of terrible collapse, for some time, but I have until now been reluctant to come out with my views so strongly. The reason is that it is very difficult to tell what’s really going on in the Chinese economy. Data is sparse or unreliable. And China is in certain ways unique in economic terms — has history ever witnessed a giant of such massive proportions ascend so quickly in the global economy? Valid precedents are hard to find. Then there is the issue of timing. It is easy to say China will have a crisis; it is almost impossible to say when that might happen. Next month? Next year? Next decade? The fact is China could continue as it is for some time to come. So, in other words, when you make the type of prediction I just have, you have a good chance of getting it just plain wrong.</p>

<p>But the more time I spend in China, the more convinced I am that its current economic system is unsustainable. Yes, economists who specialize in China can give you all sorts of reasons why the country is supposedly different, and thus the regular rules of economics don’t necessarily apply. But one simple thing I always say about economics is that you can’t escape math. If the numbers don’t add up, it doesn’t matter much how big your economy might be or how fast it is growing or how heavy a role the state might play. And China has lots of numbers that just don’t add up.</p>

<p>A big part of the bad math is created by China’s state capitalism. China has adopted a form of the Asian development model, invented by Japan and followed, to varying degrees, by many rapid-growth countries around East Asia. The model, very generally speaking, functions like this: 1) capitalize on low wages to spark growth through exports and industrialize quickly with hefty amounts of investment, 2) guide the whole process with the hand of the state, 3) employ industrial policies and state-directed finance to progress into more and more advanced sectors. This system generates fantastic levels of economic growth for a while, but then eventually, it crashes. Japan had its meltdown beginning in 1990 (and it hasn’t escaped two decades later); South Korea, the country that copied Japan’s model most closely, experienced its crisis in 1997-98.</p>

<p>What happens? The model is based on what Alice Amsden, in her study of the Korean economy, called “getting prices wrong.” To spur on the high levels of investment necessary to generate rapid growth, the model depends on state-directed subsidization to make investing in certain industries or sectors more attractive and less risky than it otherwise would be. Cheap credit is made available for industry, or the state outright orders money to be invested in certain preferred projects. The exchange rate is controlled to encourage exporters. All sorts of subsidies, for energy, exports and so on, are dished out. Banks are not commercially oriented but act to a great degree as tools of government-development policy. All of these methods funnel money, private and public, into industrialization, creating the astronomical growth rates we see again and again in Asia.</p>

<p>The problem here is that prices can’t stay wrong indefinitely. There is a good reason why classical economists are always so focused on allowing markets to find the correct price level. In that way, markets send the proper signals to potential investors on where money should or should not go. If those price indicators are skewed, so is the direction of resources. The Asian model, by playing around with prices, eventually creates tremendous distortions, in which money is wasted and excess capacity is generated. Subsidized companies don’t have to generate returns in the same way as unsubsidized firms, and that leads them to make bad investment decisions to build factories and buildings that are unnecessary and unprofitable. As a result, loans go bad and banking sectors buckle. That’s exactly what happened in both Japan and Korea. Though their crises were tipped off in very different ways — the bursting of an asset bubble in Japan, an external shock in Korea — the reason both countries collapsed was the same: weak banks, indebted companies, silly investments.</p>

<p>China is indulging in all of the same excesses as Japan and Korea, and then some. The level of investment in China, at nearly 50% of GDP, is lofty even by Asian standards. The usual argument made in defense of such astronomical investment in fixed assets is that China is a large developing country that needs all of the buildings and roads it is constructing. Qu Hongbin, the very smart chief China economist at HSBC, made that very argument in a recent study:</p>

<blockquote><p>There is a popular view in the market that China has overinvested and therefore can no longer rely on investment to sustain its growth. We disagree. China’s investment-to-GDP ratio is indeed very high (46%) … [But] China is only half way through the process of urbanisation and industrialisation. It still needs to invest more to cope with the rising demand for rail, hospitals and industrial plants. The recent infrastructure boom has boosted the country’s transport capacity, but China’s railway network is still shorter than that of the US in 1880 … In economic terms, we estimate that China’s capital stock per worker is only about 8% of that of the US and 15% of that of Korea. In other words, China’s capital accumulation is still far from reaching the stage of having diminishing returns; we believe the country needs to invest more, rather than less.</p></blockquote>

<p>I completely agree. Yet the issue is not whether China needs more investment. The issue is whether China is getting the types of investment it requires. The fact that investment levels can be so high and yet the economy is so deficient in certain key aspects makes me think the answer is no. We can see that in the continued problem of excess capacity in China, in which companies go hog wild building too many factories in certain industries, often with borrowing from state banks. That has happened in steel and solar panels, for example. The country is investing hundreds of billions in high-speed railways even though ticket prices are beyond the reach of most Chinese, while many major Chinese cities don’t have subways.</p>

<p>A good part of this misdirected investment seems to be headed into the property sector. Real estate development has become the key driving force of Chinese economic growth. In theory, China’s very rapid urbanization makes such construction a necessity — but that depends on what is being built. In Wenzhou, a real estate agent recently offered free BMWs to anyone who bought a high-end apartment — a clear sign of overbuilding — while there is an obvious shortage of housing affordable for most Chinese. On either side of my Beijing apartment building are three big malls that hardly ever seem to see real shoppers. Rents for top-quality office space in Beijing are now pricier than in New York City — despite the fact that China’s capital is one big construction zone. Many of the buildings going up are of a quality unsuitable for major corporations.</p>

<p>Even worse, much of the investment in China is being financed with debt. The level of debt in the Chinese economy has been rising with frightening speed. Rating agency Fitch estimates bank credit in 2011 was equivalent to 185% of the country’s GDP — an increase of 56 percentage points in a mere three years. Though that surge has not yet had a significant negative impact on China’s banks, many analysts fret that banks will eventually experience a rise in nonperforming loans. In an indication of what is to come, the Financial Times reported recently that the government has ordered banks to roll over the $1.7 trillion of loans owed by local governments. If true, this tells us two key things: 1) these governments invested money raised from banks in projects that are not generating the returns necessary to pay them back and 2) the quality of loans on the banks’ books are more questionable than official statistics suggest. On top of that, the fact that local governments amassed so much debt in the first place shows a complete lack of rule of law in China’s financial sector. Technically, local governments aren’t permitted to borrow money at all. Meanwhile, as government entities run up loans they can’t pay, many small companies, especially private ones, are unable to raise sufficient funds and remain starved of capital.</p>

<p>So we can see the pieces of a crisis falling into place: excessive, misguided investment, including a giant property boom, propelled on by debt and the decisions of government bureaucrats. Sound familiar? A crisis, of course, is not inevitable — if China’s leadership takes action and reorients the direction of the economy. The positive thing is that at least some top policymakers understand the need to change. In policy pronouncement after policy pronouncement, the government pledges to reform. The problem is that China’s government is not taking its own advice. The economy needs to rebalance away from investment and exports to a more consumption-driven growth model with a primary focus on quality of growth, not high rates at any cost. That’s not happening, or not happening quickly enough. Yes, the Chinese consumer is gaining in global importance, but savings in China remains too high and consumption as a percentage of GDP still way too low. Steps that the government could take to spur on the needed rebalancing — reducing lofty taxes on many imported goods, for example — are nowhere to be found. More importantly, the government is doing nothing to set prices right. The currency remains firmly controlled, interest rates unreformed. So investors within China are still acting based on the wrong price signals.</p>

<p>Why won’t China’s policymakers pursue more fundamental reform? They are afraid that growth might slip. Sure, the latest five-year plan targets 7% annual GDP growth, but it seems to me that every time growth drops under double digits, the leadership goes into panic mode and revs up the economy again. GDP surged 8.9% in the fourth quarter of 2011, but that’s not fast enough for China’s leaders. They’ve already started loosening credit again — slathering yet more debt onto the economy.</p>

<p>When I bring up these issues with China watchers, I’m usually scolded — Beijing’s policy mandarins have it all figured out, I’m informed. It is true that China’s policymakers have done a superior job managing the rapidly changing economy in recent years. But as any stock investor knows all too well, past performance does not ensure future performance. Back in the 1970s and ’80s, analysts in the West considered Japan’s bureaucrats near supermen as well. Now the stodgy Japanese bureaucracy is considered one of the main impediments to an economic revival. Chinese bureaucrats today suffer from the same problem that led Japanese bureaucrats astray — they believe the economy can be managed by fiat. The tools of classical economics — getting prices right — are secondary. Why guide an economy with abstract measures like interest rates when you can just tell the banks what to do?</p>

<p>That attitude is what killed Japan’s economic miracle, and now I see China slipping toward the same fate. Japan could not escape the forces of basic mathematics. China can’t either, no matter how brilliant its policymakers might be. When would a meltdown happen? It is interesting to play with a bit of history. Both Japan and Korea suffered their crises roughly 35 years after the Asian development model was switched on — the early 1950s to ’89 in Japan, and 1962 to ’97 in Korea. That puts a China crisis at around 2014-15 or so. I’m not predicting a firm date here. What I am saying is that China is running out of time to fix the problems of its economy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[穴位按摩方法(Acupressure)]]></title>
    <link href="http://mindon.github.com/blog/2012/03/02/acupressure-hands-tech/"/>
    <updated>2012-03-02T22:07:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/03/02/acupressure-hands-tech</id>
    <content type="html"><![CDATA[<p>穴位按摩有多种方法．常用的有按、拿、推、揉等，并不是每个身体部位适合所有的方法，需要根据病症不同，选择相应的刺激方法。</p>

<h2>掌平推法</h2>

<p><strong>方法</strong>：手掌在身体部位上做直线单方向移动。</p>

<p><strong>小技巧</strong>：力道缓和，接触身体面积大，慢慢平推，使手掌的热度传至皮肤。</p>

<p><strong>功效</strong>：行气活血，多用于治疗腰腿痛，肩背痛，颈椎病，胸腹胀痛等症。</p>

<!--more-->


<h2>指按法</h2>

<p><strong>方法</strong>：用指腹由轻到重，逐渐用力按压在被按摩的穴位上。</p>

<p><strong>功效</strong>：适合全身各处的穴位，有通经活络，放松肌肉的作用。</p>

<p><strong>小技巧</strong>：用食指按压，中指叠放在食指上，这样中指起到了很好的固定作用。</p>

<h2>四指摩法</h2>

<p><strong>方法</strong>：四指并拢，用指腹在相应的部位上，有规律地来回摩动。</p>

<p><strong>功效</strong>：提高皮肤温度，加速血液循环，散淤消肿，调理脾胃，理气和中。</p>

<p><strong>小技巧</strong>：摩法非常轻柔，在按摩开始和结束的时候采用，让人感受不到压力，放松心情。</p>

<h2>指揉法</h2>

<p><strong>方法</strong>：手指指腹在局部皮肤做轻柔和缓的回旋揉动。</p>

<p><strong>功效</strong>：可增强肌肉和真皮组织的弹性，并具有活血散淤，缓解痉挛，减轻疼痛的作用。</p>

<p><strong>小技巧</strong>：按揉穴位时，应略感到疼痛，这样是深压缓揉，保健效果会更好。</p>

<h2>拿捏法</h2>

<p><strong>方法</strong>：手掌和手指挤压身体部位。</p>

<p><strong>功效</strong>：减少皮下脂肪，振奋精神，疏通经络，祛风散寒。</p>

<p><strong>小技巧</strong>：双手深抓肉，像拧毛巾一样向两个方向用力，此法有减少皮下脂肪的作用。</p>

<h2>扣打法</h2>

<p><strong>方法</strong>：两手自然并拢，在按摩部位上轻轻拍打。</p>

<p><strong>功效</strong>：促进气血运行，消除疲劳和调节神经肌肉兴奋性。</p>

<p><strong>小技巧</strong>：轻拍是腕关节带动手掌拍打，重拍是以肘关节带动，不要用力过大。</p>

<h2>抖法</h2>

<p><strong>方法</strong>：双手或单手握住肢体末端，微微用力连续做小幅度的上下抖动。</p>

<p><strong>功效</strong>：抖法能够很好地放松疲劳的肌肉，灵活僵硬的关节。</p>

<p><strong>小技巧</strong>：肢体抖动时如波浪一样，由末端逐步传到身体中心。</p>

<h2>指叩法</h2>

<p><strong>方法</strong>：指尖、拳背、掌侧小鱼际击打一定部位。</p>

<p><strong>功效</strong>：疏通经络，活血化淤，安神醒脑。</p>

<p><strong>小技巧</strong>：除了用手指叩击，还可以借用一些工具如按摩棒等，击打手无法触及的部位。</p>

<h2>拳击法</h2>

<p><strong>方法</strong>：双手自然握拳，利用手腕的力量击打身体部位。</p>

<p><strong>功效</strong>：促进血液循环，镇定神经。</p>

<p><strong>小技巧</strong>：击打疼痛部位时，力度要适中，但击打松弛的肌肉时就要增加力度了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Allie Narrations in 《Taken》]]></title>
    <link href="http://mindon.github.com/blog/2012/03/01/allie-narrations-in-taken/"/>
    <updated>2012-03-01T22:04:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/03/01/allie-narrations-in-taken</id>
    <content type="html"><![CDATA[<p><strong>M</strong>y mother always talked to me a lot about the sky. She liked to watch the clouds in the day and the stars at night&#8230;especially the stars. We would play a game sometimes; a game called &#8220;What&#8217;s Beyond the Sky?&#8221; We would imagine darkness or a blinding light or something else that we didn&#8217;t know how to name. But of course, that was just a game. There&#8217;s nothing beyond the sky. The sky just is, and it goes on and on, and we play all of our games beneath it.</p>

<p><strong>P</strong>eople are lonely in this world for lots of different reasons. Some people have something in their disposition. Maybe they were just born too mean, or maybe they were born too tender. But most people are brought to where they are by circumstance, by calamity or a broken heart or something else happening in their lives that wasn&#8217;t anything they planned on. People are lonely in this world for lots of different reasons. The one thing that I do know is, it doesn&#8217;t matter what any one of them might tell you&#8211;nobody wants to be alone.</p>

<p><strong>S</strong>ome people have given up all hope of anything in their lives every changing. They just go on with it day by day, and if something were to come along and make things different they probably wouldn&#8217;t even notice it right off, except for that kind of nervous feeling you get in your stomach. My mom and I used to call that &#8220;the car trip feeling&#8221;, because it was how I&#8217;d feel whenever I knew we were going to go somewhere far away or something new.</p>

<!--more-->


<p><strong>T</strong>hat summer, a lot of things had happened that people couldn&#8217;t explain. There had been lights in the sky and stories in the paper about saucers crashing. John had come, and then he had gone. For a while, life went back to being life, and almost everyone forgot the things that that summer had brought with it from out of the sky.</p>

<p><strong>W</strong>hen you&#8217;re a kid, all you ever want is for the stories your mom reads you to be true. You think you can crawl inside the world that&#8217;s in every book and live in the pictures on every page, but deep down you know that this isn&#8217;t something that could ever happen. And it&#8217;s knowing that the magic isn&#8217;t quite there, that it&#8217;s just over the next hill or maybe in the next story, that makes you feel safe in your bed at night. You really wouldn&#8217;t want it to be any other way.</p>

<p><strong>T</strong>here are times when it seems like the whole world is afraid&#8230;when the fear is something you have to live with day in day out. When people get scared, they do a lot of different things. They fight, or they run, they destroy the thing they&#8217;re afraid of, or they put a lot of distance between it and them&#8230;make it something you can shoot at with a friction-action gun.</p>

<p><strong>M</strong>y father liked to say that there were these things in life that didn&#8217;t make any sense, and they could never make any sense, and if you were anywhere near smart, you knew that. But your job was not to give up, to keep on trying to make sense out of them anyway, trying to understand things that could never be understood. I guess maybe people will always find different names for their answers, but the one thing is, their questions will always be the same.</p>

<p><strong>C</strong>hristmas is all about hope. Kids hope for new toys. You get older, and the toys get bigger, but the hope stays the same. Some people might hope for peace on Earth or maybe for a better tomorrow, whatever their idea of that might be, but most people still just want something bright and shiny and new.</p>

<p><strong>W</strong>hy do people want so desperately not to be alone? Why is it more comforting to think you are being watched than to know that no one at all is watching? And why, really, does that make us any less alone? In the end, if there are others out there, then wouldn&#8217;t we be, all of us, still alone together?</p>

<p><strong>W</strong>hen you&#8217;re little, you like to think you know everything, but the last thing you really want is to know too much. What you really want is for grownups to make the world a safe place where dreams can come true and promises are never broken. And when you&#8217;re little, it doesn&#8217;t seem like a lot to ask.</p>

<p><strong>P</strong>eople believe what they want to believe. They find meaning where they can, and they cling to it. In the end, it really doesn&#8217;t matter what&#8217;s a trick and what&#8217;s true. What matters is that people believe.</p>

<p><strong>P</strong>eople like to examine the things that frighten them, to look at them and give them names, so saints look for God, and scientists look for evidence. They&#8217;re both just trying to take away the mystery, to take away the fear.</p>

<p><strong>W</strong>e all like to think that we have some control over the events in our lives, and a lot of the time we can fool ourselves into thinking that we really are in charge. But then something happens to remind us that the world runs by its own rules and not ours and that we&#8217;re just along for the ride.</p>

<p><strong>Y</strong>ou know in cartoons, the way someone can run off a cliff and they&#8217;re fine, they don&#8217;t fall until they look down? My mom always said that was the secret of life. Never look down. But it&#8217;s more than that. It&#8217;s not just about not looking. It&#8217;s about not ever realizing that you&#8217;re in the middle of the air and you don&#8217;t know how to fly.</p>

<p><strong>T</strong>he world is made up of the big things that happen and the small ones. And the part that&#8217;s so unfair is that we call them &#8220;big&#8221; and &#8220;small,&#8221; because when something happens to you, when you lose something or someone that you really care about, that&#8217;s all there is. The world may be blowing up around you, but you don&#8217;t care about that. You don&#8217;t care about that at all.</p>

<p><strong>I</strong> have this idea about why people do the terrible things they do. Same reason little kids push each other on the schoolyard. If you&#8217;re the one doing the pushing, then you&#8217;re not going to be the one who gets pushed. If you&#8217;re the monster, then nothing will be waiting in the shadows to jump out at you. It&#8217;s pretty simple, really. People do the terrible things they do because they&#8217;re sacred.</p>

<p><strong>W</strong>e&#8217;re all standing on the edge of a cliff, all the time, every day, a cliff we&#8217;re all going over. Our choice isn&#8217;t about that. Our choice is about whether we want to go kicking and screaming or whether we might want to open our eyes and our hearts to what happens once we start to fall.</p>

<p><strong>W</strong>hat makes us human? That we can think? That we can feel sorrow and pain? Maybe. That we can laugh? I hope so. We can hurt and we can laugh, and we know a past and a present, and in some ways a future. Maybe what makes us human is that we know just enough to think and know where we&#8217;re going.&#8221;</p>

<p><strong>I</strong> asked my dad once about his dad, my grandfather. I knew he&#8217;d had some hard times, but I didn&#8217;t know a lot more than that. I said to my dad &#8216;I guess maybe he was kind of lost&#8217;. &#8216;Not lost, really,&#8221; my dad said, &#8216;but for a while, he was definitely bewildered.</p>

<p><strong>I</strong> remember my mom telling me that she only went to church once, with her mother on Easter Sunday. When the minister said that the Kingdom of Heaven was within her, that scared her half to death. It meant it was all up to her. People want the comfort of strong arms. They look to the voices in their heads. To drugs. They look to the sky.</p>

<p>ever played tig tag toe with a chicken -Chad</p>

<div style="float:right">
<script type="text/javascript"><!--
google_ad_client = "ca-pub-6997921015773263";
/* git-post-body2 */
google_ad_slot = "9585845910";
google_ad_width = 468;
google_ad_height = 60;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>


<p><strong>W</strong>hen I was very little, my mother would read nursery rhymes to me. I always hated &#8220;Humpty Dumpty.&#8221; That&#8217;s a very scary poem. No one knows how to put it back together again—not all the king&#8217;s horses or all the king&#8217;s men. No one wants to think that there&#8217;s anything in the world that could fall apart that badly, but of course&#8230;anything can. I guess that&#8217;s what&#8217;s so scary about &#8220;Humpty Dumpty.&#8221;</p>

<p><strong>I</strong> had done what I could. I tried to make the soldiers think that their plan to use me as bait hadn&#8217;t worked, that I had been taken away. I thought that if I could make them believe that I was gone, then they wouldn&#8217;t bother me anymore and I could go back to who I used to be. But too much had happened to all us by then for anything to go back to how it was.</p>

<p><strong>P</strong>eople talk a lot as if the most important thing in life is to always see things for what they really are. But everything we do, every plan we make is kind of a lie. We&#8217;re closing our eyes and pretending the day won&#8217;t ever come when we won&#8217;t need to make any more plans. Hope is the biggest lie there is, and it is the best. You have to keep going as if it all mattered, or else we wouldn&#8217;t keep going at all.</p>

<p><strong>H</strong>ow do you let someone go? How do you understand that that&#8217;s alright, that everything changes? How do you find a way for that to make you feel good about life instead of breaking your heart? The hardest thing you&#8217;ll ever learn is how to say good-bye.</p>

<p><strong>T</strong>hey will be coming soon, coming to try to stop what was going to happen next. But maybe they could be stopped. Maybe something could happen that would make it hard for them to do what they wanted to do.</p>

<p><strong>I</strong> don&#8217;t know what will happen next. I don&#8217;t know what I&#8217;m going to be, what I&#8217;m going to learn, but what I do know is this—life, all life, is about asking questions, not about knowing answers. It is wanting to see what&#8217;s over the next hill that keeps us all going. We have to keep asking questions, wanting to understand. Even when we know we&#8217;ll never find the answers, we have to keep on asking the questions.</p>

<p><strong>M</strong>y mother always talked to me a lot about the sky. She liked to watch the clouds in the day and the stars at night&#8230;especially the stars. We would play a game sometimes, a game called &#8220;What&#8217;s Beyond the Sky?&#8221; We would imagine darkness or a blinding light or something else that we didn&#8217;t know how to name. But of course, that was just a game. There&#8217;s nothing beyond the sky. The sky just is, and it goes on and on, and we play all of our games beneath it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GoAgent -- Make your own fast proxy with GAE]]></title>
    <link href="http://mindon.github.com/blog/2012/02/29/goagent-make-your-own-fast-proxy-with-gae/"/>
    <updated>2012-02-29T23:44:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/02/29/goagent-make-your-own-fast-proxy-with-gae</id>
    <content type="html"><![CDATA[<p>在这个神奇的国家里，有很过好东西被阻止了，很多烂东西倒是放进来了。不想自己的大脑成为次品，还是要多学习新知识的，那就缺少不了Proxy这东西。</p>

<p>GoAgent 确实是个不错的东西，之前用过LocalProxy，总有些奇怪的原因导致不能用。最近在同事的微博看到了GoAgent，搭了一下，速度还真不错 :D</p>

<!--more-->


<p>我是装有GAE SDK的，自行上传App的，没有使用 GoAgent 提供的 uploader.bat。
这里简单记录一下用GAE（Google App Engine）搭建GoAgent Proxy的要点：
（最权威的指南还是去 <a href="http://code.google.com/p/goagent/">http://code.google.com/p/goagent/</a> 看最好了:p ）</p>

<ol>
<li>要装有Python2.7</li>
<li>GAE里建的APP要是新的才会支持 High Replication Datastore</li>
<li>设置 app.yaml 里的 appid</li>
</ol>


<p>配合 Chrome 的插件 <a href="https://chrome.google.com/webstore/detail/dpplabbmogkhghncfbfdeeokoefdjegm">Proxy SwitchySharp</a> 效果相当好，推荐！</p>

<p>最新GoAgent Snapshot 网址 <a href="http://repo.or.cz/w/goagent.git/">http://repo.or.cz/w/goagent.git/</a></p>
]]></content>
  </entry>
  
</feed>
