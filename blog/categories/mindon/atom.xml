<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mindon | Mindon.IDEA]]></title>
  <link href="http://mindon.github.com/blog/categories/mindon/atom.xml" rel="self"/>
  <link href="http://mindon.github.com/"/>
  <updated>2012-07-21T11:08:33+08:00</updated>
  <id>http://mindon.github.com/</id>
  <author>
    <name><![CDATA[Mindon Feng]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Most Terrible Thing]]></title>
    <link href="http://mindon.github.com/blog/2012/07/21/the-most-terrible-thing/"/>
    <updated>2012-07-21T09:32:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/07/21/the-most-terrible-thing</id>
    <content type="html"><![CDATA[<h2>最可怕的是什么？</h2>

<p>其实，知道是可怕的东西并不是最可怕的东西。让你以为是最安全，其实杀伤力最大的东西才是最可怕的。</p>

<p>现实里，比如一个人总看起来很凶，那么这个人并不可怕，因为你都能看到真实的情况。最可怕的人是表面上非常友善，内心里却是黑暗和扭曲的。</p>

<p>有一个词能非常清楚地对最可怕的东西做一个总结，那就是——<strong>幻象</strong>。</p>

<p>当你在高山峻岭间驾车时，看到了一条其实并不存在的路，……</p>

<p>当你站在楼顶边缘，却看到眼前是一片广阔草原，……</p>

<!--more-->


<p>美剧X-files（X档案）中有若干场景是主角持枪，看到眼前的异形怪物（而真实情况——那是自己最好的搭档），……</p>

<p>当在你眼里，老虎变成了小猫，……</p>

<p>当你在沙漠中追逐一个海市蜃楼的湖的时候，……</p>

<p>当你梦游把别人脑袋当西瓜的时候，……</p>

<p><strong>幻象</strong> 大多时候是极其危险的。于是，人类把幻象类的疾病称之为人格分裂，精神病……</p>

<p>有一种精神不正常的场景很常见：就是一个人在大街上自言自语。而今移动生活的时代，这种场景开始越来越多地出现在精神正常的人们身上，因为他们一边走路一边讲电话。—— 试想，如果这个人用蓝牙耳机，或科技再先进一点，使用的移动电话是植入人体里的，……</p>

<p>或许，那些自言自语的人们只不过在跟他们可以通话的对象说话，这些说话对象可能是幻象，或者想象力更丰富一点——是另外一个世界的，甚至是可以通过脑电波交流的外星人。（医学对精神失常的判别是绝对有严重问题的，正常人放到精神病院也会成为精神病，这个事情不用多做探讨——毕竟人类能给一切判断找到“非常合理”的解释。）</p>

<p>总之，<strong>幻象</strong> —— 是能令任何人想起来都从内心深处感觉到恐惧的东西，你还能想到比这个更可怕的吗？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solve NodeJS 0.8 Build Problem]]></title>
    <link href="http://mindon.github.com/blog/2012/07/20/solve-nodejs-0.8-build-problem/"/>
    <updated>2012-07-20T22:04:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/07/20/solve-nodejs-0.8-build-problem</id>
    <content type="html"><![CDATA[<p>NodeJS before 0.8 is very easy to make &amp; install, which only needs OpenSSL.</p>

<p>But when I tried to update my NodeJS to version 0.8+, problems keep coming...</p>

<p>Here's a few pre-conditions for a successful make of NodeJS v0.8+:</p>

<ol>
<li><p>GNU make 3.8.1+</p></li>
<li><p>Python 2.6 or 2.7</p></li>
<li><p>setenv FLOCK or export FLOCK</p></li>
</ol>


<p>setenv LINK g++ or export LINK=g++</p>

<p>Do remember check issues above when you meet problems building new version of NodeJS.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lost in the Tech Way]]></title>
    <link href="http://mindon.github.com/blog/2012/06/14/lost-in-the-tech-way/"/>
    <updated>2012-06-14T22:40:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/06/14/lost-in-the-tech-way</id>
    <content type="html"><![CDATA[<p>昨天察觉到的一件事情，在技术开发里可能也是比较容易出现的问题——技术迷失，特此分享和作为自我的警醒。</p>

<p>目标，使用 NodeJS 的 soap 模块，这个模块需要 node-expat 支持。在 windows 下这个模块是比较令人头疼的，虽然周末把这个问题解决了。但是我需要用的两个 WSDL API：登录验证和发邮件，却只调通了登录验证。另外一个用来发邮件提交的xml内容总是不如意，导致调用失败。node-soap模块这个github上的开源模块确实还存在太多问题，还不能处理稍微复杂一点的 WSDL。</p>

<p>因为时间原因，对soap也不太熟悉，想着——如果用这个模块不行，干脆改用 php 或 python，这个有现成的例子——于是，便尝试了一下php和python的调用。自然，API的调用很顺利，而且在 nodejs 调用 php 和 python 也不是什么麻烦的事情。可能大家觉得这样问题就解决了。</p>

<p>当然这个方案貌似没什么问题，能绕过node-soap模块的糟糕表现。可总不是自己想的那样直接用NodeJS处理。不过事情的转折出现在我找 python 例子的过程中：第一个例子是Google到的 suds 模块，用来处理 soap 的，表现不错，达到了效果。不过我却在内部知识分享平台找到了一个python封装好的现成py脚本，却没有用到任何额外模块！这让我感觉到了异常。</p>

<p>于是，大略看了一下另外部门同事分享的python脚本。突然觉醒——自己这些天都迷失在了技术中，而忘记了自己的目标是：成功调用并使用这两个 Web Service API。</p>

<p>这个python脚本是通过把需要提交的xml内容做成字符串模板形式，然后直接用 POST 提交，在HTTP头里指定 SOAPAction。这是针对具体 WSDL 调用的最直接的办法。我折腾了3天却没有想到，完全是脑子不会转弯，迷失在解决技术问题里了，而不是解决真正的问题。</p>

<p>醒了，自然不再需要node-soap，自然就不用管node-expat（虽然已经不是问题），于是按照这个python脚本的思路，花了1+个小时：写代码、封装调试、自测，把原来的登录验证改为新的调用方式。</p>

<p>问题解决了，可这个事情让不断在提“要牢记最终目标是什么”的我无法平静，这个警醒必须是深刻的 —— 切不能迷失在过程之中。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serve in Multi-Languages]]></title>
    <link href="http://mindon.github.com/blog/2012/06/12/serve-in-multi-languages/"/>
    <updated>2012-06-12T23:00:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/06/12/serve-in-multi-languages</id>
    <content type="html"><![CDATA[<p>When we want our product -- a webpage for example -- servered in multi-languages, what would we do?</p>

<p>Simple once working method is copy-n-translate:  Making a full copy of original language resource, translate and replace the texts. It's a hard and dirty work.</p>

<p>Unless a few simple pages, no one will do it in this way nowdays.</p>

<p>We like to use text-id and text resources in our projects: desktop applications, J2EE projects, php websites ...</p>

<p>But all of these are working in the same mode: Template + Text-Resources + Tool = Result</p>

<!--more-->


<p><img src="/images/blog/multi-langs.png" alt="" /></p>

<p>(pro: proposition, con: contradition)</p>

<h2>Template</h2>

<ul>
<li><strong>Raw language text as text-resource-id</strong></li>
</ul>


<p>pro: Readable, directly simple, no extra work but replacement. One language file is template itself.</p>

<p>con: Dirty work, if same text appears, you have to manual replace them all.</p>

<h1>q/s#: Could we make maual-process auto?</h1>

<ul>
<li><strong>Named ID as text-resource-id</strong></li>
</ul>


<p>pro: Avoid repeat work on same phrases or sentences.</p>

<p>con: Named IDs' management, unintuitive templates using named IDs.</p>

<h1>q/s#: Could we auto-generate the named IDs and avoid unintuitive templates?</h1>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build Node-Expat Under Windows]]></title>
    <link href="http://mindon.github.com/blog/2012/06/11/build-node-expat-under-windows/"/>
    <updated>2012-06-11T09:22:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/06/11/build-node-expat-under-windows</id>
    <content type="html"><![CDATA[<h2>Preparea Developemtn Environment</h2>

<p>To build node-expat module under windows, you need the nodejs addon development env ready.</p>

<ul>
<li><p>Get and install VC++ 2010 Express from microsoft: 【<a href="http://www.microsoft.com/visualstudio/en-us/products/2010-editions/visual-cpp-express">Download VC++ 2010 Express</a>】</p></li>
<li><p>Download and unzip the NodeJS source code from Joyent's github project: 【<a href="https://github.com/joyent/node">Download NodeJS source code</a>】</p></li>
<li><p>Get and install Python 2.7</p></li>
<li><p>Run <code>vcbuild.bat Release</code> under such as <strong>joyen-node/</strong> (where you unzip the source of nodejs) to build NodeJS.</p></li>
</ul>


<h2>Tools for building a NodeJS Module</h2>

<ul>
<li><p>Env variable set <strong>NODE_ROOT</strong>=<em>where-your-joyent-node-located</em></p></li>
<li><p>Check the <strong>tools/</strong> folder in the joyent-node/: file <strong>gyp_addon</strong>, and <strong>addon.gypi</strong> are needed.</p></li>
</ul>


<!--more-->


<p>if they are not exists, try get it from the latest tag from github of joyent-node ( Left of Files tab, find branch --> Tags ).</p>

<p>( You could use tools/<strong>gyp_node</strong> directly )</p>

<h2>Node-Expat Dependencis:</h2>

<ul>
<li><p>Install Expat under windows
<a href="http://sourceforge.net/projects/expat/files/latest/download">http://sourceforge.net/projects/expat/files/latest/download</a></p></li>
<li><p>Env variable set <strong>EXPAT_ROOT</strong>=<em>where-your-Expat-installed</em></p></li>
<li><p>Append the <strong>Bin/</strong> of Expat to <strong>PATH</strong> env.</p></li>
</ul>


<h2>Building Node-Expat:</h2>

<ul>
<li><p>Prepare <strong>build.gyp</strong> ( need to change D:/Expat to your expat root )</p>

<pre><code>{
  'variables' : {
    'target_arch': 'ia32'
  },
  'targets': [
    {
      'target_name': 'node-expat',
      'sources': [ 'node-expat.cc' ],
      'include_dirs': [
    'd:/Expat/Source/lib/'
      ],
      'libraries': [
    '-ld:/Expat/Bin/libexpat.lib'
      ]
    }
  ],
}
</code></pre></li>
<li><p>Run following commands</p></li>
</ul>


<p>to setup build version and msbuild tool env.</p>

<pre><code>@set Configuration=Release
"D:\Microsoft Visual Studio 10.0\VC\vcvarsall.bat"
</code></pre>

<p>then</p>

<pre><code>python d:\joyent-node\tools\gyp_addon build.gyp

msbuild build\build.sln
</code></pre>

<p>Now you should build the Node-Expat. But you may meet other problems:</p>

<h2>Testing</h2>

<p>if run node and require("./build/Release/node-expat") fail, it may be caused by following reasons:</p>

<p><strong>a)</strong>  check the node-expat.cc, and make sure there's a <strong>NODE_MODULE_EXPORT</strong> or <strong>NODE_EXTERN</strong> before the <em>void init</em></p>

<p>something like this: <code>extern "C" NODE_EXTERN void init(Handle&lt;Object&gt; target)</code></p>

<p><strong>b)</strong> if "unable to load shared library" error, try copy <strong>libexpat.dll</strong> to the folder of <strong>node.exe</strong> located.</p>

<ul>
<li> <strong>node test.js</strong></li>
</ul>


<p>if when you run <code>node test.js</code> of expat, it may fail. Then you need following code to fix it.</p>

<pre><code>char *toCString(v8::Local&lt;v8::Value&gt; value, const char *fallback = "") {
    if (value-&gt;IsString()) {
    v8::String::Utf8Value string(value);
    char *str = (char *) malloc(string.length() + 1);
    strcpy(str, *string);
    return str;
    }
    char *str = (char *) malloc(strlen(fallback) + 1);
    strcpy(str, fallback);
    return str;
}
</code></pre>

<p>add these code below <code>using namespace node;</code>.</p>

<p>then change the line around 155 before or 165 after code above added</p>

<pre><code>return XML_ParseBuffer(parser, len, isFinal) != XML_STATUS_ERROR;
</code></pre>

<p> into</p>

<pre><code>return XML_Parse(parser, toCString(&amp;str, ""), len, isFinal) != XML_STATUS_ERROR;
</code></pre>

<p>This patch could help to remove the error "<strong>not well-formed (invalid token)</strong>".</p>

<p>Now, your node-epxat under windows is ready for node-soap, you would need this for something like WSDL!</p>
]]></content>
  </entry>
  
</feed>
