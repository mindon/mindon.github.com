<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mindon | Mindon.IDEA]]></title>
  <link href="http://mindon.github.com/blog/categories/mindon/atom.xml" rel="self"/>
  <link href="http://mindon.github.com/"/>
  <updated>2014-04-02T21:27:43+08:00</updated>
  <id>http://mindon.github.com/</id>
  <author>
    <name><![CDATA[Mindon Feng]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Save Presentations Offline from Google Drive]]></title>
    <link href="http://mindon.github.com/blog/2014/04/02/save-g-docs-presentations-offline-from-google-drive/"/>
    <updated>2014-04-02T20:54:00+08:00</updated>
    <id>http://mindon.github.com/blog/2014/04/02/save-g-docs-presentations-offline-from-google-drive</id>
    <content type="html"><![CDATA[<p>I enjoy google docs, though it's not easy to visit google services from China.</p>

<p>Last week, i created a presentation on Google Drive through proxy. But how can i play the presentation without proxy?</p>

<p>Yes, Google Docs provides methods to download as PDF, PPTX or other image formates, but here's the fact:</p>

<ol>
<li><p>PDF, for reading only, cannot play.</p></li>
<li><p>PPTX, layout is not compatible fully, and fonts not embedded.</p></li>
<li><p>Images, view only, not playable.</p></li>
</ol>


<p>That's why I made the Chrome Extension <strong>GdPr Offline</strong>, which save the presentation as it is, totally playable offline.</p>

<p>The Chrome extension download link: <a href="https://chrome.google.com/webstore/detail/gdpr-offline/apghddnkhdhjdlmhkoagjenpcngbkdde">GdPr Offline</a></p>

<p><img src="https://lh4.googleusercontent.com/gpXPndg7VVXPgoWf5p9Jz8Bq35iKudS5QiPb4-8rrJ7afXQ9cK0yFVvR-X1QjVff5lU0uVO0ddg=s1280-h800-e365-rw" alt="" /></p>

<p>Now, enjoy your presentations anywhere, with or without network, with or without a proxy, inside or outside China :-)</p>

<p><i id="link-tags">Google Extension;Google Drive;Google Docs;PPTX</i></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Living Unit]]></title>
    <link href="http://mindon.github.com/blog/2014/04/01/living-unit/"/>
    <updated>2014-04-01T07:19:00+08:00</updated>
    <id>http://mindon.github.com/blog/2014/04/01/living-unit</id>
    <content type="html"><![CDATA[<p>这里说的Living Unit，原指个人，后发觉其实对于一个公司或者机构、组织也是如此。</p>

<p>活个体的构成从原始的单细胞生物，到人类个体，家庭，公司机构，并没有太大的区别，只是规模，资源和能力种类差异。</p>

<p>以下的胡思乱想均来自对个人能力思考的延伸。</p>

<p>任何一个活个体（Living Unit）构成为3个部分：1）<strong>自有资源</strong>；2）<strong>自有能力</strong>；3）<strong>关联场景</strong>。</p>

<h2>自有资源</h2>

<ul>
<li><p>物品</p></li>
<li><p>空间</p></li>
<li><p>介品 （如货币等）</p></li>
<li><p>本体</p></li>
</ul>


<!--more-->


<h2>自有能力</h2>

<ul>
<li><p>资源能力：拥有种类、数量，存储，运输，交换，整合。</p></li>
<li><p>知识（广度，深度，关联）</p></li>
<li><p>问题处理（发现，分析，解决）</p></li>
<li><p>沟通（表达，理解）</p></li>
<li><p>总结，预测</p></li>
<li><p>本体维持、升级</p></li>
</ul>


<h2>关联场景</h2>

<ul>
<li><p>创造培养关联的场景</p></li>
<li><p>维护和强化良性场景</p></li>
<li><p>关联资源</p></li>
<li><p>关联能力</p></li>
</ul>


<p><img src="/images/blog/asset-ability-connect.png" alt="" /></p>

<p>根据活个体的构成，其发展分为两方面：1）<strong>本体强化</strong>；2）<strong>关联强化</strong>。</p>

<h2>本体强化</h2>

<p><strong>学习</strong></p>

<ul>
<li><p>外部能力的复制，再造</p></li>
<li><p>外部实践中总结</p></li>
</ul>


<p><strong>实践</strong></p>

<ul>
<li>根据资源和能力输出的反馈对本体进行修正和调整</li>
</ul>


<h2>关联强化</h2>

<p><strong>建立关联</strong></p>

<ul>
<li><p>通过本体输出创建关联场景</p></li>
<li><p>接入外部关联场景</p></li>
</ul>


<p><strong>维护关联</strong></p>

<ul>
<li>保持关联场景的良性状态</li>
</ul>


<p><strong>强化关联</strong></p>

<ul>
<li>吸引更多连接接入已有关联场景</li>
</ul>


<p><strong>关联输入</strong></p>

<ul>
<li>从关联及输出中增强自有资源/自有能力的拥有量。</li>
</ul>


<p>不管是对于个人或者机构组织，或者是简单的生物个体，其在环境中生存和发展都必须具备条件。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Wear]]></title>
    <link href="http://mindon.github.com/blog/2014/03/20/android-wearable-sdk/"/>
    <updated>2014-03-20T22:31:00+08:00</updated>
    <id>http://mindon.github.com/blog/2014/03/20/android-wearable-sdk</id>
    <content type="html"><![CDATA[<p><a href="http://developer.android.com/wear/">Android Wear</a> SDK makes Android apps connected with wearable devices. The <a href="http://moto360.motorola.com/">Moto 360</a> is coming.</p>

<p>First, <a href="http://developer.android.com/wear/preview/start.html">Sign Up</a> for the Developer Preview.</p>

<p>You could joining the <a href="http://g.co/androidweardev">Android Wear Developers</a> Google+ Community.</p>

<p>Then, you will get an email providing link of example and <a href="https://play.google.com/apps/testing/com.google.android.wearablepreview.app">Android Wear Preview App</a></p>

<!--more-->


<p>Third, you need to download <a href="https://developer.android.com/sdk/">Android SDK</a> and start the emulator for Android Wear, one is Round, another is Square both 1.7'.</p>

<p>Connect the wear emulator with the Android Wear Preview app, then your android device notifications will be shown in the emulator screen.</p>

<blockquote><p> Android Wear extends the Android platform to a new generation of wearable devices.</p>

<p> Small, powerful devices, worn on the body. Useful information when you need it most. Intelligent answers to spoken questions. Tools to help reach fitness goals. Your key to a multiscreen world.</p></blockquote>

<p>There's a <a href="www.androidpolice.com/2014/03/19/apk-teardown-download-you-can-try-the-android-wear-launcher-on-your-device-now-heres-whats-inside/">wear launcher</a> about 3.8MB,</p>

<p>and another Wear Preview App apk (named Android_Wear_Beta.apk, 600+KB) for those incompatible andriod devices.</p>

<blockquote><p> The Android Wear Preview app is compatible with Android 4.3 and higher and is not available for the Android emulator.</p></blockquote>

<p><span id="link-tags">Android Wear Preview;Wear Preview App apk</span></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A false linkable text sample]]></title>
    <link href="http://mindon.github.com/blog/2014/03/20/a-false-linkable-text-sample/"/>
    <updated>2014-03-20T05:08:00+08:00</updated>
    <id>http://mindon.github.com/blog/2014/03/20/a-false-linkable-text-sample</id>
    <content type="html"><![CDATA[<p>I found a link in a Google+ post failed to be opened someday. It's awkful, right? It's on Google+! The Google - who leads the web tech.</p>

<p>Then I confirmed the same false link sample showing up in BlackBerry 10.</p>

<p>I've double checked it in my WeChat under Android - it's there too. But not in the WeChat for BlackBerry 10.</p>

<!--more-->


<p>The false link sample is like this:</p>

<p><strong>(http://mindon.github.io?testing)...something-else</strong></p>

<p>Here's a snapshot from Google+</p>

<p><img src="/images/blog/false-link.jpg" alt="" /></p>

<p>The case is showing up almost everywhere - we are using the same library to detect links.</p>

<p>Our test team and I could not accept this result in WeChat for BlackBerry 10, then here comes my customized linkable text detecting code in JavaScript.</p>

<script src="https://gist.github.com/mindon/9317393.js"></script>


<p>It helps to avoid this issue and provides you the customized possibility.</p>

<p><span id="link-tags">WeChat;BlackBerry 10;Google+</span></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A callstack trace for QML js]]></title>
    <link href="http://mindon.github.com/blog/2014/03/20/a-callstack-trace-for-qml-js/"/>
    <updated>2014-03-20T05:02:00+08:00</updated>
    <id>http://mindon.github.com/blog/2014/03/20/a-callstack-trace-for-qml-js</id>
    <content type="html"><![CDATA[<p>QNX RTOS is a awesome OS. That's where BlackBerry 10 comes from.</p>

<p>The last year (2013), we'd spent lots of time on the WeChat for BlackBerry 10.</p>

<p>QML tech is good for an mobile app UI, using JavaScript. And there's no <code>console.trace()</code> in QML to trace the callstacks, here's mine:</p>

<!--more-->




<script src="https://gist.github.com/mindon/9524222.js"></script>


<p><span id="link-tags">RTOS;BlackBerry 10;QML</span></p>
]]></content>
  </entry>
  
</feed>
