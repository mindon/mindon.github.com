<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mindon | Mindon.IDEA]]></title>
  <link href="http://mindon.github.com/blog/categories/mindon/atom.xml" rel="self"/>
  <link href="http://mindon.github.com/"/>
  <updated>2013-01-20T20:43:16+08:00</updated>
  <id>http://mindon.github.com/</id>
  <author>
    <name><![CDATA[Mindon Feng]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ingress! Ingress! Design and Develop A Chrome Extension - Ingress Portals]]></title>
    <link href="http://mindon.github.com/blog/2013/01/19/ingress-ingress-design-and-develop-a-chrome-extension-ingress-portals/"/>
    <updated>2013-01-19T14:46:00+08:00</updated>
    <id>http://mindon.github.com/blog/2013/01/19/ingress-ingress-design-and-develop-a-chrome-extension-ingress-portals</id>
    <content type="html"><![CDATA[<p>The game Ingress is spreading around the world.</p>

<p><a href="https://chrome.google.com/webstore/detail/ingress-portals/pglalnoakjpjaaobdjabdkedimkdnegk">Ingress Portals</a> helps us to find local portals around us.</p>

<p>It helps a lot especially for newbies of Ingress to find an zero level portal.</p>

<p>The idea to develop such an extension for Ingress comes from another extension "<a href="https://chrome.google.com/webstore/detail/ingress-hk-portal-list/pmeaadpkjfcepcokljbbbolckdejopcf">Ingress: HK Portal List</a>" -- developed by <a href="http://http//blog.shawtim.com/">Shawtim</a>. Someone in a QQ group wanted to change it to apply to Shenzhen area.</p>

<p>I made some improvement in this totally re-design and develop extension.</p>

<ol>
<li><p>Simpler UI and faster start-speed;</p></li>
<li><p>Area select from an embedded Google Map;</p></li>
<li><p>Easy view for Level, Energy, Links and Mods;</p></li>
<li><p>Cache same query in 5 minutes;</p></li>
<li><p>Locate portals with an embedded Google Map;</p></li>
<li><p>Help to find zero level portals;</p></li>
<li><p>Show all portals in a single large Google Map;</p></li>
<li><p>Usage leading page.</p></li>
</ol>


<!--more-->


<p>When you click the extension icon:</p>

<pre><code>if (NOT in ingress.com) then

    return showing about and usage message.

end if

if (Cached) then

    return get cache data and show results

end if

Show querying spin.

Submit query.

if (No Auth) then

    return Show no auth message

end if

if (Failed) then

    return Show failed message

end if


Cache result

Show result through template


:: JS template engine in a sandbox iframe;

:: Google Map shows in a sandbox iframe;

:: Using postMessage communicate between the sandbox iframe and the extension.
</code></pre>

<p>The extension spread from a Chinese Ingress QQ group, then to a community in Google+.</p>

<p>First 2 days, 186 installation. and yesterday the installation reached 865, 143 G+ and 10 reviews in Chrome Web Store.</p>

<p>It's amazing that someone outside there likes your app and appreciates your work.</p>

<p><img src="/images/blog/chrome/find-ingress-portals.png" alt="" /></p>

<p>The Chrome Extension: <a href="https://chrome.google.com/webstore/detail/ingress-portals/pglalnoakjpjaaobdjabdkedimkdnegk">Ingress Portals</a></p>

<p><i id="link-tags">Ingress;Chrome Extesion;QQ;Google Map</i></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Design T-Shirts on Teespring]]></title>
    <link href="http://mindon.github.com/blog/2013/01/19/design-t-shirts-on-teespring/"/>
    <updated>2013-01-19T14:44:00+08:00</updated>
    <id>http://mindon.github.com/blog/2013/01/19/design-t-shirts-on-teespring</id>
    <content type="html"><![CDATA[<p>Teespring是个特别的众筹网站。它个一般众筹网站不同的地方是它是一个T-Shirt设计的众筹，这也就意味着用户只需要提供设计稿和定价，剩下的事情都是网站运营方的了——如果购买的人数达到指定数目，运营方来印刷和发货。</p>

<p>这种模式有点类似常规众筹网站和团购网的结合体。有众筹的特点，也有团购的便利。</p>

<p>这对想玩一下T恤设计的我来说，是个挺有意思的事情——不管能否真的众筹成功，至少能让我过一下T恤设计的瘾。</p>

<p><a href="http://teespring.com/mindon">http://teespring.com/mindon</a></p>

<p><img src="/images/blog/t-mindon.png" alt="" /></p>

<!--more-->


<p>T-Shirts for Ingress Players:</p>

<p><a href="http://teespring.com/ingress">General</a>, <a href="http://teespring.com/ingress-enlightened">Enlightened</a>, <a href="http://teespring.com/ingress-resistance">Resistance</a></p>

<p>Here's another one "2013"</p>

<p><a href="http://teespring.com/cc-2013">http://teespring.com/cc-2013</a></p>

<p><img src="/images/blog/t-cc-2013.png" alt="" /></p>

<p>To share T-shirts on <strong>Teespring.com</strong>, I develop a Chrome Extension - "Tee Share" to get both sides of the T-shirt together, and combin it with its name and URL :-)</p>

<p><a href="https://chrome.google.com/webstore/detail/tee-share/flljbdpjfdnbehijbekgkcodgmmcgofa?hl=en-US">Get "Tee Share"</a></p>

<p><img src="/images/blog/chrome/tee-share.png" alt="" /></p>

<p><i id="link-tags">Chrome Extension;TeeSpring;Ingress</i></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning GO language]]></title>
    <link href="http://mindon.github.com/blog/2013/01/19/learning-go-language/"/>
    <updated>2013-01-19T14:14:00+08:00</updated>
    <id>http://mindon.github.com/blog/2013/01/19/learning-go-language</id>
    <content type="html"><![CDATA[<p>Go语言几年前（2009）就出来了，喜欢其设计理念：简单、并行、实用和高效。</p>

<p>因为大多数时间都作为Web前端跟javascript较劲的工程师，对Go的了解并不多。这两年倒是一直在关注Node.JS。</p>

<p>Node.JS作为Web实时数据服务是非常不错的选择，曾用来做了好几个试验性质的产品，一个翻译平台（荒置中，新版正在用业余时间开发），一个支持多语言的反馈平台（在线），一个任意网站嵌入式的Web聊天平台（下线），一个推送微信官方消息的系统（闲置）。</p>

<p>Node.JS用来做产品原型，或者SDK工具等工具类，是再适合不过了。Blackberry 10的WebWorks SDK里就用了Node.JS作为辅助工具。</p>

<p>目前为止Node.JS还是我最喜欢的技术。然而，作为后台服务语言，其实Node.JS能做到的，大多其它语言也可以做得更好，除了Node.JS可以和前端使用同样的js库之外。Go这时重新进入了我的视野，也成为了新的学习任务。</p>

<p>“Go is an expressive, concurrent, garbage-collected programming language.”</p>

<p>官方网站 <a href="http://golang.org">Go official website</a> 不知道什么原因被列入了和谐名单（因为用的是Google的服务器吗？） 大家可以访问 <a href="https://code.google.com/p/go/">https://code.google.com/p/go/</a> 至少偶尔能访问一下。要不就得翻墙了。</p>

<p>在这主要是想分享一下配置Go project时候的碰到的一个问题的解决办法（under windows）：</p>

<!--more-->


<p>GO project Windows env. settings:</p>

<h2>set-env.bat content</h2>

<pre><code>set GOPATH=f:\labs\go-learn\mindon
set GOBIN=%GOPATH%\bin
set PATH=%PATH%;%GOBIN%
</code></pre>

<ol>
<li><p>configure your project path as GOPATH</p></li>
<li><p>run set-env.bat in your DOS console</p></li>
<li><p>go install</p></li>
</ol>


<p>These settings will eliminate the errors "can't load package" under Windows.</p>

<p>另外一个是编译Go本身时候碰到的问题</p>

<p>When building #Go under Windows, got following error:</p>

<pre><code>cmd/dist/windows.c:119: warning: dereferencing type-punned pointer will break strict-aliasing rules
</code></pre>

<p>update the windows.c line 119</p>

<pre><code>(Rune*)&amp;r --&gt; (Rune*)r
</code></pre>

<p>then run all.bat :-) works fine!</p>

<p><i id="link-tags">GO;Node.JS;Blackberry 10</i></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Start DOS Console Minimized]]></title>
    <link href="http://mindon.github.com/blog/2013/01/17/start-dos-console-minimized/"/>
    <updated>2013-01-17T07:59:00+08:00</updated>
    <id>http://mindon.github.com/blog/2013/01/17/start-dos-console-minimized</id>
    <content type="html"><![CDATA[<p>How to start an DOS console window minimized? (for an .bat or .cmd file) Here comes the code</p>

<pre><code>@echo off

if "%1"=="start-min" goto :begin
start /min "" %0 start-min
exit

:begin
title Hello Mini World

echo Call something here

pause
exit
@echo on
</code></pre>

<p>这大概就是最直接，简单无需额外工具启动windows console并将其最小化的批处理脚本吧 :-p 非原创，网上捡来的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Era of Hardware Browsers]]></title>
    <link href="http://mindon.github.com/blog/2013/01/06/era-of-hardware-browsers/"/>
    <updated>2013-01-06T23:27:00+08:00</updated>
    <id>http://mindon.github.com/blog/2013/01/06/era-of-hardware-browsers</id>
    <content type="html"><![CDATA[<p>Years ago, I took all desktop apps as some specific browsers - only visiting specified data resources provided by IP or file path with fixed UIs. and the browsers load different function DLLs or SO(Share Object) by URL, which contains both data and runnable source code.</p>

<p>Now days, The "Browsers" become hardware -- the mobiles and tablets. The apps are modules of the super "Hardware Browser", they are combining the local resources, remote resources provided by IPs or URLs. Traditional browser become a soft-module of the super "Hardware Browser".</p>

<p>The mobile "Hardware Browser" never be parasitic on an PC any more, it takes less time to start, and cost less energy to perform the same or even more powerful functions.</p>

<p>And the "Hardware Browser" is facing the same compatible problems as the "Software Browser" on PC. They own different screen resolutions, powered by different OS.</p>

<p>That means the mobile app developers are in the same situation as the web front-end developers are. They are working for the mobile "Hardware Browser".</p>

<p><i id="link-tags">Hardware Browser</i></p>
]]></content>
  </entry>
  
</feed>
