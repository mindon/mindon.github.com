<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Web-Tech | Mindon.IDEA]]></title>
  <link href="http://mindon.github.com/blog/categories/web-tech/atom.xml" rel="self"/>
  <link href="http://mindon.github.com/"/>
  <updated>2012-03-27T20:39:35+08:00</updated>
  <id>http://mindon.github.com/</id>
  <author>
    <name><![CDATA[Mindon Feng]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Amazing WebGL and HTML5 Apps]]></title>
    <link href="http://mindon.github.com/blog/2012/03/26/amazing-webgl-and-html5-apps/"/>
    <updated>2012-03-26T22:13:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/03/26/amazing-webgl-and-html5-apps</id>
    <content type="html"><![CDATA[<ul>
<li><strong>Cell Cycle</strong>
Creating 3d-printable cellular models.</li>
</ul>


<p>You can shape, twist, and subdivide, transforming a simple mesh to a complex patterned structure.</p>

<p><img src="/images/blog/chrome/nervous.png" alt="" />
Visit: <a href="http://www.chromeexperiments.com/detail/cell-cycle/">Chrome Experiments</a> | <a href="http://n-e-r-v-o-u-s.com/">Nervous System</a></p>

<ul>
<li><strong>Fluid Simulation with Turing Patterns</strong>
Author: <strong>Felix Woitzel</strong> <a href="http://www.cake23.de">http://www.cake23.de</a></li>
</ul>


<p>This demo is built on the Reaction-Diffusion template from the WebGL playground and Evgeny Demidov's fluid simulation.</p>

<p><img src="/images/blog/chrome/fluid.png" alt="" />
Visit: <a href="http://www.chromeexperiments.com/detail/fluid-simulation-with-turing-patterns/">Chrome Experiments</a></p>

<!--more-->


<ul>
<li><strong>Zygote Body</strong>
Author: <strong>Zygote</strong> <a href="http://www.zygote.com/">http://www.zygote.com/</a></li>
</ul>


<p>Explore a detailed 3D model of the human body. Zygote Body uses WebGL and taps directly into the GPU to accelerate rendering of 3D scenes. Take it for a spin and learn about different layers of anatomy by moving the slider or toggling layers on and off with the buttons. Not sure where something is? Try the search box</p>

<p><img src="/images/blog/chrome/body.png" alt="" />
Visit: <a href="http://www.chromeexperiments.com/detail/body-browser/">Chrome Experiments</a></p>

<ul>
<li><strong>Google Maps - Street View</strong></li>
</ul>


<p>Google Maps with Street View lets you explore places around the world through 360-degree street-level imagery. You can check out restaurants, plan your next trip or even visit the Amazon!</p>

<p><img src="/images/blog/chrome/amazon.jpg" alt="" />
Visit: <a href="http://maps.google.com/help/maps/streetview/gallery.html">Street View Gallery</a></p>

<p>More will be appended ...</p>

<h2>How to get WebGL enable?</h2>

<ul>
<li><strong>Firefox</strong>
WebGL is supported in <a href="http://www.mozilla.com/en-US/firefox/new/">Firefox/4.0</a></li>
</ul>


<p>For testing/debugging purposes, software rendering can be used through OSMesa (off-screen Mesa), by setting the "webgl.osmesalib" variable to point to the OSMesa shared library (typically /usr/lib/libOSMesa.so). Note that the OSMesa library is required to use "gl" prefixes, not "mgl".
You can also try setting the "webgl.force-enabled" variable to true if WebGL is not working. Variables can be accessed by typing "about:config" in the address bar.</p>

<ul>
<li><strong>Safari</strong></li>
</ul>


<p>WebGL is supported on Mac OS X 10.6 in the <a href="http://nightly.webkit.org/">WebKit nightly builds</a>.</p>

<p>After downloading and installing the browser, open the Terminal and type the following:</p>

<pre><code>defaults write com.apple.Safari WebKitWebGLEnabled -bool YES
</code></pre>

<p>This command only needs to be run once. All future invocations of the browser will run with WebGL enabled.</p>

<ul>
<li><strong>Chrome</strong></li>
</ul>


<p>WebGL is available in the <a href="http://www.google.com/chrome/">stable release of Chrome</a>.</p>

<p>Please report issues you find to either the <a href="https://www.khronos.org/webgl/public-mailing-list/">public WebGL mailing list</a> or via the <a href="http://code.google.com/p/chromium/issues/list">Chromium issue tracker</a>.</p>

<p>Enable WebGL in Chrome - <a href="about:flags">about:flags</a></p>

<p><a href="http://commondatastorage.googleapis.com/chromium-browser-continuous/index.html?path=Win/">Chrome Nightly Build</a></p>

<ul>
<li><strong>Opera</strong></li>
</ul>


<p>WebGL is supported in <a href="http://www.opera.com/browser/next/">Opera 12 alpha</a>.</p>

<p><a href="http://www.khronos.org/webgl/wiki/Getting_a_WebGL_Implementation">Getting a WebGL Implementation</a></p>

<p><a href="http://wjlgryx.iteye.com/blog/973961">开启WebGL!</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Start a NodeJS addon under windows]]></title>
    <link href="http://mindon.github.com/blog/2012/03/24/start-a-nodejs-addon-under-windows/"/>
    <updated>2012-03-24T12:15:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/03/24/start-a-nodejs-addon-under-windows</id>
    <content type="html"><![CDATA[<h2>Code &amp; tools preparation</h2>

<p><strong>NodeJS source code</strong>
<a href="https://github.com/joyent/node">https://github.com/joyent/node</a></p>

<p><strong>VISUAL C++ 2010 EXPRESS</strong>
Free tools to create applications on Windows using Visual C++.
(Needs SP3 under winxp)</p>

<p><a href="http://www.microsoft.com/visualstudio/en-us/products/2010-editions/visual-cpp-express">Download VC++ 2010 EXPRESS</a></p>

<p><strong>Python 2.6 or 2.7</strong>
<a href="http://www.python.org/download/">http://www.python.org/download/</a></p>

<h2>Compile your NodeJS</h2>

<p>Run vcbuild.bat under NodeJS source folder.</p>

<h2>Compile the Hello-world</h2>

<p><strong>General Steps also fit for other addons</strong></p>

<!--more-->


<p>Get into folder test\addons\hello-world\ of NodeJS source</p>

<p>1, <strong>Edit binding.cc</strong></p>

<p>Add <strong>NODE_MODULE_EXPORT</strong> before <strong>void init</strong>
or Add <strong>NODE_EXTERN</strong> between <strong>void</strong> and <strong>init</strong></p>

<p>This could help avoid running "Unkown error" when require the addon in nodejs.</p>

<p>2, <strong>Generate project files</strong></p>

<pre><code>set NODE_ROOT=your-node-js-src-root 
python %NODE_ROOT%\tools\gyp_addon binding.gyp
</code></pre>

<p>3, <strong>Setup VC ENV variables</strong></p>

<p>Run</p>

<pre><code>"D:\Microsoft Visual Studio 10.0\VC\vcvarsall.bat"
</code></pre>

<p>4, <strong>Build</strong></p>

<pre><code>@set Configuration=Release
</code></pre>

<p>5, <strong>Test</strong></p>

<pre><code>node
require('./Release/binding')
</code></pre>

<h2>Compile node-expat</h2>

<ol>
<li><p>Install Expat under windows
<a href="http://sourceforge.net/projects/expat/files/latest/download">http://sourceforge.net/projects/expat/files/latest/download</a></p></li>
<li><p>Prepare GYP build file</p></li>
</ol>


<pre><code>{
  'targets': [
    {
      'target_name': 'node-expat',
      'sources': [ 'node-expat.cc' ],
      'include_dirs': [ 'expat-install-folder/Source/lib' ],
      'libraries': [ '-lexpat-install-folder/Bin/libexpat.lib'  ],
    }
  ]
}
</code></pre>

<h2>Compile node-xmpp</h2>

<ol>
<li><p>ICU unicode
<a href="http://site.icu-project.org/download/48">http://site.icu-project.org/download/48</a></p></li>
<li><p>node-stringprep windows version
<a href="https://github.com/andreasbotsikas/node-stringprep/tree/windows-build">https://github.com/andreasbotsikas/node-stringprep/tree/windows-build</a></p></li>
<li><p>node-xmpp</p></li>
</ol>


<p><a href="https://github.com/astro/node-xmpp">https://github.com/astro/node-xmpp</a></p>

<p><a href="http://www.adarshr.com/papers/xmpp">http://www.adarshr.com/papers/xmpp</a></p>

<h2>Reference</h2>

<ul>
<li><p><strong>Addons NodeJS document</strong>
<a href="http://nodejs.org/docs/latest/api/addons.html">http://nodejs.org/docs/latest/api/addons.html</a></p></li>
<li><p><strong>Windows上编译NodeJS native extension</strong>
<a href="http://cnodejs.org/topic/4f1fa3ed817ae4105c040fb4">http://cnodejs.org/topic/4f1fa3ed817ae4105c040fb4</a></p></li>
<li><p><strong>Building a Node.js Windows C/C++ Addon</strong>
<a href="http://coderesearchlabs.com/articles/BNWCA.pdf">http://coderesearchlabs.com/articles/BNWCA.pdf</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to write a mail in HTML]]></title>
    <link href="http://mindon.github.com/blog/2012/03/24/how-to-write-a-mail-in-html/"/>
    <updated>2012-03-24T12:07:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/03/24/how-to-write-a-mail-in-html</id>
    <content type="html"><![CDATA[<h2>编写原则：</h2>

<ol>
<li><p>全局规则之一，不要写<code>&lt;style&gt;</code>标签、不要写class，所有CSS都用style属性，什么元素需要什么样式就用style写内联的CSS。</p></li>
<li><p>全局规则之二，少用图片，邮箱不会过滤你的img标签，但是系统往往会默认不载入陌生来信的图片，如果用了很多图片的邮件，在片没有载入的情况下，丑陋无比甚至看不清内容，没耐心的用户直接就删除了。图片上务必加上alt。</p></li>
<li><p>不要在style里面写float、position这些style，因为会被过滤。那么如何实现左右布局或者更复杂的布局呢？用table。</p></li>
<li><p>style内容里面background可以设置color，但是img会被过滤，就是说不能通过CSS来设置背景图片了。但是有一个很有意思的元素属性，也叫background，里面可以定义一个图片路径，这是个不错的替代方案，虽然这样功能有限，比如无法定位背景图片了，有总比没有好。例如要给一个单元格加一个背景，必须这样写：
<code>&lt;td background=”http://image1.koubei.com/images/common/logo_koubei.gif”&gt;&lt;/td&gt;</code></p></li>
<li>div模式的邮箱不支持flash，iframe模式的有待验证。</li>
</ol>


<!--more-->


<p>最后提一句，sohu的邮箱很怪异，会在每个文本段后面加一个空格，导致原本正常的排版一行放不下而换行，从而使某些布局错乱。所以，如果你要兼容sohu邮箱的话，遇到一些紧凑的布局就要格外小心了，尽量减少文本段的数量，留足宽度。</p>

<p>邮件模板，请严格按照下面的规则执行。邮件客户端和Web页面的需求不同，在编写代码的时候，考虑的方向也不一样。</p>

<h2>!Doctype声明 </h2>

<p>为了向前兼容和避免某些浏览器的怪癖，使用html5的!doctype声明，格式如下：
<code>&lt;!DOCTYPE HTML&gt;</code></p>

<h2>原则，及思维出发点 </h2>

<ol>
<li><p>不需要考虑DOM节点的精简和结构的优化。
以完成设计样式为最优先。必要时，不必吝啬使用表格嵌套，不必吝啬使用空的表格元素来占据空间。</p></li>
<li><p>宁可冗余，也不可缺少必要定义。</p></li>
<li><p>充分利用表格的私有属性来布局。width, height, bgcolor, background, align, valign等</p></li>
<li><p>可替代性：
在编写html的时候，请思考当你页面的所有图片都被屏蔽时，是否用户还能了解页面的主要内容。
请务必在所有要设置背景图片的元素上，定义背景颜色。</p></li>
<li><p>可利用Dreamweaver等工具来协助编写html，但切记，一定要时候做好每行代码的检查。</p></li>
</ol>


<h2>Mackup </h2>

<ol>
<li><p>主体页面，包括细节处理，尽量使用<code>&lt;table&gt;</code>布局。</p></li>
<li><p>不允许在<code>&lt;tr&gt;</code>元素上定义CSS样式，请将样式尽量定义在<code>&lt;td&gt;</code>元素上。（Gmail等邮件客户端会过滤<code>&lt;tr&gt;</code>上的属性）</p></li>
<li><p>禁止使用<code>&lt;style type=”text/css”&gt;&lt;/code&lt;来处理主要样式，所有的Web邮件系统都会过滤该标签。因此邮件模板中不能使用伪类（pseudo class）和伪元素（pseudo elements），以及高级选择符。</p></li>
</ol>


<p>但是，我们仍然可以使用<code>&lt;style&gt;</code>来提升一些比较先进的邮件PC客户端的体验，比如伪类。</p>

<p>必须使用表格和元素样式来完成所有基本样式和布局。</p>

<ol>
<li><p>禁止使用<code>&lt;link&gt;</code>来加载外联CSS</p></li>
<li><p>可以使用<code>&lt;div&gt;</code>来实现细节的，具有典型块级元素(block)的布局样式。而尽量避免使用<code>&lt;p&gt;</code>，因为我们不容易清除<code>&lt;p&gt;</code>在不同浏览器的默认样式</p></li>
<li><p>注意定义图片的替换文字（alt），及替换文字的颜色。</p></li>
</ol>


<h2>样式 </h2>

<ul>
<li><p> 文字的处理。
font-* 族的CSS属性不允许使用缩写，请分别定义 font-size, font-weight, line-height, font-family(font-family有可能被过滤)</p></li>
<li><p> 继承性
注意表格不会继承外部的font等属性，请务必，在每个<code>&lt;td&gt;</code>元素上都定义字体属性和颜色。</p></li>
<li><p> 背景的处理
不允许使用style=”background:url(http://…)”，请使用<code>&lt;td&gt;</code>的属性(attribute) background=“http://…”。（由于CSS背景图片是一种会影响页面渲染速度的定义，因此大多数Web邮件系统会过滤它。）</p></li>
</ul>


<p>背景颜色，也请使用表格的bgcolor属性。</p>

<ul>
<li><p> 对于复杂样式的处理，可以大胆地、大块地切图。</p></li>
<li><p> 避免尝试让两个table-cell的元素对齐，如果, 一个元素是用具体的宽度定义（width=”100″），另一个元素是用百分比来定位( width=”50%”)</p></li>
<li><p> 避免使用list-style来处理列表样式，请使用 “ &#8226; ” 字符来替代。</p></li>
<li><p> 避免使用<code>&lt;img&gt;</code>元素拼接的方式，来实现背景大图的分割，尽量使用表格的background</p></li>
</ul>


<p>我们知道，在<code>&lt;img&gt;</code>元素下4px空白的问题。</p>

<p>禁用的，和不建议使用的CSS样式（见参考文献1）</p>

<p>这些样式，大都是可能引起元素偏移到容器外的样式</p>

<p>禁止使用 position, background, float</p>

<h2>特别说明： </h2>

<p>margin: margin的使用要非常谨慎，不允许使用margin作为重要的布局依据，不允许使用负margin，避免使用非零和非auto的margin属性。</p>

<h2>常见问题 </h2>

<ul>
<li> 如何让邮件在Gmail等Web页面中居中
有几种方式：</li>
</ul>


<p>a> 在 body上定义style=”width:apx; margin:auto”。注意，在Web邮件中，会自动为你生成一个<code>&lt;div style=”width:apx; margin:auto”&gt;&lt;/code&gt; 的元素在最外层。(可以有效利用这一特性，定义背景颜色等样式，和实现其他可能的事情)</p>

<p>而不要尝试自己在邮件模板最外层添加一个带有margin:auto的<code>&lt;div&gt;</code>元素。</p>

<p>b> 使用<code>&lt;center&gt;</code></p>

<ul>
<li> 如何在邮件的布局中占据空白
请使用空白的<code>&lt;td&gt;</code>元素，设置height属性来起到站位的作用。</li>
</ul>


<p>origin from <a href="http://user.qzone.qq.com/21195254/blog/1296205414">http://user.qzone.qq.com/21195254/blog/1296205414</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Magic Code Switching Comment Syntax]]></title>
    <link href="http://mindon.github.com/blog/2012/03/22/magic-code-switching-comment-syntax/"/>
    <updated>2012-03-22T23:58:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/03/22/magic-code-switching-comment-syntax</id>
    <content type="html"><![CDATA[<p>This a kind of c-style code comments to switch two blocks of code for debug or testing.</p>

<pre><code>/*/
  //... Section A (commented)
/*/
  //... Section B (working)
//*/
</code></pre>

<p>By adding one single / at the beginning, it turns into:</p>

<pre><code>//*/
  //... Section A (working)
/*/
  //... Section B (commented)
//*/
</code></pre>

<p>Another simple section comment:</p>

<pre><code>//*/
  //... working
//*/
</code></pre>

<p>remove a single / at the beginning, it turns into:</p>

<pre><code>/*/
  //... commented
//*/
</code></pre>

<ul>
<li><p>Curiosity</p></li>
<li><p>Passion</p></li>
<li><p>Focus</p></li>
<li><p>Fun</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript Micro-Templating]]></title>
    <link href="http://mindon.github.com/blog/2012/03/21/javascript-micro-templating/"/>
    <updated>2012-03-21T10:52:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/03/21/javascript-micro-templating</id>
    <content type="html"><![CDATA[<p>This is a modification version of <strong>John Resig</strong>'s <a href="http://ejohn.org/blog/javascript-micro-templating/">Javascript Micro-Templating</a></p>

<p>The modifications are mostly about filters for field values.</p>

<p>I like this javascript mico-templating code from <a href="http://ejohn.org/"><strong>John Resig</strong></a>, it's really simple, easy-to-use.</p>

<blockquote><p>I've had a little utility that I've been kicking around for some time now that I've found to be quite useful in my JavaScript application-building endeavors. It's a super-simple templating function that is fast, caches quickly, and is easy to use. I have a couple tricks that I use to make it real fun to mess with.</p></blockquote>

<!--more-->


<blockquote><p>Here's the source code to the templating function (a more-refined version of this code will be in my upcoming book Secrets of the <a href="http://jsninja.com/">JavaScript Ninja</a>):</p></blockquote>

<p>original code:</p>

<pre><code>// Simple JavaScript Templating
// John Resig - http://ejohn.org/ - MIT Licensed
(function(){
  var cache = {};

  this.tmpl = function tmpl(str, data){
    // Figure out if we're getting a template, or if we need to
    // load the template - and be sure to cache the result.
    var fn = !/\W/.test(str) ?
      cache[str] = cache[str] ||
        tmpl(document.getElementById(str).innerHTML) :

      // Generate a reusable function that will serve as a template
      // generator (and which will be cached).
      new Function("obj",
        "var p=[],print=function(){p.push.apply(p,arguments);};" +

        // Introduce the data as local variables using with(){}
        "with(obj){p.push('" +

        // Convert the template into pure JavaScript
        str
          .replace(/[\r\t\n]/g, " ")
          .split("&lt;%").join("\t")
          .replace(/((^|%&gt;)[^\t]*)'/g, "$1\r")
          .replace(/\t=(.*?)%&gt;/g, "',$1,'")
          .split("\t").join("');")
          .split("%&gt;").join("p.push('")
          .split("\r").join("\\'")
      + "');}return p.join('');");

    // Provide some basic currying to the user
    return data ? fn( data ) : fn;
  };
})();
</code></pre>

<p>modified code:</p>

<pre><code>// Simple JavaScript Templating
// John Resig - http://ejohn.org/ - MIT Licensed
(function(){
  var cache = {};

  // Added by Mindon
  this.tmplCall = {
    nohtml: function(v) {
      return typeof v == 'string'
        ? v.replace(/&amp;/g,'&amp;amp;').replace(/&lt;/g,'&amp;lt;')
           .replace(/&gt;/g,'&amp;gt;').replace(/[ ]{2}/g, '&amp;nbsp; ')
        : v;
    }
  , br: function(v) {
      return typeof v == 'string'
        ? v.replace(/\n{2,}/g, '&lt;br/&gt;&lt;br/&gt;').replace(/\n/g, '&lt;br/&gt;')
        : v;
    }
  };

  // Updated by mindon@gmail.com Nov. 3, 2011 ( options parameter append )
  this.tmpl = function tmpl(str, data, opt){
    var _t, _f; // added by Mindon

    // Figure out if we're getting a template, or if we need to
    // load the template - and be sure to cache the result.
    var fn = !/\W/.test(str) ?
      cache[str] = cache[str] ||
        tmpl(document.getElementById(str).innerHTML, 0, opt) : // updated by Mindon

      // Appended by Mindon
      ( (_t = opt &amp;&amp; opt.html ? 1: 'tmplCall.nohtml') &amp;&amp; 
        (_f = opt &amp;&amp; opt.fields ? '(' +opt.fields +')(d)' : 1) &amp;&amp;
        ((_t===1&amp;&amp;(_t=0)) || (_f===1&amp;&amp;(_f=0))) &amp;&amp; 0
        // fields: function(){return {fieldName: handlefn(v){}}}
      ) ||

      // Generate a reusable function that will serve as a template
      // generator (and which will be cached).
      new Function("d",
        "var p=[],print=function(){p.push.apply(p,arguments);}, _f=" + _f +", _t="
          +_t +",_v=function(k,v){" 
          +'return tmplCall.br('
          +(_f?'_f[k]?_f[k](':'') +(_t?'_t(v)':'v') +(_f?'):'
          +(_t?'_t(v)':'v'):'') +")};" + // updated

        // Introduce the data as local variables using with(){}
        "p.push('" +

        // Convert the template into pure JavaScript
        str.replace(/[\r\t\n]/g, " ")
          .split("&lt;%").join("\t")
          .replace(/((^|%&gt;)[^\t]*)'/g, "$1\r")
          .replace(/\t=(.*?)%&gt;/g, "',_v('$1',d['$1']),'") // updated
          .split("\t").join("');")
          .split("%&gt;").join("p.push('")
          .split("\r").join("\\'")
      + "');return p.join('');");

    // Provide some basic currying to the user
    return data ? fn( data ) : fn;
  };
})();
</code></pre>

<p>Templates example:</p>

<pre><code>&lt;script type="text/html" id="item_tmpl"&gt;
  &lt;div id="&lt;%=id%&gt;" class="&lt;%=(i % 2 == 1 ? " even" : "")%&gt;"&gt;
    &lt;div class="grid_1 alpha right"&gt;
      &lt;img class="righted" src="&lt;%=profile_image_url%&gt;"/&gt;
    &lt;/div&gt;
    &lt;div class="grid_6 omega contents"&gt;
      &lt;p&gt;&lt;b&gt;&lt;a href="http://mindon.github.com/&lt;%=from_user%&gt;"&gt;&lt;%=from_user%&gt;&lt;/a&gt;:&lt;/b&gt; &lt;%=text%&gt;&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/script&gt;
</code></pre>

<p>Another with inline script:</p>

<pre><code>&lt;script type="text/html" id="user_tmpl"&gt;
  &lt;% for ( var i = 0; i &lt; users.length; i++ ) { %&gt;
    &lt;li&gt;&lt;a href="&lt;%=users[i].url%&gt;"&gt;&lt;%=users[i].name%&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;% } %&gt;
&lt;/script&gt;
</code></pre>
]]></content>
  </entry>
  
</feed>
