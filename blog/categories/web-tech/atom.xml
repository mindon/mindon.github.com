<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Web-Tech | Mindon.IDEA]]></title>
  <link href="http://mindon.github.com/blog/categories/web-tech/atom.xml" rel="self"/>
  <link href="http://mindon.github.com/"/>
  <updated>2012-03-06T22:36:19+08:00</updated>
  <id>http://mindon.github.com/</id>
  <author>
    <name><![CDATA[Mindon Feng]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Socket.IO behind proxy or firewall]]></title>
    <link href="http://mindon.github.com/blog/2012/03/06/socket-dot-io-behind-proxy-or-firewall/"/>
    <updated>2012-03-06T06:32:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/03/06/socket-dot-io-behind-proxy-or-firewall</id>
    <content type="html"><![CDATA[<p>Independently of what transport you are using (WebSocket or Comet or both), a connection can always be closed by a Proxy or Firewall, or an expected network outage can close your connection. Why is it a problem? It’s problematic when a disconnection happens as you may loose server side events if you don’t architect your application correctly.</p>

<ul>
<li><strong>long-polling</strong>: between reconnection, servers side events may happens and if they aren’t persisted, those events will never reach your client.</li>
<li><strong>websocket</strong>: Websocket are new and most if not all firewall will close them after some X idle times. Again, all server sides events will be lost</li>
<li><strong>http-streaming</strong>: Some proxy really don’t like the http-streaming technique, and will close it right away. Again, possibility to loose server sides events.</li>
<li><strong>Unexpected network outage</strong>: the connection can also be closed by something between your browser and server.</li>
</ul>


<!--more-->


<p><a href="https://github.com/LearnBoost/socket.io-client/issues/331">Query string management is messed up</a></p>

<p><a href="https://github.com/LearnBoost/socket.io/wiki/Socket.IO-and-firewall-software">Socket.IO and firewall software</a></p>

<p><a href="http://www.infoq.com/articles/Web-Sockets-Proxy-Servers">How HTML5 Web Sockets Interact With Proxy Servers</a></p>

<p><img src="/images/blog/websocket-proxy.png" alt="Websocket Interact with proxy" /></p>

<blockquote><p>Using TLS/SSL is advised not only when you need to encrypt the traffic but also when you need to bypass proxy servers and firewalls, that otherwise will just block or not understand WebSockets connections.
<a href="http://showmetheco.de/articles/2011/2/diving-into-html5-with-websockets-and-perl.html">Diving into HTML5 with WebSockets and Perl</a></p></blockquote>

<p>Socket.IO server configuring: <strong>match origin protocol</strong></p>

<p><a href="https://github.com/LearnBoost/Socket.IO/wiki/Configuring-Socket.IO">https://github.com/LearnBoost/Socket.IO/wiki/Configuring-Socket.IO</a></p>

<p><a href="http://www.letseehere.com/reverse-proxy-web-sockets">Reverse Proxy Web Sockets with Nginx and Socket.IO</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web-Drawing Throwdown: Paper.js Vs. Processing.js Vs. Raphael]]></title>
    <link href="http://mindon.github.com/blog/2012/02/25/web-drawing-throwdown-paper-dot-js-vs-processing-dot-js-vs-raphael/"/>
    <updated>2012-02-25T23:18:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/02/25/web-drawing-throwdown-paper-dot-js-vs-processing-dot-js-vs-raphael</id>
    <content type="html"><![CDATA[<p>Before drawing anything in a browser, ask yourself three questions:</p>

<h2>Do you need to support older browsers?</h2>

<p>If the answer is yes, then your only choice is Raphaël. It handles browsers all the way back to IE 7 and Firefox 3. Raphaël even has some support for IE 6, although some of its underlying technology cannot be implemented there.</p>

<h2>Do you need to support Android?</h2>

<p>Android doesn’t support SVG, so you’ll have to use Paper.js or Processing.js. Some rumors say that Android 4 will handle SVG, but the majority of Android devices won’t support it for years.</p>

<h2>Is your drawing interactive?</h2>

<p>Raphaël and Paper.js focus on interaction with drawn elements through clicking, dragging and touch. Processing.js doesn’t support any object-level events, so responding to user gestures is very difficult. Processing.js can draw a cool animation on your home page, but the other tools are better for interactive applications.</p>

<p>Paper.js, Processing.js and Raphaël are the leading libraries for drawing on the Web right now. A couple of others are up and coming, and you can always use Flash, but these three work well with HTML5 and have the widest support among browser vendors.</p>

<p>Choosing the right framework will determine the success of your project. This article covers the advantages and disadvantages of each, and the information you need to make the best choice.</p>

<!--more-->


<p>All of the code in this article is open source and can be run on the demo page that accompanies this article.</p>

<p>[Note: Have you already pre-ordered your copy of our Printed Smashing Book #3? The book is a professional guide on how to redesign websites and it also introduces a whole new mindset for progressive Web design, written by experts in the industry for you. Pre-order now and add your name into the book!]</p>

<h2>Overview</h2>

<table>
<thead>
<tr>
<th> </th>
<th align="center"> Paper.js </th>
<th align="center"> Processing.js </th>
<th align="center"> Raphaël.js</th>
</tr>
</thead>
<tbody>
<tr>
<td>Technology </td>
<td align="center"> canvas tag </td>
<td align="center"> canvas tag </td>
<td align="center"> SVG</td>
</tr>
<tr>
<td>Language </td>
<td align="center"> PaperScript </td>
<td align="center"> Processing script </td>
<td align="center"> JavaScript</td>
</tr>
<tr>
<td>Browsers </td>
<td align="center"> IE 9 </td>
<td align="center"> IE 9 </td>
<td align="center"> IE 7</td>
</tr>
<tr>
<td>Mobile </td>
<td align="center"> Yes </td>
<td align="center"> Yes </td>
<td align="center"> iOS only</td>
</tr>
<tr>
<td>Model </td>
<td align="center"> Vector and raster </td>
<td align="center"> Raster </td>
<td align="center"> Vector</td>
</tr>
<tr>
<td>Size </td>
<td align="center"> 56 KB </td>
<td align="center"> 64 KB </td>
<td align="center"> 20 KB</td>
</tr>
</tbody>
</table>


<p>It’s all JavaScript once the page runs, but the frameworks take different paths to get there. Raphaël is written directly in JavaScript, but Paper.js uses PaperScript, and Processing.js uses its own script. They all support Firefox, Chrome and Safari, but Internet Explorer is an issue — Paper.js and Processing.js use the canvas tag and thus require IE 9.</p>

<p><div style="float:right">
<script type="text/javascript"><!--
google_ad_client = "ca-pub-6997921015773263";
/* git-post-body2 */
google_ad_slot = "9585845910";
google_ad_width = 468;
google_ad_height = 60;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div></p>

<p>PaperScript is a JavaScript extension that makes it possible to write scripts that don’t pollute the global namespace. This cuts down on JavaScript conflicts. PaperScript also supports direct math on objects such as Point and Size: you can add two points together as if they were numbers.</p>

<p>Processing.js is based on a framework named Processing, which runs in the Java Virtual Machine. You define int and float instead of var, and you can use classes with Java-style inheritance. While the Processing.js script looks a little like Java, it’s more like JavaScript and doesn’t require many of the more complex features of Java.
Using all three libraries is easy if you have some familiarity with JavaScript.</p>

<p>Full article could be found from <em>Zack Grossbart</em>'s <a href="http://coding.smashingmagazine.com/2012/02/22/web-drawing-throwdown-paper-processing-raphael/">Web-Drawing Throwdown: Paper.js Vs. Processing.js Vs. Raphael</a></p>

<p>with demos <a href="http://zgrossbart.github.com/3gears/">http://zgrossbart.github.com/3gears/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dive into Node.JS]]></title>
    <link href="http://mindon.github.com/blog/2012/02/22/dive-into-node-dot-js/"/>
    <updated>2012-02-22T15:29:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/02/22/dive-into-node-dot-js</id>
    <content type="html"><![CDATA[<p>Node.js is a platform built on Chrome's JavaScript runtime for easily building fast, scalable network applications. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient, perfect for data-intensive real-time applications that run across distributed devices.
<a href="http://nodejs.org">http://nodejs.org</a></p>

<!--more-->


<p>Felix's Node.js Guide
<a href="http://nodeguide.com/">http://nodeguide.com/</a></p>

<ul>
<li><p><a href="http://nodeguide.com/beginner.html">Node.js Beginner Guide</a>
If you are new to node.js, this guide will take you from hello world to deploying your first app.</p></li>
<li><p><a href="http://nodeguide.com/style.html">Node.js Style Guide</a>
The general JavaScript style I recommend to use with node.js. A lot of this is personal preferences, but hopefully rather consistent.</p></li>
<li><p><a href="http://nodeguide.com/community.html">Node.js Community Guide</a>
Get to know some of the node.js community and find out where they hang out.</p></li>
<li><p><a href="http://nodeguide.com/convincing_the_boss.html">Node.js Convincing The Boss Guide</a>
Find out where node.js makes sense, and how to get management to see the benefits.</p></li>
</ul>


<p>NodeJS – The what, why, how and when
<a href="http://blog.xebia.com/2011/08/16/nodejs-the-what-why-how-and-when/">http://blog.xebia.com/2011/08/16/nodejs-the-what-why-how-and-when/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web Images Optimization]]></title>
    <link href="http://mindon.github.com/blog/2012/02/22/web-images-optimization/"/>
    <updated>2012-02-22T15:16:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/02/22/web-images-optimization</id>
    <content type="html"><![CDATA[<p>Use PNG! with ImageMagick</p>

<h2>GIF Animation</h2>

<p>Tool: <a href="http://www.lcdf.org/gifsicle/">GitSlice</a>
Command:</p>

<p>  gifsicle -o  test-optimized.gif test.gif</p>

<h2>PNG</h2>

<p>Tool: <a href="http://pmt.sourceforge.net/pngcrush/">PNGCrush</a>
Command:</p>

<p>  pngcrush -rem alla -brute -reduce test.jpg test-optimized.jpg</p>

<h2>JPEG</h2>

<p>Tool: <a href="http://jpegclub.org/jpegtran/">JPEGTran</a>
Command:</p>

<p>  jpegtran -optimize -progressive -copy none -outfile test-optimized.jpg test.jpg</p>

<!--more-->


<p>Reference from <a href="http://www.welefen.com/image-optimization.html">前端优化之图片优化自动化</a></p>

<p>12 Really Useful Image Optimization Tools For Web Designers
<a href="http://www.webdesignbooth.com/12-really-useful-image-optimization-tools-for-web-designers/">http://www.webdesignbooth.com/12-really-useful-image-optimization-tools-for-web-designers/</a></p>

<p>Optimizing Web Graphics: Compression
<a href="http://www.webreference.com/dev/graphics/compress.html">http://www.webreference.com/dev/graphics/compress.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Picking the right NoSQL Database]]></title>
    <link href="http://mindon.github.com/blog/2012/02/21/nosql-databases/"/>
    <updated>2012-02-21T13:22:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/02/21/nosql-databases</id>
    <content type="html"><![CDATA[<p>NoSQL = Not Only SQL</p>

<p><a href="http://article.yeeyan.org/view/271351/239915">8种Nosql数据库系统对比</a></p>

<p><a href="http://kkovacs.eu/cassandra-vs-mongodb-vs-couchdb-vs-redis">Cassandra vs MongoDB vs CouchDB vs Redis vs Riak vs HBase vs Membase vs Neo4j comparison</a></p>

<p><a href="http://blog.monitis.com/index.php/2011/05/22/picking-the-right-nosql-database-tool/">Picking the right NoSQL database tool</a></p>

<h2>Key-values Stores</h2>

<p>Tokyo Cabinet/Tyrant, Redis, Voldemort, Oracle BDB</p>

<p>Content caching (Focus on scaling to huge amounts of data, designed to handle massive load), logging, etc.</p>

<p>Strengths: Fast lookups
Weaknesses: Stored data has no schema</p>

<!--more-->


<h2>Column Family Stores</h2>

<p>Cassandra, HBase, Riak</p>

<p>Distributed file systems</p>

<p>Strengths: Fast lookups, good distributed storage of data
Weaknesses: Very low-level API</p>

<h2>Document Databases</h2>

<p>CouchDB, MongoDB</p>

<p>Web applications (Similar to Key-Value stores, but the DB knows what the Value is)</p>

<p>Strengths: Tolerant of incomplete data
Weaknesses: Query performance, no standard query syntax</p>

<h2>Graph Databases</h2>

<p>Neo4J, InfoGrid, Infinite Graph</p>

<p>Social networking, Recommendations (Focus on modeling the structure of data - interconnectivity)</p>

<p>Strengths: Graph algorithms e.g. shortest path, connectedness, n degree relationships, etc.
Weaknesses: Has to traverse the entire graph to achieve a definitive answer. Not easy to cluster.</p>
]]></content>
  </entry>
  
</feed>
