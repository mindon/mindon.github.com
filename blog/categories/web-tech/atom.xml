<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Web-Tech | Mindon.IDEA]]></title>
  <link href="http://mindon.github.com/blog/categories/web-tech/atom.xml" rel="self"/>
  <link href="http://mindon.github.com/"/>
  <updated>2012-03-24T18:31:56+08:00</updated>
  <id>http://mindon.github.com/</id>
  <author>
    <name><![CDATA[Mindon Feng]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Start a NodeJS addon under windows]]></title>
    <link href="http://mindon.github.com/blog/2012/03/24/start-a-nodejs-addon-under-windows/"/>
    <updated>2012-03-24T12:15:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/03/24/start-a-nodejs-addon-under-windows</id>
    <content type="html"><![CDATA[<h2>Code &amp; tools preparation</h2>

<p><strong>NodeJS source code</strong>
<a href="https://github.com/joyent/node">https://github.com/joyent/node</a></p>

<p><strong>VISUAL C++ 2010 EXPRESS</strong>
Free tools to create applications on Windows using Visual C++.
(Needs SP3 under winxp)</p>

<p><a href="http://www.microsoft.com/visualstudio/en-us/products/2010-editions/visual-cpp-express">Download VC++ 2010 EXPRESS</a></p>

<p><strong>Python 2.6 or 2.7</strong>
<a href="http://www.python.org/download/">http://www.python.org/download/</a></p>

<h2>Compile your NodeJS</h2>

<p>Run vcbuild.bat under NodeJS source folder.</p>

<h2>Compile the Hello-world</h2>

<p><strong>General Steps also fit for other addons</strong></p>

<!--more-->


<p>Get into folder test\addons\hello-world\ of NodeJS source</p>

<ol>
<li>Edit binding.cc
Add <strong>NODE_MODULE_EXPORT </strong> before <strong>void init</strong></li>
</ol>


<p>This could help avoid running "Unkown error" when require the addon in nodejs.</p>

<ol>
<li>Generate project files</li>
</ol>


<pre><code>set NODE_ROOT=your-node-js-src-root 
python %NODE_ROOT%\tools\gyp_addon binding.gyp
</code></pre>

<ol>
<li>Setup VC ENV variables
Run</li>
</ol>


<pre><code>"D:\Microsoft Visual Studio 10.0\VC\vcvarsall.bat"
</code></pre>

<ol>
<li>Build</li>
</ol>


<pre><code>@set Configuration=Release
</code></pre>

<ol>
<li>Test</li>
</ol>


<pre><code>node
&gt;require('./Release/binding')
</code></pre>

<h2>Compile node-expat</h2>

<ol>
<li><p>Install Expat under windows
<a href="http://nchc.dl.sourceforge.net/project/expat/expat_win32/2.0.1/expat-win32bin-2.0.1.exe">http://nchc.dl.sourceforge.net/project/expat/expat_win32/2.0.1/expat-win32bin-2.0.1.exe</a></p></li>
<li><p>Prepare GYP build file</p></li>
</ol>


<pre><code>{
  'targets': [
    {
      'target_name': 'node-expat',
      'sources': [ 'node-expat.cc' ],
      'include_dirs': [ 'expat-install-folder/include' ],
      'libraries': [ '-lexpat-install-folder/lib/libexpat.lib'  ],
    }
  ]
}
</code></pre>

<h2>Compile node-xmpp</h2>

<ol>
<li><p>ICU unicode
<a href="http://site.icu-project.org/download/49">http://site.icu-project.org/download/49</a></p></li>
<li><p>node-stringprep windows version
<a href="https://github.com/andreasbotsikas/node-stringprep/tree/windows-build">https://github.com/andreasbotsikas/node-stringprep/tree/windows-build</a></p></li>
<li><p>node-xmpp</p></li>
</ol>


<p><a href="https://github.com/astro/node-xmpp">https://github.com/astro/node-xmpp</a></p>

<p><a href="http://www.adarshr.com/papers/xmpp">http://www.adarshr.com/papers/xmpp</a></p>

<h2>Reference</h2>

<ul>
<li><p><strong>Addons NodeJS document</strong>
<a href="http://nodejs.org/docs/latest/api/addons.html">http://nodejs.org/docs/latest/api/addons.html</a></p></li>
<li><p><strong>Windows上编译NodeJS native extension</strong>
<a href="http://cnodejs.org/topic/4f1fa3ed817ae4105c040fb4">http://cnodejs.org/topic/4f1fa3ed817ae4105c040fb4</a></p></li>
<li><p><strong>Building a Node.js Windows C/C++ Addon</strong>
<a href="http://coderesearchlabs.com/articles/BNWCA.pdf">http://coderesearchlabs.com/articles/BNWCA.pdf</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to write a mail in HTML]]></title>
    <link href="http://mindon.github.com/blog/2012/03/24/how-to-write-a-mail-in-html/"/>
    <updated>2012-03-24T12:07:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/03/24/how-to-write-a-mail-in-html</id>
    <content type="html"><![CDATA[<h2>编写原则：</h2>

<ol>
<li><p>全局规则之一，不要写<code>&lt;style&gt;</code>标签、不要写class，所有CSS都用style属性，什么元素需要什么样式就用style写内联的CSS。</p></li>
<li><p>全局规则之二，少用图片，邮箱不会过滤你的img标签，但是系统往往会默认不载入陌生来信的图片，如果用了很多图片的邮件，在片没有载入的情况下，丑陋无比甚至看不清内容，没耐心的用户直接就删除了。图片上务必加上alt。</p></li>
<li><p>不要在style里面写float、position这些style，因为会被过滤。那么如何实现左右布局或者更复杂的布局呢？用table。</p></li>
<li><p>style内容里面background可以设置color，但是img会被过滤，就是说不能通过CSS来设置背景图片了。但是有一个很有意思的元素属性，也叫background，里面可以定义一个图片路径，这是个不错的替代方案，虽然这样功能有限，比如无法定位背景图片了，有总比没有好。例如要给一个单元格加一个背景，必须这样写：
<code>&lt;td background=”http://image1.koubei.com/images/common/logo_koubei.gif”&gt;&lt;/td&gt;</code></p></li>
<li>div模式的邮箱不支持flash，iframe模式的有待验证。</li>
</ol>


<!--more-->


<p>最后提一句，sohu的邮箱很怪异，会在每个文本段后面加一个空格，导致原本正常的排版一行放不下而换行，从而使某些布局错乱。所以，如果你要兼容sohu邮箱的话，遇到一些紧凑的布局就要格外小心了，尽量减少文本段的数量，留足宽度。</p>

<p>邮件模板，请严格按照下面的规则执行。邮件客户端和Web页面的需求不同，在编写代码的时候，考虑的方向也不一样。</p>

<h2>!Doctype声明 </h2>

<p>为了向前兼容和避免某些浏览器的怪癖，使用html5的!doctype声明，格式如下：
<code>&lt;!DOCTYPE HTML&gt;</code></p>

<h2>原则，及思维出发点 </h2>

<ol>
<li><p>不需要考虑DOM节点的精简和结构的优化。
以完成设计样式为最优先。必要时，不必吝啬使用表格嵌套，不必吝啬使用空的表格元素来占据空间。</p></li>
<li><p>宁可冗余，也不可缺少必要定义。</p></li>
<li><p>充分利用表格的私有属性来布局。width, height, bgcolor, background, align, valign等</p></li>
<li><p>可替代性：
在编写html的时候，请思考当你页面的所有图片都被屏蔽时，是否用户还能了解页面的主要内容。
请务必在所有要设置背景图片的元素上，定义背景颜色。</p></li>
<li><p>可利用Dreamweaver等工具来协助编写html，但切记，一定要时候做好每行代码的检查。</p></li>
</ol>


<h2>Mackup </h2>

<ol>
<li><p>主体页面，包括细节处理，尽量使用<code>&lt;table&gt;</code>布局。</p></li>
<li><p>不允许在<code>&lt;tr&gt;</code>元素上定义CSS样式，请将样式尽量定义在<code>&lt;td&gt;</code>元素上。（Gmail等邮件客户端会过滤<code>&lt;tr&gt;</code>上的属性）</p></li>
<li><p>禁止使用<code>&lt;style type=”text/css”&gt;&lt;/code&lt;来处理主要样式，所有的Web邮件系统都会过滤该标签。因此邮件模板中不能使用伪类（pseudo class）和伪元素（pseudo elements），以及高级选择符。</p></li>
</ol>


<p>但是，我们仍然可以使用<code>&lt;style&gt;</code>来提升一些比较先进的邮件PC客户端的体验，比如伪类。</p>

<p>必须使用表格和元素样式来完成所有基本样式和布局。</p>

<ol>
<li><p>禁止使用<code>&lt;link&gt;</code>来加载外联CSS</p></li>
<li><p>可以使用<code>&lt;div&gt;</code>来实现细节的，具有典型块级元素(block)的布局样式。而尽量避免使用<code>&lt;p&gt;</code>，因为我们不容易清除<code>&lt;p&gt;</code>在不同浏览器的默认样式</p></li>
<li><p>注意定义图片的替换文字（alt），及替换文字的颜色。</p></li>
</ol>


<h2>样式 </h2>

<ul>
<li><p> 文字的处理。
font-* 族的CSS属性不允许使用缩写，请分别定义 font-size, font-weight, line-height, font-family(font-family有可能被过滤)</p></li>
<li><p> 继承性
注意表格不会继承外部的font等属性，请务必，在每个<code>&lt;td&gt;</code>元素上都定义字体属性和颜色。</p></li>
<li><p> 背景的处理
不允许使用style=”background:url(http://…)”，请使用<code>&lt;td&gt;</code>的属性(attribute) background=“http://…”。（由于CSS背景图片是一种会影响页面渲染速度的定义，因此大多数Web邮件系统会过滤它。）</p></li>
</ul>


<p>背景颜色，也请使用表格的bgcolor属性。</p>

<ul>
<li><p> 对于复杂样式的处理，可以大胆地、大块地切图。</p></li>
<li><p> 避免尝试让两个table-cell的元素对齐，如果, 一个元素是用具体的宽度定义（width=”100″），另一个元素是用百分比来定位( width=”50%”)</p></li>
<li><p> 避免使用list-style来处理列表样式，请使用 “ &#8226; ” 字符来替代。</p></li>
<li><p> 避免使用<code>&lt;img&gt;</code>元素拼接的方式，来实现背景大图的分割，尽量使用表格的background</p></li>
</ul>


<p>我们知道，在<code>&lt;img&gt;</code>元素下4px空白的问题。</p>

<p>禁用的，和不建议使用的CSS样式（见参考文献1）</p>

<p>这些样式，大都是可能引起元素偏移到容器外的样式</p>

<p>禁止使用 position, background, float</p>

<h2>特别说明： </h2>

<p>margin: margin的使用要非常谨慎，不允许使用margin作为重要的布局依据，不允许使用负margin，避免使用非零和非auto的margin属性。</p>

<h2>常见问题 </h2>

<ul>
<li> 如何让邮件在Gmail等Web页面中居中
有几种方式：</li>
</ul>


<p>a> 在 body上定义style=”width:apx; margin:auto”。注意，在Web邮件中，会自动为你生成一个<code>&lt;div style=”width:apx; margin:auto”&gt;&lt;/code&gt; 的元素在最外层。(可以有效利用这一特性，定义背景颜色等样式，和实现其他可能的事情)</p>

<p>而不要尝试自己在邮件模板最外层添加一个带有margin:auto的<code>&lt;div&gt;</code>元素。</p>

<p>b> 使用<code>&lt;center&gt;</code></p>

<ul>
<li> 如何在邮件的布局中占据空白
请使用空白的<code>&lt;td&gt;</code>元素，设置height属性来起到站位的作用。</li>
</ul>


<p>origin from <a href="http://user.qzone.qq.com/21195254/blog/1296205414">http://user.qzone.qq.com/21195254/blog/1296205414</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Magic Code Switching Comment Syntax]]></title>
    <link href="http://mindon.github.com/blog/2012/03/22/magic-code-switching-comment-syntax/"/>
    <updated>2012-03-22T23:58:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/03/22/magic-code-switching-comment-syntax</id>
    <content type="html"><![CDATA[<p>This a kind of c-style code comments to switch two blocks of code for debug or testing.</p>

<pre><code>/*/
  //... Section A (commented)
/*/
  //... Section B (working)
//*/
</code></pre>

<p>By adding one single / at the beginning, it turns into:</p>

<pre><code>//*/
  //... Section A (working)
/*/
  //... Section B (commented)
//*/
</code></pre>

<p>Another simple section comment:</p>

<pre><code>//*/
  //... working
//*/
</code></pre>

<p>remove a single / at the beginning, it turns into:</p>

<pre><code>/*/
  //... commented
//*/
</code></pre>

<ul>
<li><p>Curiosity</p></li>
<li><p>Passion</p></li>
<li><p>Focus</p></li>
<li><p>Fun</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript Micro-Templating]]></title>
    <link href="http://mindon.github.com/blog/2012/03/21/javascript-micro-templating/"/>
    <updated>2012-03-21T10:52:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/03/21/javascript-micro-templating</id>
    <content type="html"><![CDATA[<p>This is a modification version of <strong>John Resig</strong>'s <a href="http://ejohn.org/blog/javascript-micro-templating/">Javascript Micro-Templating</a></p>

<p>The modifications are mostly about filters for field values.</p>

<p>I like this javascript mico-templating code from <a href="http://ejohn.org/"><strong>John Resig</strong></a>, it's really simple, easy-to-use.</p>

<blockquote><p>I've had a little utility that I've been kicking around for some time now that I've found to be quite useful in my JavaScript application-building endeavors. It's a super-simple templating function that is fast, caches quickly, and is easy to use. I have a couple tricks that I use to make it real fun to mess with.</p></blockquote>

<!--more-->


<blockquote><p>Here's the source code to the templating function (a more-refined version of this code will be in my upcoming book Secrets of the <a href="http://jsninja.com/">JavaScript Ninja</a>):</p></blockquote>

<p>original code:</p>

<pre><code>// Simple JavaScript Templating
// John Resig - http://ejohn.org/ - MIT Licensed
(function(){
  var cache = {};

  this.tmpl = function tmpl(str, data){
    // Figure out if we're getting a template, or if we need to
    // load the template - and be sure to cache the result.
    var fn = !/\W/.test(str) ?
      cache[str] = cache[str] ||
        tmpl(document.getElementById(str).innerHTML) :

      // Generate a reusable function that will serve as a template
      // generator (and which will be cached).
      new Function("obj",
        "var p=[],print=function(){p.push.apply(p,arguments);};" +

        // Introduce the data as local variables using with(){}
        "with(obj){p.push('" +

        // Convert the template into pure JavaScript
        str
          .replace(/[\r\t\n]/g, " ")
          .split("&lt;%").join("\t")
          .replace(/((^|%&gt;)[^\t]*)'/g, "$1\r")
          .replace(/\t=(.*?)%&gt;/g, "',$1,'")
          .split("\t").join("');")
          .split("%&gt;").join("p.push('")
          .split("\r").join("\\'")
      + "');}return p.join('');");

    // Provide some basic currying to the user
    return data ? fn( data ) : fn;
  };
})();
</code></pre>

<p>modified code:</p>

<pre><code>// Simple JavaScript Templating
// John Resig - http://ejohn.org/ - MIT Licensed
(function(){
  var cache = {};

  // Added by Mindon
  this.tmplCall = {
    nohtml: function(v) {
      return typeof v == 'string'
        ? v.replace(/&amp;/g,'&amp;amp;').replace(/&lt;/g,'&amp;lt;')
           .replace(/&gt;/g,'&amp;gt;').replace(/[ ]{2}/g, '&amp;nbsp; ')
        : v;
    }
  , br: function(v) {
      return typeof v == 'string'
        ? v.replace(/\n{2,}/g, '&lt;br/&gt;&lt;br/&gt;').replace(/\n/g, '&lt;br/&gt;')
        : v;
    }
  };

  // Updated by mindon@gmail.com Nov. 3, 2011 ( options parameter append )
  this.tmpl = function tmpl(str, data, opt){
    var _t, _f; // added by Mindon

    // Figure out if we're getting a template, or if we need to
    // load the template - and be sure to cache the result.
    var fn = !/\W/.test(str) ?
      cache[str] = cache[str] ||
        tmpl(document.getElementById(str).innerHTML, 0, opt) : // updated by Mindon

      // Appended by Mindon
      ( (_t = opt &amp;&amp; opt.html ? 1: 'tmplCall.nohtml') &amp;&amp; 
        (_f = opt &amp;&amp; opt.fields ? '(' +opt.fields +')(d)' : 1) &amp;&amp;
        ((_t===1&amp;&amp;(_t=0)) || (_f===1&amp;&amp;(_f=0))) &amp;&amp; 0
        // fields: function(){return {fieldName: handlefn(v){}}}
      ) ||

      // Generate a reusable function that will serve as a template
      // generator (and which will be cached).
      new Function("d",
        "var p=[],print=function(){p.push.apply(p,arguments);}, _f=" + _f +", _t="
          +_t +",_v=function(k,v){" 
          +'return tmplCall.br('
          +(_f?'_f[k]?_f[k](':'') +(_t?'_t(v)':'v') +(_f?'):'
          +(_t?'_t(v)':'v'):'') +")};" + // updated

        // Introduce the data as local variables using with(){}
        "p.push('" +

        // Convert the template into pure JavaScript
        str.replace(/[\r\t\n]/g, " ")
          .split("&lt;%").join("\t")
          .replace(/((^|%&gt;)[^\t]*)'/g, "$1\r")
          .replace(/\t=(.*?)%&gt;/g, "',_v('$1',d['$1']),'") // updated
          .split("\t").join("');")
          .split("%&gt;").join("p.push('")
          .split("\r").join("\\'")
      + "');return p.join('');");

    // Provide some basic currying to the user
    return data ? fn( data ) : fn;
  };
})();
</code></pre>

<p>Templates example:</p>

<pre><code>&lt;script type="text/html" id="item_tmpl"&gt;
  &lt;div id="&lt;%=id%&gt;" class="&lt;%=(i % 2 == 1 ? " even" : "")%&gt;"&gt;
    &lt;div class="grid_1 alpha right"&gt;
      &lt;img class="righted" src="&lt;%=profile_image_url%&gt;"/&gt;
    &lt;/div&gt;
    &lt;div class="grid_6 omega contents"&gt;
      &lt;p&gt;&lt;b&gt;&lt;a href="http://mindon.github.com/&lt;%=from_user%&gt;"&gt;&lt;%=from_user%&gt;&lt;/a&gt;:&lt;/b&gt; &lt;%=text%&gt;&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/script&gt;
</code></pre>

<p>Another with inline script:</p>

<pre><code>&lt;script type="text/html" id="user_tmpl"&gt;
  &lt;% for ( var i = 0; i &lt; users.length; i++ ) { %&gt;
    &lt;li&gt;&lt;a href="&lt;%=users[i].url%&gt;"&gt;&lt;%=users[i].name%&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;% } %&gt;
&lt;/script&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis: REmote DIctionary Server]]></title>
    <link href="http://mindon.github.com/blog/2012/03/17/redis-remote-dictionary-server/"/>
    <updated>2012-03-17T22:54:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/03/17/redis-remote-dictionary-server</id>
    <content type="html"><![CDATA[<h2>Redis tutorial</h2>

<p>These slides and notes were originally written to accompany a three hour Redis tutorial I gave at the NoSQL Europe conference on the 22nd of April 2010. <a href="http://simonwillison.net/static/2010/redis-tutorial/"><strong>Redis tutorial</strong></a></p>

<p>REmote DIctionary Server(Redis) 是一个由Salvatore Sanfilippo写的key-value存储系统。</p>

<p><a href="http://www.petermao.com/redis/65.html">redis源代码分析</a></p>

<p><a href="http://blog.csdn.net/archimedes_zht/article/details/6909074">Redis为什么不使用Libevent或者Libev</a>
<a href="http://www.redis.io/topics/internals-eventlib">http://www.redis.io/topics/internals-eventlib</a></p>

<p><strong>Salvatore Sanfilippo：</strong>
Redis使用一个简洁的事件循环（event loop），我能够完全控制它。Libevent库自身的代码量已经是Redis目前代码量的3倍大了。</p>

<!--more-->


<p>大的库也并不总是每个方面都没有瑕疵的。例如，Libevent的稳定发布版在运行时对事件的数组做无意义的重新分配（Libevent在2.0版本里改进了这一点，但是这个版本还不是稳定的）。我修改了ae.c让它模块化，并且通过多分配一些内存为代价来避免在事件循环内部的各种类型的O(N)操作（但是这个多分配的内存对于Redis这个内存数据库来说并不是一个问题，因为可能只占总占用内存的0.001% :)）。现在添加和删除一个event是O(1)了，这对于有10K个客户端连接来说很重要。现在我们在Redis里面仅仅使用一个Timer，但是如果以后我们需要更多的，我可以修改ae.c通过使用skip list（跳跃表）来达到O(log(N))。我们现在有了2个模块：ae_select.c和ae_epoll.c，考虑到写一个新的模块的工作是如此的少，我肯定会增加ae_kevent.c。</p>

<p><strong>Sergey Shepelev：</strong>
Yeah，Libevent比较差劲，相反，libev是一个小巧、well thought、clean的库，它并没有提供任何高级的feature比如Http，但是它确实提供了非常好的底层feature。可以试一下：<a href="http://software.schmorp.de/pkg/libev.html">http://software.schmorp.de/pkg/libev.html</a></p>

<p><strong>Pedro Melo：</strong>
赞同使用Libev，使用它，你将会非常高兴满意。:)</p>

<p><strong>Salvatore Sanfilippo：</strong>
现在Redis已经支持kevents了，请看一下我在ae.c里面的新实现，它是多么简单的支持添加一个新模块，添加、删除事件都是O(1)的。底层的模块像ae_epoll.c ae_select.c ae_kevent.c仅仅导出一个最小的完美的API接口，上层则关注当前活跃的最大的FD和管理上层的状态。</p>

<p>我认为我们能够满足当前的实现而根本不用添加额外的依赖，另外这也不排除在某个时候，我们将会让我们的事件循环有一个更有意思的语义，for instance for LOCK if it will ever get implemented and for Virtual Memory (ability to "pause" events, ability to read chunks of on-disk files in background and so forth).例如：实现VM的时候，能够LOCK住事件循环，暂停事件，后台从磁盘读取文件等。我们也许要修改ae.c足够的多来让它和我们的代码一起工作而不是通过链接其他东西到Redis。当然，这有很多工作要做。</p>

<p><strong>Pedro Melo：</strong>
我的提议并不是关于添加这些模块有多简单或者复杂，我关注的是正确性。请看一下Libev的ChangLog，and seach for broken：所有这些高速的网络API都被相同OS的不同版本，或者更差的是不同的OS之间的小的不兼容困扰过。我认为Redis的主要努力不是为了创建另一个事件驱动的IO库，因此对我来说，“重用”一个已经仔细考虑过这些问题的库是更加明智的，然后把精力放在safe, working, backends上。</p>

<p><strong>Salvatore Sanfilippo：</strong>
我认为从软件工程的观点来看你是正确的，通过重用一个已经很好测试过的库，Redis的事件循环出现bug的概率会小很多。这是阻止我做正确选择的一系列things，顺便说一下，我也并不要求它们被客观接受。因此我对分歧所涉及的问题理解的很清楚：</p>

<ul>
<li><p>许多库在理论上被很好测试过了，但是如果通过一种和使用它的前N个项目不同的方式来用它，还是会发现bug的。例如，Redis唯一使用的外部代码：LZF压缩已经存在很多年了。在使用它一些天后，我发现了一个内存崩溃的bug。几乎所有人都在使用它，它也被很好测试过，但是bug仍然存在。</p></li>
<li><p>我计划以后使用很多timer。所有这些库都使用一个0(N)的定时器算法，这至少是我从源码中看到的。一个平衡树或者跳跃表可以用来提升性能。当我将需要时，我能够自己实现而不用等待外部的开发者来合并我的修改。</p></li>
<li><p>我讨厌 ./configure。事实上，在像事件循环库这种事情上，configure的魔法实际上只针对X个知名的系统。我对现在使用Redis的zero-configuration的体验非常满意。当然不使用./configure的另一种选择就是直接把代码放到Redis里面并且在发现问题时及时升级，但是我也并不想依赖于外部的源码。</p></li>
<li><p>我需要在任何地方使用 zfree/zmalloc。</p></li>
<li><p>写另一个事件循环库也是有一定价值的，如果这个库比其他的要易于阅读。例如，一些天前，我就看到某位同学在Twitter上推荐ae.c是一个关于简单事件循环很好的阅读对象，并且是能够在真实世界正确工作的。</p></li>
</ul>


<p>因此，从一个绝对的观点来看，你是正确的。但是我有一些我自己的主观原因在Redis中使用ae.c。</p>

<p><strong>Pedro Melo：</strong>
当然，不存在没有bug的库。我仅仅能够说的是libev非常的活跃，作者对在maillist上报告的bug也反应的非常快。我相信timer是O(log(N))，你可以看看文档的算法复杂度部分：http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod#ALGORITHMIC_COMP... 。事实上，libev是将它使用的算法的复杂度文档化的少有的几个库之一。总之，我确信它将能够很好的工作。</p>

<p><strong>Salvatore Sanfilippo：</strong>
Pedro，没有任何问题，我认为你的观点是很好的，我今天读了一会儿libev代码后，也同意libev的代码很好。如果我们把这个问题当作一个纯粹的软件工程问题，换句话说，假如我们将为宇宙飞船写一个组件，毫无疑问正确的做法是使用能够工作并且被很好测试过的库。</p>

<p>但是也有其他可能的观点，并且我感觉这些观点也同等的重要（也一样不是客观的）。我认为这个讨论与编写软件最大的动机问题有很深的联系（I think this discussion has some deep link with the most important motivations for writing software.）。我认为简洁代码的价值不仅在于能够做需要做的事情，而且在于易于阅读。库是一个让伟大工作快速完成的伟大想法。Libraries are a great idea to accomplish great things in short time, but things like libev finish to  resemble every day more what they wanted to avoid, after all there was libevent already. 毕竟已经有Libevent了，它有很多bug吗？既然这样为什么不fix呢？或者开出分支出来？因为Libevent非常复杂，一团糟等等。但是最终，这些库包括libev，试图毁坏每个人最初的简单设计。需要在同一个FD上注册更多完全相同的事件？对我来说，这是一个设计错误。对通用的库来说，这是一个feature，因为有同学在使用。等等。</p>

<p>没有外部依赖也很有价值。我没有证据，但是我打赌，Redis开始吸引一些用户不仅仅是由于它作为数据库的优点，也在于它是如此易于上手。能够非常容易的理解它是怎么工作的，很容易的编译，运行甚至不需要配置。它的语义是如此的简单，以至于我知道一些同学使用不同的语言（Erlang, Java, Javascript, ... ）实现Redis的山寨版仅仅为了乐趣。</p>

<p>If you take the street of simplicity this should be adopted in everything, from the protocol to the fact there are no dependencies, and that everybody with some C skill can open ae.c and understand how an event loop works.</p>

<p>如果你认可“简洁”，也可以拓展到其他方面：从协议到没有依赖的事实，到每一个有一定C技能的同学可以打开ae.c并且理解一个事件循环是如何工作的。</p>

<p>当然我也不太确定，因为它是全新的代码。我几乎是从头编写的ae.c，但是如果有bug的话，我将能够很快的fix掉。我认为这付出的努力是值得的。顺便说下，最后一次提交之后，我已经进入了feature freeze阶段。我将利用下个月在发布rc1前的时间来从头阅读整份代码，并且做很多的测试，“简洁”在这个时候就非常有帮助了。</p>

<h2>Node.js Redis Client</h2>

<p>https://github.com/mranney/node_redis</p>
]]></content>
  </entry>
  
</feed>
