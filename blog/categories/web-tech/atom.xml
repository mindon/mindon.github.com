<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Web-Tech | Mindon.IDEA]]></title>
  <link href="http://mindon.github.com/blog/categories/web-tech/atom.xml" rel="self"/>
  <link href="http://mindon.github.com/"/>
  <updated>2012-03-01T22:28:45+08:00</updated>
  <id>http://mindon.github.com/</id>
  <author>
    <name><![CDATA[Mindon Feng]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GoAgent -- Make your own fast proxy with GAE]]></title>
    <link href="http://mindon.github.com/blog/2012/02/29/goagent-make-your-own-fast-proxy-with-gae/"/>
    <updated>2012-02-29T23:44:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/02/29/goagent-make-your-own-fast-proxy-with-gae</id>
    <content type="html"><![CDATA[<p>在这个神奇的国家里，有很过好东西被阻止了，很多烂东西倒是放进来了。不想自己的大脑成为次品，还是要多学习新知识的，那就缺少不了Proxy这东西。</p>

<p>GoAgent 确实是个不错的东西，之前用过LocalProxy，总有些奇怪的原因导致不能用。最近在同事的微博看到了GoAgent，搭了一下，速度还真不错 :D</p>

<p>我是装有GAE SDK的，自行上传App的，没有使用 GoAgent 提供的 uploader.bat。
这里简单记录一下用GAE（Google App Engine）搭建GoAgent Proxy的要点：
（最权威的指南还是去 <a href="http://code.google.com/p/goagent/">http://code.google.com/p/goagent/</a> 看最好了:p ）</p>

<ol>
<li>要装有Python2.7</li>
<li>GAE里建的APP要是新的才会支持 High Replication Datastore</li>
<li>设置 app.yaml 里的 appid</li>
</ol>


<p>配合 Chrome 的插件 <a href="https://chrome.google.com/webstore/detail/dpplabbmogkhghncfbfdeeokoefdjegm">Proxy SwitchySharp</a> 效果相当好，推荐！</p>

<p>最新GoAgent Snapshot 网址 <a href="http://repo.or.cz/w/goagent.git/">http://repo.or.cz/w/goagent.git/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web-Drawing Throwdown: Paper.js Vs. Processing.js Vs. Raphael]]></title>
    <link href="http://mindon.github.com/blog/2012/02/25/web-drawing-throwdown-paper-dot-js-vs-processing-dot-js-vs-raphael/"/>
    <updated>2012-02-25T23:18:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/02/25/web-drawing-throwdown-paper-dot-js-vs-processing-dot-js-vs-raphael</id>
    <content type="html"><![CDATA[<p>Before drawing anything in a browser, ask yourself three questions:</p>

<h2>Do you need to support older browsers?</h2>

<p>If the answer is yes, then your only choice is Raphaël. It handles browsers all the way back to IE 7 and Firefox 3. Raphaël even has some support for IE 6, although some of its underlying technology cannot be implemented there.</p>

<h2>Do you need to support Android?</h2>

<p>Android doesn’t support SVG, so you’ll have to use Paper.js or Processing.js. Some rumors say that Android 4 will handle SVG, but the majority of Android devices won’t support it for years.</p>

<h2>Is your drawing interactive?</h2>

<p>Raphaël and Paper.js focus on interaction with drawn elements through clicking, dragging and touch. Processing.js doesn’t support any object-level events, so responding to user gestures is very difficult. Processing.js can draw a cool animation on your home page, but the other tools are better for interactive applications.</p>

<!--more-->


<p>Paper.js, Processing.js and Raphaël are the leading libraries for drawing on the Web right now. A couple of others are up and coming, and you can always use Flash, but these three work well with HTML5 and have the widest support among browser vendors.</p>

<p>Choosing the right framework will determine the success of your project. This article covers the advantages and disadvantages of each, and the information you need to make the best choice.</p>

<p>All of the code in this article is open source and can be run on the demo page that accompanies this article.</p>

<p>[Note: Have you already pre-ordered your copy of our Printed Smashing Book #3? The book is a professional guide on how to redesign websites and it also introduces a whole new mindset for progressive Web design, written by experts in the industry for you. Pre-order now and add your name into the book!]</p>

<h2>Overview</h2>

<table>
<thead>
<tr>
<th> </th>
<th align="center"> Paper.js </th>
<th align="center"> Processing.js </th>
<th align="center"> Raphaël.js</th>
</tr>
</thead>
<tbody>
<tr>
<td>Technology </td>
<td align="center"> canvas tag </td>
<td align="center"> canvas tag </td>
<td align="center"> SVG</td>
</tr>
<tr>
<td>Language </td>
<td align="center"> PaperScript </td>
<td align="center"> Processing script </td>
<td align="center"> JavaScript</td>
</tr>
<tr>
<td>Browsers </td>
<td align="center"> IE 9 </td>
<td align="center"> IE 9 </td>
<td align="center"> IE 7</td>
</tr>
<tr>
<td>Mobile </td>
<td align="center"> Yes </td>
<td align="center"> Yes </td>
<td align="center"> iOS only</td>
</tr>
<tr>
<td>Model </td>
<td align="center"> Vector and raster </td>
<td align="center"> Raster </td>
<td align="center"> Vector</td>
</tr>
<tr>
<td>Size </td>
<td align="center"> 56 KB </td>
<td align="center"> 64 KB </td>
<td align="center"> 20 KB</td>
</tr>
</tbody>
</table>


<p>Full article could be found from <em>Zack Grossbart</em>'s <a href="http://coding.smashingmagazine.com/2012/02/22/web-drawing-throwdown-paper-processing-raphael/">Web-Drawing Throwdown: Paper.js Vs. Processing.js Vs. Raphael</a></p>

<p>with demos <a href="http://zgrossbart.github.com/3gears/">http://zgrossbart.github.com/3gears/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dive into Node.JS]]></title>
    <link href="http://mindon.github.com/blog/2012/02/22/dive-into-node-dot-js/"/>
    <updated>2012-02-22T15:29:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/02/22/dive-into-node-dot-js</id>
    <content type="html"><![CDATA[<p>Node.js is a platform built on Chrome's JavaScript runtime for easily building fast, scalable network applications. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient, perfect for data-intensive real-time applications that run across distributed devices.
<a href="http://nodejs.org">http://nodejs.org</a></p>

<!--more-->


<p>Felix's Node.js Guide
<a href="http://nodeguide.com/">http://nodeguide.com/</a></p>

<ul>
<li><p><a href="http://nodeguide.com/beginner.html">Node.js Beginner Guide</a>
If you are new to node.js, this guide will take you from hello world to deploying your first app.</p></li>
<li><p><a href="http://nodeguide.com/style.html">Node.js Style Guide</a>
The general JavaScript style I recommend to use with node.js. A lot of this is personal preferences, but hopefully rather consistent.</p></li>
<li><p><a href="http://nodeguide.com/community.html">Node.js Community Guide</a>
Get to know some of the node.js community and find out where they hang out.</p></li>
<li><p><a href="http://nodeguide.com/convincing_the_boss.html">Node.js Convincing The Boss Guide</a>
Find out where node.js makes sense, and how to get management to see the benefits.</p></li>
</ul>


<p>NodeJS – The what, why, how and when
<a href="http://blog.xebia.com/2011/08/16/nodejs-the-what-why-how-and-when/">http://blog.xebia.com/2011/08/16/nodejs-the-what-why-how-and-when/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web Images Optimization]]></title>
    <link href="http://mindon.github.com/blog/2012/02/22/web-images-optimization/"/>
    <updated>2012-02-22T15:16:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/02/22/web-images-optimization</id>
    <content type="html"><![CDATA[<p>Use PNG! with ImageMagick</p>

<h2>GIF Animation</h2>

<p>Tool: <a href="http://www.lcdf.org/gifsicle/">GitSlice</a>
Command:</p>

<p>  gifsicle -o  test-optimized.gif test.gif</p>

<h2>PNG</h2>

<p>Tool: <a href="http://pmt.sourceforge.net/pngcrush/">PNGCrush</a>
Command:</p>

<p>  pngcrush -rem alla -brute -reduce test.jpg test-optimized.jpg</p>

<h2>JPEG</h2>

<p>Tool: <a href="http://jpegclub.org/jpegtran/">JPEGTran</a>
Command:</p>

<p>  jpegtran -optimize -progressive -copy none -outfile test-optimized.jpg test.jpg</p>

<!--more-->


<p>Reference from <a href="http://www.welefen.com/image-optimization.html">前端优化之图片优化自动化</a></p>

<p>12 Really Useful Image Optimization Tools For Web Designers
<a href="http://www.webdesignbooth.com/12-really-useful-image-optimization-tools-for-web-designers/">http://www.webdesignbooth.com/12-really-useful-image-optimization-tools-for-web-designers/</a></p>

<p>Optimizing Web Graphics: Compression
<a href="http://www.webreference.com/dev/graphics/compress.html">http://www.webreference.com/dev/graphics/compress.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Picking the right NoSQL Database]]></title>
    <link href="http://mindon.github.com/blog/2012/02/21/nosql-databases/"/>
    <updated>2012-02-21T13:22:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/02/21/nosql-databases</id>
    <content type="html"><![CDATA[<p>NoSQL = Not Only SQL</p>

<p><a href="http://article.yeeyan.org/view/271351/239915">8种Nosql数据库系统对比</a></p>

<p><a href="http://kkovacs.eu/cassandra-vs-mongodb-vs-couchdb-vs-redis">Cassandra vs MongoDB vs CouchDB vs Redis vs Riak vs HBase vs Membase vs Neo4j comparison</a></p>

<p><a href="http://blog.monitis.com/index.php/2011/05/22/picking-the-right-nosql-database-tool/">Picking the right NoSQL database tool</a></p>

<h2>Key-values Stores</h2>

<p>Tokyo Cabinet/Tyrant, Redis, Voldemort, Oracle BDB</p>

<p>Content caching (Focus on scaling to huge amounts of data, designed to handle massive load), logging, etc.</p>

<p>Strengths: Fast lookups
Weaknesses: Stored data has no schema</p>

<!--more-->


<h2>Column Family Stores</h2>

<p>Cassandra, HBase, Riak</p>

<p>Distributed file systems</p>

<p>Strengths: Fast lookups, good distributed storage of data
Weaknesses: Very low-level API</p>

<h2>Document Databases</h2>

<p>CouchDB, MongoDB</p>

<p>Web applications (Similar to Key-Value stores, but the DB knows what the Value is)</p>

<p>Strengths: Tolerant of incomplete data
Weaknesses: Query performance, no standard query syntax</p>

<h2>Graph Databases</h2>

<p>Neo4J, InfoGrid, Infinite Graph</p>

<p>Social networking, Recommendations (Focus on modeling the structure of data - interconnectivity)</p>

<p>Strengths: Graph algorithms e.g. shortest path, connectedness, n degree relationships, etc.
Weaknesses: Has to traverse the entire graph to achieve a definitive answer. Not easy to cluster.</p>
]]></content>
  </entry>
  
</feed>
