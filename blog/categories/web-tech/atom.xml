<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Web-Tech | Mindon.IDEA]]></title>
  <link href="http://mindon.github.com/blog/categories/web-tech/atom.xml" rel="self"/>
  <link href="http://mindon.github.com/"/>
  <updated>2012-05-19T14:40:28+08:00</updated>
  <id>http://mindon.github.com/</id>
  <author>
    <name><![CDATA[Mindon Feng]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Profiling Node.JS Application]]></title>
    <link href="http://mindon.github.com/blog/2012/04/26/profiling-nodejs-application/"/>
    <updated>2012-04-26T07:22:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/04/26/profiling-nodejs-application</id>
    <content type="html"><![CDATA[<h2>NodeJS</h2>

<p>Call something like "ulimit -n 8192" in your NodeJS App start shell script, before start your nodejs service.</p>

<p>Running with --prof to generate the v8.log</p>

<pre><code>node --prof --prof_lazy app.js
</code></pre>

<p>with tools in /node/deps/v8/, you can get report like following:</p>

<p>(run <code>tools/linux-tick-processor path-of-v8.log</code>)</p>

<pre><code>[Shared libraries]:
   ticks  total  nonlib   name
      3    0.0%    0.0%  .../libc-2.13.so

[JavaScript]:
   ticks  total  nonlib   name
      1    0.0%    0.0%  Stub: InstanceofStub

[C++]:
   ticks  total  nonlib   name
     1    0.0%    0.0%  __write
     ...

[GC]:
   ticks  total  nonlib   name
     15    0.0%

[Bottom up (heavy) profile]:
  Note: percentage shows a share of a particular caller in the total
  amount of its parent calls.
  Callers occupying less than 2.0% are not shown.

   ticks parent  name
   ...
</code></pre>

<p>trace log</p>

<pre><code>strace -o trace.log -cf node app.js:
</code></pre>

<p>or simple get the time</p>

<pre><code>time node app.js
</code></pre>

<h2>Other Modules &amp; Tools</h2>

<ul>
<li><a href="http://dtrace.org"><strong>dtrace</strong></a></li>
</ul>


<p>read the nodejs blog <a href="http://blog.nodejs.org/2012/04/25/profiling-node-js/">http://blog.nodejs.org/2012/04/25/profiling-node-js/</a></p>

<pre><code>dtrace -o stacks.out -n 'profile-97/execname == "node" &amp;&amp; arg1/{
  @[jstack(100, 8000)] = count(); } tick-60s { exit(0); }'
</code></pre>

<ul>
<li><strong>v8-profiler</strong></li>
</ul>


<p>@Github <a href="https://github.com/dannycoates/v8-profiler">https://github.com/dannycoates/v8-profiler</a></p>

<!--more-->


<pre><code>var profiler = require('v8-profiler');

profiler.startProfiling('startup');
slowStartupFoo();
profiler.stopProfiling('startup');

profiler.takeSnapshot('beforeLeak');
leakyFoo();
profiler.takeSnapshot('afterLeak');
</code></pre>

<ul>
<li><strong>node-inspector</strong></li>
</ul>


<p>@Github <a href="https://github.com/dannycoates/node-inspector">https://github.com/dannycoates/node-inspector</a></p>

<pre><code>node --debug app.js
</code></pre>

<ul>
<li><strong>node-profiler</strong></li>
</ul>


<p>@Github <a href="https://github.com/bnoordhuis/node-profiler">https://github.com/bnoordhuis/node-profiler</a></p>

<pre><code>var profiler = require('profiler');
//
// &lt;here be code you don't want to profile&gt;
//
profiler.resume();
//
// &lt;performance critical code here&gt;
//
profiler.pause();
</code></pre>

<ul>
<li><strong>Nodetime</strong>
<a href="http://nodetime.com/">http://nodetime.com/</a></li>
</ul>


<p>Nodetime reveals response time and other internals of HTTP requests and underlying HTTP / database calls in your Node.js application. Coupled with related process and OS state information it enables tracing performance problems down to the root cause. Nodetime supports multiple native and external APIs and libraries.</p>

<pre><code>var nodetime = require('nodetime');
nodetime.on('session', function(id) {
  // do something with session id here
});
nodetime.profile();
</code></pre>

<ul>
<li><strong>Callgrind</strong></li>
</ul>


<p>Callgrind is a profiling tool that records the call history among functions in a program's run as a call-graph. By default, the collected data consists of the number of instructions executed, their relationship to source lines, the caller/callee relationship between functions, and the numbers of such calls. Optionally, cache simulation and/or branch prediction (similar to Cachegrind) can produce further information about the runtime behavior of an application.</p>

<p><a href="http://valgrind.org/docs/manual/cl-manual.html">http://valgrind.org/docs/manual/cl-manual.html</a></p>

<pre><code>valgrind --tool=callgrind node app.js
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Find out Unique Elements in a Javascript Array]]></title>
    <link href="http://mindon.github.com/blog/2012/04/17/find-out-unique-javascript-array-elements/"/>
    <updated>2012-04-17T22:53:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/04/17/find-out-unique-javascript-array-elements</id>
    <content type="html"><![CDATA[<p>To remove duplicate elements in a array, there are a few algorithms to implement.</p>

<h2>Algorithm 1</h2>

<pre><code>function unique1(d) {
  var o = {}, i, l = d.length, r = [];
  for(i=0; i&lt;l;i+=1) o[d[i]] = d[i];
  for(i in o) r.push(o[i]);
  return r;
};
</code></pre>

<p>This method has 2 loops, that's a big time-cost problem.</p>

<h2>Algorithm 2</h2>

<p>reduce one loop from the algorithm 1, improve a litter bit</p>

<pre><code>function unique2(d) {
  var r = [], i = {}, j = 0;
  for(var k=0, kmax=d.length; k&lt;kmax; k++) {
    if(!i[d[k]]) {
      i[d[k]] = 1;
      r[j++]=d[k];
    }
  }
  return r;
}
</code></pre>

<h2>Algorithm 3</h2>

<p>In ECMA-262 standard, there's a indexOf method for Array object, we use it to improve a lot.</p>

<pre><code>function unique3(d) {
  var r = [], j = 0;
  for(var k=0, kmax=d.length; k&lt;kmax; k++) {
    if(r.indexOf(d[k]) &lt; 0) {
      r[j++]=d[k];
    }
  }
  return r;
}
</code></pre>

<p>and it could be better...</p>

<!--more-->


<h2>Algorithm 4</h2>

<p>jQuery.unique source ( Sizzle.uniqueSort ), it's the fastest one.</p>

<pre><code>function unique4( d ) {
  d.sort();
  for (var i = 1; i &lt; d.length; i++ ) {
    if ( d[i] === d[ i - 1 ] ) {
      d.splice( i--, 1 );
    }
  }

  return d;
};
</code></pre>

<h2>Compare these 4 algorithms:</h2>

<p>Speed(Performance): 4 > 3 > 2 > 1</p>

<p>Testing code:</p>

<pre><code>var d = [1, 3, 2, '2'];

function test(fn, count) {
  var t = new Date().getTime();
  for(var k =0 ; k &lt; count; k++) {
    fn(d);
  }

  return new Date().getTime() - t;
}

var t1 = test(unique1, 100000);
var t2 = test(unique2, 100000);
var t3 = test(unique3, 100000);
var t4 = test(unique4, 100000);
</code></pre>

<p>Time consume result sample:</p>

<p>IE 9(in Editplus):</p>

<pre><code>[t1,t2,t3,t4] = [93, 55, 25, 25]
</code></pre>

<p>IE 9(Browser):</p>

<pre><code>[t1,t2,t3,t4] = [508, 449, 432, 271]
</code></pre>

<p>Chrome 18:</p>

<pre><code>[t1,t2,t3,t4] = [141, 59, 43, 43]
</code></pre>

<p>Firefox 11:</p>

<pre><code>[t1,t2,t3,t4] = [129, 118, 25, 37]
</code></pre>

<p>(use == instead of === in unique4 will make it a little bit faster.)</p>

<h2>Problems</h2>

<p>handling a array with different data types:</p>

<pre><code>var d = [1, 3, 2, '2'];
</code></pre>

<p>results:</p>

<pre><code>unique1(d) : [1, '2', 3]

unique2(d) : [1, 3, 2]

unique3(d) : [1, 3, 2, '2']

unique4(d) : [1, 2, '2', 3]
</code></pre>

<p>if we change the === in unique4 into ==, then the new result will be</p>

<pre><code>unique4(d) : [1, 2, 3]
</code></pre>

<p>Another issue is the order problem:</p>

<p>unique1 and unique4 will re-order elements.</p>

<p>unique2 and unique3 will keep the original order.</p>

<p>Algorithm 3: unique3 depends on indexOf of ECMA-262 standard implement, and it cannot handle different data types.</p>

<h2>Conclusion</h2>

<ul>
<li>Same data-type elements</li>
</ul>


<p>orgianl order: <strong>unique3</strong></p>

<p>sorted: <strong>unique4</strong></p>

<ul>
<li>Different data-type elements ( thinking '2' is the same as 2 )</li>
</ul>


<p>orgianl order: <strong>unique2</strong></p>

<p>sorted: <strong>unique4</strong> (!NOTICE: change === into == )</p>

<ul>
<li>Different data-type elements ( thinking '2' is different from 2 )</li>
</ul>


<p>orgianl order: <strong>unique3</strong></p>

<p>sorted: <strong>unique4</strong> (!NOTICE: keep === )</p>

<p>以上为去除数组中的重复元素的各种算法，性能及问题。</p>

<p>--- Mindon(麦盾) Apri 18, 2012 Shenzhen(深圳)</p>

<p>（整理这样一篇东西还挺耗时的，子时了zZzZZz... ）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Match encrypt &amp; decrypt in PHP and NodeJS]]></title>
    <link href="http://mindon.github.com/blog/2012/03/31/match-encrypt-and-decrypt-in-php-and-nodejs/"/>
    <updated>2012-03-31T00:20:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/03/31/match-encrypt-and-decrypt-in-php-and-nodejs</id>
    <content type="html"><![CDATA[<p>String encoded in PHP needs to decode in NodeJS?</p>

<p>Or encoded in NodeJS needs to decode in PHP?</p>

<p>Here's a match result with aes-128-cbc &amp; their demo code, you could choose your 16 characters key &amp; a different iv(initial vector):</p>

<p>NodeJS</p>

<pre><code>var crypto = require('crypto')
  , key = 'abcdefghijklmnop'
  , iv = '0123456789123456'
  , cipher = crypto.createCipheriv('aes-128-cbc', key, iv);

var text = 'Clipher Message'
  , crypted = cipher.update(text, 'utf-8', 'hex');

crypted += cipher.final('hex');

// encrypted
console.log(crypted);


var decipher = crypto.createDecipheriv('aes-128-cbc', key, iv)
  , decrypted = decipher.update(crypted, 'hex', 'utf-8');

decrypted += decipher.final('utf-8');

// decrypted
console.log(decrypted);
</code></pre>

<!--more-->


<p>PHP</p>

<pre><code>&lt;?php
function hex2bin($hex_string) {
    return pack('H*', $hex_string);
}
$text = 'Clipher Message';
$key = 'abcdefghijklmnop';
$iv = '0123456789123456';

function iEncrypt($data, $key, $iv) {
    $blocksize = 16;
    $pad = $blocksize - (strlen($data) % $blocksize);
    $data = $data . str_repeat(chr($pad), $pad);
    return bin2hex(mcrypt_encrypt(MCRYPT_RIJNDAEL_128, $key, $data, MCRYPT_MODE_CBC, $iv));
}

function iDecrypt($data, $key, $iv) {
    return mcrypt_decrypt(MCRYPT_RIJNDAEL_128, $key, hex2bin($data), MCRYPT_MODE_CBC, $iv);
}

$encrypted = iEncrypt($text, $key, $iv);
echo $encrypted.'&lt;br/&gt;';
echo iDecrypt($encrypted, $key, $iv);
?&gt;
</code></pre>

<p><a href="http://stackoverflow.com/questions/3716691/relation-between-input-and-ciphertext-length-in-aes">Relation between input and ciphertext length in AES</a></p>

<blockquote><p>Some encryption algorithms are stream ciphers which encrypt data "bit by bit" (or "byte by byte"). Most of them produce a key-dependent stream of pseudo-random bytes, and encryption is performed by XORing that stream with the data (decryption is identical). With a stream cipher, the encrypted length is equal to the plain data length.</p>

<p>Other encryption algorithms are block ciphers. A block cipher, nominally, encrypts a single block of data of a fixed length. AES is a block cipher with 128-bit blocks (16 bytes). Note that AES-256 also uses 128-bit blocks; the "256" is about the key length, not the block length. The chaining mode is about how the data is to be split into several such blocks (this is not easy to do it securely, but CBC mode is fine). Depending on the chaining mode, the data may require some padding, i.e. a few extra bytes added at the end so that the length is appropriate for the chaining mode. The padding must be such that it can be unambiguously removed when decrypting.</p>

<p>With CBC mode, the input data must have a length multiple of the block length, so it is customary to add PKCS#5 padding: if the block length is n, then at least 1 byte is added, at most n, such that the total size is a multiple of n, and the last added bytes (possibly all of them) have numerical value k where k is the number of added bytes. Upon decryption, it suffices to look at the last decrypted byte to recover k and thus know how many padding bytes must be ultimately removed.</p>

<p>Hence, with CBC mode and AES, assuming PKCS#5 padding, if the input data has length d then the encrypted length is (d + 16) &amp; ~15. I am using C-like notation here; in plain words, the length is between d+1 and d+16, and multiple of 16.</p>

<p>There is a mode called CTR (as "counter") in which the block cipher encrypts successive values of a counter, yielding a stream of pseudo-random bytes. This effectively turns the block cipher into a stream cipher, and thus a message of length d is encrypted into d bytes.</p>

<p>Warning: about all encryption systems (including stream ciphers) and modes require an extra value called the IV (Initial Value). Each message shall have its IV, and no two messages encrypted with the same key shall use the same IV. Some modes have extra requirements; in particular, for both CBC and CTR, the IV shall be selected randomly and uniformly with a cryptographically strong pseudo-random number generator. The IV is not secret, but must be known by the decrypter. Since each message gets its own IV, it is often needed to encode the IV along with the encrypted message. With CBC or CTR, the IV has length n, so, for AES, that's an extra 16 bytes. I do not know what mcrypt does with the IV, but, cryptographically speaking, the IV must be managed at some point.</p></blockquote>

<p>An article on AES cliper (in Chinese) <a href="http://blog.csdn.net/searchsun/article/details/2516191">http://blog.csdn.net/searchsun/article/details/2516191</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Amazing WebGL and HTML5 Apps]]></title>
    <link href="http://mindon.github.com/blog/2012/03/26/amazing-webgl-and-html5-apps/"/>
    <updated>2012-03-26T22:13:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/03/26/amazing-webgl-and-html5-apps</id>
    <content type="html"><![CDATA[<ul>
<li><strong>Cell Cycle</strong>
Creating 3d-printable cellular models.</li>
</ul>


<p>You can shape, twist, and subdivide, transforming a simple mesh to a complex patterned structure.</p>

<p><img src="/images/blog/chrome/nervous.png" alt="" />
Visit: <a href="http://www.chromeexperiments.com/detail/cell-cycle/">Chrome Experiments</a> | <a href="http://n-e-r-v-o-u-s.com/">Nervous System</a></p>

<ul>
<li><strong>Fluid Simulation with Turing Patterns</strong>
Author: <strong>Felix Woitzel</strong> <a href="http://www.cake23.de">http://www.cake23.de</a></li>
</ul>


<p>This demo is built on the Reaction-Diffusion template from the WebGL playground and Evgeny Demidov's fluid simulation.</p>

<p><img src="/images/blog/chrome/fluid.png" alt="" />
Visit: <a href="http://www.chromeexperiments.com/detail/fluid-simulation-with-turing-patterns/">Chrome Experiments</a></p>

<!--more-->


<ul>
<li><strong>Zygote Body</strong>
Author: <strong>Zygote</strong> <a href="http://www.zygote.com/">http://www.zygote.com/</a></li>
</ul>


<p>Explore a detailed 3D model of the human body. Zygote Body uses WebGL and taps directly into the GPU to accelerate rendering of 3D scenes. Take it for a spin and learn about different layers of anatomy by moving the slider or toggling layers on and off with the buttons. Not sure where something is? Try the search box</p>

<p><img src="/images/blog/chrome/body.png" alt="" />
Visit: <a href="http://www.chromeexperiments.com/detail/body-browser/">Chrome Experiments</a></p>

<ul>
<li><strong>Google Maps - Street View</strong></li>
</ul>


<p>Google Maps with Street View lets you explore places around the world through 360-degree street-level imagery. You can check out restaurants, plan your next trip or even visit the Amazon!</p>

<p><img src="/images/blog/chrome/amazon.jpg" alt="" />
Visit: <a href="http://maps.google.com/help/maps/streetview/gallery.html">Street View Gallery</a></p>

<p>More will be appended ...</p>

<h2>How to get WebGL enable?</h2>

<ul>
<li><strong>Firefox</strong>
WebGL is supported in <a href="http://www.mozilla.com/en-US/firefox/new/">Firefox/4.0</a></li>
</ul>


<p>For testing/debugging purposes, software rendering can be used through OSMesa (off-screen Mesa), by setting the "webgl.osmesalib" variable to point to the OSMesa shared library (typically /usr/lib/libOSMesa.so). Note that the OSMesa library is required to use "gl" prefixes, not "mgl".
You can also try setting the "webgl.force-enabled" variable to true if WebGL is not working. Variables can be accessed by typing "about:config" in the address bar.</p>

<ul>
<li><strong>Safari</strong></li>
</ul>


<p>WebGL is supported on Mac OS X 10.6 in the <a href="http://nightly.webkit.org/">WebKit nightly builds</a>.</p>

<p>After downloading and installing the browser, open the Terminal and type the following:</p>

<pre><code>defaults write com.apple.Safari WebKitWebGLEnabled -bool YES
</code></pre>

<p>This command only needs to be run once. All future invocations of the browser will run with WebGL enabled.</p>

<ul>
<li><strong>Chrome</strong></li>
</ul>


<p>WebGL is available in the <a href="http://www.google.com/chrome/">stable release of Chrome</a>.</p>

<p>Please report issues you find to either the <a href="https://www.khronos.org/webgl/public-mailing-list/">public WebGL mailing list</a> or via the <a href="http://code.google.com/p/chromium/issues/list">Chromium issue tracker</a>.</p>

<p>Enable WebGL in Chrome - <a href="about:flags">about:flags</a></p>

<p><a href="http://commondatastorage.googleapis.com/chromium-browser-continuous/index.html?path=Win/">Chrome Nightly Build</a></p>

<ul>
<li><strong>Opera</strong></li>
</ul>


<p>WebGL is supported in <a href="http://www.opera.com/browser/next/">Opera 12 alpha</a>.</p>

<p><a href="http://www.khronos.org/webgl/wiki/Getting_a_WebGL_Implementation">Getting a WebGL Implementation</a></p>

<p><a href="http://wjlgryx.iteye.com/blog/973961">开启WebGL!</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Start a NodeJS addon under windows]]></title>
    <link href="http://mindon.github.com/blog/2012/03/24/start-a-nodejs-addon-under-windows/"/>
    <updated>2012-03-24T12:15:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/03/24/start-a-nodejs-addon-under-windows</id>
    <content type="html"><![CDATA[<h2>Code &amp; tools preparation</h2>

<p><strong>NodeJS source code</strong>
<a href="https://github.com/joyent/node">https://github.com/joyent/node</a></p>

<p><strong>VISUAL C++ 2010 EXPRESS</strong>
Free tools to create applications on Windows using Visual C++.
(Needs SP3 under winxp)</p>

<p><a href="http://www.microsoft.com/visualstudio/en-us/products/2010-editions/visual-cpp-express">Download VC++ 2010 EXPRESS</a></p>

<p><strong>Python 2.6 or 2.7</strong>
<a href="http://www.python.org/download/">http://www.python.org/download/</a></p>

<h2>Compile your NodeJS</h2>

<p>Run vcbuild.bat under NodeJS source folder.</p>

<h2>Compile the Hello-world</h2>

<p><strong>General Steps also fit for other addons</strong></p>

<!--more-->


<p>Get into folder test\addons\hello-world\ of NodeJS source</p>

<p>1, <strong>Edit binding.cc</strong></p>

<p>Add <strong>NODE_MODULE_EXPORT</strong> before <strong>void init</strong>
or Add <strong>NODE_EXTERN</strong> between <strong>void</strong> and <strong>init</strong></p>

<p>This could help avoid running "Unkown error" when require the addon in nodejs.</p>

<p>2, <strong>Generate project files</strong></p>

<pre><code>set NODE_ROOT=your-node-js-src-root 
python %NODE_ROOT%\tools\gyp_addon binding.gyp
</code></pre>

<p>3, <strong>Setup VC ENV variables</strong></p>

<p>Run</p>

<pre><code>"D:\Microsoft Visual Studio 10.0\VC\vcvarsall.bat"
</code></pre>

<p>4, <strong>Build</strong></p>

<pre><code>@set Configuration=Release
</code></pre>

<p>5, <strong>Test</strong></p>

<pre><code>node
require('./Release/binding')
</code></pre>

<h2>Compile node-expat</h2>

<ol>
<li><p>Install Expat under windows
<a href="http://sourceforge.net/projects/expat/files/latest/download">http://sourceforge.net/projects/expat/files/latest/download</a></p></li>
<li><p>Prepare GYP build file</p></li>
</ol>


<pre><code>{
  'targets': [
    {
      'target_name': 'node-expat',
      'sources': [ 'node-expat.cc' ],
      'include_dirs': [ 'expat-install-folder/Source/lib' ],
      'libraries': [ '-lexpat-install-folder/Bin/libexpat.lib'  ],
    }
  ]
}
</code></pre>

<h2>Compile node-xmpp</h2>

<ol>
<li><p>ICU unicode
<a href="http://site.icu-project.org/download/48">http://site.icu-project.org/download/48</a></p></li>
<li><p>node-stringprep windows version
<a href="https://github.com/andreasbotsikas/node-stringprep/tree/windows-build">https://github.com/andreasbotsikas/node-stringprep/tree/windows-build</a></p></li>
<li><p>node-xmpp</p></li>
</ol>


<p><a href="https://github.com/astro/node-xmpp">https://github.com/astro/node-xmpp</a></p>

<p><a href="http://www.adarshr.com/papers/xmpp">http://www.adarshr.com/papers/xmpp</a></p>

<h2>Reference</h2>

<ul>
<li><p><strong>Addons NodeJS document</strong>
<a href="http://nodejs.org/docs/latest/api/addons.html">http://nodejs.org/docs/latest/api/addons.html</a></p></li>
<li><p><strong>Windows上编译NodeJS native extension</strong>
<a href="http://cnodejs.org/topic/4f1fa3ed817ae4105c040fb4">http://cnodejs.org/topic/4f1fa3ed817ae4105c040fb4</a></p></li>
<li><p><strong>Building a Node.js Windows C/C++ Addon</strong>
<a href="http://coderesearchlabs.com/articles/BNWCA.pdf">http://coderesearchlabs.com/articles/BNWCA.pdf</a></p></li>
</ul>

]]></content>
  </entry>
  
</feed>
