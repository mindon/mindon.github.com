<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Web-Tech | Mindon.IDEA]]></title>
  <link href="http://mindon.github.com/blog/categories/web-tech/atom.xml" rel="self"/>
  <link href="http://mindon.github.com/"/>
  <updated>2012-09-15T15:16:52+08:00</updated>
  <id>http://mindon.github.com/</id>
  <author>
    <name><![CDATA[Mindon Feng]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CSS3 Tai-Chi Diagram]]></title>
    <link href="http://mindon.github.com/blog/2012/08/28/css3-tai-chi/"/>
    <updated>2012-08-28T21:25:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/08/28/css3-tai-chi</id>
    <content type="html"><![CDATA[<p>If you cannot see a Tai-Chi diagram, then your browser is old enough. Maybe you should update it to a morden one: IE9+, Safari, Chrome or Firefox, or Opera.</p>

<p>If you could see a rolling Tai-Chi, then your browser is ready for CSS3, that will be great.</p>

<!--more-->


<p>Here's the Chinese Tai-Chi diagram:</p>

<div>
<link rel="stylesheet" type="text/css" href="http://mindon.github.com/blog/styles/tai-chi.css" >
<div class="yinyang">
  <div class="yin"><div class="yinc"><div class="yind"></div></div></div>
  <div class="yang"><div class="yangc"><div class="yangd"></div></div></div>
</div>
<!--[if lt IE 9]>
It's a pitty, you are using a browser out of the date.
<![endif]-->
</div>


<p>Wood-Fire-Metal-Water-Earth! The 5 fundamental elements running circle balance in a human body.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web Lab]]></title>
    <link href="http://mindon.github.com/blog/2012/08/04/web-lab/"/>
    <updated>2012-08-04T17:28:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/08/04/web-lab</id>
    <content type="html"><![CDATA[<p>"Web Lab. A series of interactive Chrome Experiments made by Google. See the magic of the web brought to life. Open to the world online. Live from the Science Museum, London. "</p>

<p>这是个很好玩的实验室。Google建的一个位于伦敦的科学馆。科学馆里配置了一些设备：如乐器和沙绘机器人（Sketchbots）。您可以通过他们的网站来编曲演奏乐器，跟世界上其他地方的人合奏。也可以通过摄像头拍照，让科学馆的机器人绘制您的头像——所有这一切，您都可以通过现场摄像头看到真实科学馆的设备看到设备的现场实时操作。很不可思议吧？您在体验一家位于伦敦的科学馆。</p>

<p>体验一下？<a href="http://www.chromeweblab.com/">Web Lab</a> :-) You need a <a href="https://www.google.com/intl/en/chrome/browser/">Chrome Browser</a>(<a href="https://www.google.com/intl/zh-CN/chrome/browser/">中文版</a>), I think.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Auto-Resize Images in Web Pages]]></title>
    <link href="http://mindon.github.com/blog/2012/07/21/simple-auto-resize-images-in-web-pages/"/>
    <updated>2012-07-21T10:34:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/07/21/simple-auto-resize-images-in-web-pages</id>
    <content type="html"><![CDATA[<p>Nowdays, Mobile web needs to handle different mobile devices with different screen resolutions. Most effective way may be providing different sizes images for different screens in server.</p>

<p>Use this meta in your HTML header could reisze the web page to the device's resolution.</p>

<pre><code>&lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;
</code></pre>

<p>How can we make the images auto-resize in web pages without a server or any javascript?</p>

<p>Here's the simple HTML code:</p>

<pre><code>&lt;style type="text/css"&gt;img {display:block}&lt;/style&gt;
&lt;table width="100%" style="table-layout:fixed"&gt;
  &lt;tr&gt;
  &lt;td width="50%"&gt;&lt;a style="width:100%" href="#"&gt;&lt;img width="100%" border="0"
   src="http://mindon.github.com/images/mindon.png" /&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;td width="50%"&gt;&lt;a style="width:100%" href="#"&gt;&lt;img width="100%" border="0"
   src="http://mindon.github.com/images/mindon.png" /&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
</code></pre>

<p>The CSS help to remove paddings around the images, and the <strong>table-layout:fixed</strong> help to make a smaller width of image than its origin width.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solve NodeJS 0.8 Build Problem]]></title>
    <link href="http://mindon.github.com/blog/2012/07/20/solve-nodejs-0.8-build-problem/"/>
    <updated>2012-07-20T22:04:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/07/20/solve-nodejs-0.8-build-problem</id>
    <content type="html"><![CDATA[<p>NodeJS before 0.8 is very easy to make &amp; install, which only needs OpenSSL.</p>

<p>But when I tried to update my NodeJS to version 0.8+, problems keep coming...</p>

<p>Here's a few pre-conditions for a successful make of NodeJS v0.8+:</p>

<ol>
<li><p>GNU make 3.8.1+</p></li>
<li><p>Python 2.6 or 2.7</p></li>
<li><p>setenv FLOCK or export FLOCK</p></li>
</ol>


<p>setenv LINK g++ or export LINK=g++</p>

<p>Do remember check issues above when you meet problems building new version of NodeJS.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serve in Multi-Languages]]></title>
    <link href="http://mindon.github.com/blog/2012/06/12/serve-in-multi-languages/"/>
    <updated>2012-06-12T23:00:00+08:00</updated>
    <id>http://mindon.github.com/blog/2012/06/12/serve-in-multi-languages</id>
    <content type="html"><![CDATA[<p>When we want our product -- a webpage for example -- servered in multi-languages, what would we do?</p>

<p>Simple once working method is copy-n-translate:  Making a full copy of original language resource, translate and replace the texts. It's a hard and dirty work.</p>

<p>Unless a few simple pages, no one will do it in this way nowdays.</p>

<p>We like to use text-id and text resources in our projects: desktop applications, J2EE projects, php websites ...</p>

<p>But all of these are working in the same mode: Template + Text-Resources + Tool = Result</p>

<!--more-->


<p><img src="/images/blog/multi-langs.png" alt="" /></p>

<p>(pro: proposition, con: contradition)</p>

<h2>Template</h2>

<ul>
<li><strong>Raw language text as text-resource-id</strong></li>
</ul>


<p>pro: Readable, directly simple, no extra work but replacement. One language file is template itself.</p>

<p>con: Dirty work, if same text appears, you have to manual replace them all.</p>

<h1>q/s#: Could we make maual-process auto?</h1>

<ul>
<li><strong>Named ID as text-resource-id</strong></li>
</ul>


<p>pro: Avoid repeat work on same phrases or sentences.</p>

<p>con: Named IDs' management, unintuitive templates using named IDs.</p>

<h1>q/s#: Could we auto-generate the named IDs and avoid unintuitive templates?</h1>
]]></content>
  </entry>
  
</feed>
