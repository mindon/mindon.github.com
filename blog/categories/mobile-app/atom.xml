<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mobile-App | Mindon.IDEA]]></title>
  <link href="http://mindon.github.com/blog/categories/mobile-app/atom.xml" rel="self"/>
  <link href="http://mindon.github.com/"/>
  <updated>2014-03-15T20:14:36+08:00</updated>
  <id>http://mindon.github.com/</id>
  <author>
    <name><![CDATA[Mindon Feng]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[QML Features Should be in BlackBerry 10 OS]]></title>
    <link href="http://mindon.github.com/blog/2014/03/15/qml-features-expected-in-blackberry-10-os/"/>
    <updated>2014-03-15T18:51:00+08:00</updated>
    <id>http://mindon.github.com/blog/2014/03/15/qml-features-expected-in-blackberry-10-os</id>
    <content type="html"><![CDATA[<p>I'm one of developers of WeChat BB10 version. Mainly charge on QML UI and interactivities with app APIs.</p>

<p>BB10 WeChat may be one of the most complex bb10 apps in BlackBerry World.</p>

<p>Here's features should be in BB10 QML, which I implemented in the WeChat mobile app for BB10.</p>

<ul>
<li><p>QML actived event</p></li>
<li><p>QML closed event</p></li>
<li><p>QML Data Share Methods: a) Method to tranfer data from QML A to B ( open B from A ); b) Methods to set/get/clear app shared data in QML.</p></li>
</ul>


<!--more-->


<ul>
<li><p>QML reuse or not ( A - B - C - D: if open QML B from D, close D and C, reuse B )</p></li>
<li><p>QML asyn publish/subscribe methods</p></li>
<li><p>Flag to turn off auto-translation in system language ( Dialog, Back and Invocations )</p></li>
<li><p>Support mutil-image previewer (zoomable) with invocation.</p></li>
<li><p>Letters scrollbar</p></li>
<li><p>A method to call js methods in QML from ListItem</p></li>
</ul>


<p>If BlackBerry 10 want more better apps, Its QML should provide features above. Or in a js library for QML.</p>

<p><span id="link-tags">BB10;BlackBerry;WeChat;QML</span></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UltimEyes: to Improve Your Vision?]]></title>
    <link href="http://mindon.github.com/blog/2014/03/06/ultimeyes-to-improve-your-vision/"/>
    <updated>2014-03-06T06:19:00+08:00</updated>
    <id>http://mindon.github.com/blog/2014/03/06/ultimeyes-to-improve-your-vision</id>
    <content type="html"><![CDATA[<p>The UltimEyes, is a mobile app for <strong>iPad</strong> series with <strong>retina</strong> only.</p>

<blockquote><p> “ULTIMEYES® is a non-invasive interactive program designed specifically to improve vision by optimizing visual processing in just four simple 25-minute sessions per week for a total duration of eight weeks.”</p></blockquote>

<!--more-->


<p>It is said that it has potential to improve vision! That's an app i expected to see long time ago. Now it comes one, but the UltimeEyes Pro requests a serial number and UltimeEyes is saling  almost 6 US$, that's 40RMB on iTune - a little bit high price for an app you don't know much.</p>

<p>University of California, Riverside neuroscientist Aaron Seitz, who created the software, shared recent results with Current Biology, with eye-popping results:</p>

<blockquote><p> “Seitz worked with 19 players on the University of California, Riverside, baseball team, and showed that his app UltimEyes lengthened the distance at which the players could see clearly by an average of 31 percent. After using the app for 30 25-minute intervals, players saw an improvement that pushed many of them beyond normal 20/20 vision, including seven who attained freakishly good 20/7.5 vision—meaning that at a distance of 20 feet, they were clearly seeing what someone with normal vision could see at no farther than 7.5 feet away.”</p></blockquote>

<p>The game is showing you some fuzzy patterns that you try to identify as quickly as possible from a similarly colored background. Faster speeds and repetition “teach” the brain to better process visual stimulation quicker, which may result in improved vision at farther distances.</p>

<p>It's more like a brain game than an eyes training.</p>

<p>To train the eyes themself, it should be a device with at least two parts: one near, one far - to switch status of the eyeballs and its control muscles around.</p>

<p>Is the app will work for most people around the world? We are staring all kinds of screens all day long. It's such an important thing to keep our eyes sharp and clear.</p>

<p><a href="http://mindon.github.io/blog/2012/04/26/the-eye-limits-the-brains-learning-potential/">The eye limits the brain's learning potential</a></p>

<p><span id="link-tags">UltimEyes;iPad;Retina;iTune</span></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fix adb error under win8]]></title>
    <link href="http://mindon.github.com/blog/2013/09/15/fix-adb-error-under-win8/"/>
    <updated>2013-09-15T16:27:00+08:00</updated>
    <id>http://mindon.github.com/blog/2013/09/15/fix-adb-error-under-win8</id>
    <content type="html"><![CDATA[<h2>error: device not found</h2>

<p>1)  Find "Device Manager" in "PC Info";</p>

<p>2)  Get your device in the "Other devices";</p>

<p>3)  Update driver and choose your adt folder to install the driver.</p>

<h2>Failure [INSTALL_PARSE_FAILED_INCONSISTENT_CERTIFICATES]</h2>

<p>Uninstall your old version app on your device before install the new apk.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building mobile apps from the command line]]></title>
    <link href="http://mindon.github.com/blog/2013/09/15/build-mobile-apps-from-command-line/"/>
    <updated>2013-09-15T09:04:00+08:00</updated>
    <id>http://mindon.github.com/blog/2013/09/15/build-mobile-apps-from-command-line</id>
    <content type="html"><![CDATA[<p>Following are command line reference of building mobile apps for Android, iOS, BB10 and WP8.</p>

<h1>Android</h1>

<p>Managing Projects from the Command Line</p>

<p><a href="http://developer.android.com/tools/projects/projects-cmdline.html">http://developer.android.com/tools/projects/projects-cmdline.html</a></p>

<h2>Creating an Android Project</h2>

<pre><code>android create project \
--target &lt;target_ID&gt; \
--name &lt;your_project_name&gt; \
--path path/to/your/project \
--activity &lt;your_activity_name&gt; \
--package &lt;your_package_namespace&gt;
</code></pre>

<h2>Updating a Project</h2>

<pre><code>android update project --name &lt;project_name&gt; --target &lt;target_ID&gt;
--path &lt;path_to_your_project&gt;
</code></pre>

<h2>Setting up a Library Project</h2>

<pre><code>android create lib-project --name &lt;your_project_name&gt; \
--target &lt;target_ID&gt; \
--path path/to/your/project \
--package &lt;your_library_package_namespace&gt;
</code></pre>

<p><a href="http://developer.android.com/guide/topics/manifest/manifest-intro.html">The AndroidManifest.xml File Reference</a></p>

<!--more-->


<h2>Updating a library project</h2>

<pre><code>android update lib-project \
--target &lt;target_ID&gt; \
--path path/to/your/project
</code></pre>

<h2>Referencing a Library Project</h2>

<pre><code>android update project \
--target &lt;target_ID&gt; \
--path path/to/your/project
--library path/to/library_projectA
</code></pre>

<p>This command updates the application project's build properties to include a reference to the library project. Specifically, it adds an android.library.reference.n property to the project's project.properties file.</p>

<h2>Declaring library components in the manifest file</h2>

<p>In the manifest file of the application project, you must add declarations of all components that the application will use that are imported from a library project. For example, you must declare any <activity>, <service>, <receiver>, <provider>, and so on, as well as <permission>, <uses-library>, and similar elements.</p>

<p>Building and Running from the Command Line</p>

<p><a href="http://developer.android.com/tools/building/building-cmdline.html">http://developer.android.com/tools/building/building-cmdline.html</a></p>

<h2>Building in Debug/Release Mode</h2>

<pre><code>ant debug
ant release
</code></pre>

<p><a href="http://developer.android.com/tools/publishing/app-signing.html">Signing Your Applications</a></p>

<h2>Running on a Device</h2>

<pre><code>adb -d install path/to/your/app.apk
</code></pre>

<p>update installation</p>

<pre><code>adb -d -r install path/to/your/app.apk
</code></pre>

<h1>iOS</h1>

<p>To be able to find the command line, the trick was to watch the system console log while running a “build and archive” through Xcode.</p>

<pre><code>xcodebuild -project myproject1 -target target1


/usr/bin/xcrun -sdk iphoneos PackageApplication -v "${RELEASE_BUILDDIR}/${APPLICATION_NAME}.app" -o "${BUILD_HISTORY_DIR}/${APPLICATION_NAME}.ipa" --sign "${DEVELOPPER_NAME}" --embed "${PROVISONNING_PROFILE}"
</code></pre>

<p>RELEASE_BUILDDIR needs to be an absolute path.</p>

<p>you don't need the --sign or --embed options if you wish to keep the same signing/profile used when the .app was built.</p>

<p>Note that the ipa file path in -o "${ipa_path}" must be an absolute path. Otherwise you will probably get error: Unable to create '.../...ipa' or it will be silently ignored creating.</p>

<pre><code>xcodebuild -scheme &lt;SchemeName&gt; archive
</code></pre>

<p>Make sure you have selected the correct Xcode release by using xcode-select <path to Xcode.app></p>

<p>to resign a build</p>

<pre><code>codesign -f -vv -s "$DistributionIdentity" "$APPDIR"
</code></pre>

<h2>Other References</h2>

<p><a href="http://nachbaur.com/blog/building-ios-apps-for-over-the-air-adhoc-distribution">Building iOS apps for Over-The-Air AdHoc distribution</a></p>

<p><a href="https://github.com/ghughes/fruitstrap">Fruitstrap</a> is a command line tool that uses the private MobileDevice API to install an iOS application on a physical device over USB. It’s pretty easy to get set up.</p>

<pre><code>xcodebuild -scheme fruitstrap-demo -sdk iphoneos build

fruitstrap build/Debug-iphoneos/fruitstrap-demo.app
</code></pre>

<p>One command to build and install the app on the device.</p>

<pre><code>FRUITSTRAP_CLI=1 xcodebuild -scheme fruitstrap-demo -sdk iphoneos build
</code></pre>

<p><a href="https://github.com/facebook/xctool">xctool</a> is a replacement for Apple's xcodebuild that makes it easier to build and test iOS and Mac products. It's especially helpful for continuous integration.</p>

<h1>BlackBerry 10</h1>

<p>make -f [configuration]/makefile [target]</p>

<p><a href="http://developer.blackberry.com/native/documentation/core/com.qnx.doc.ide.userguide/topic/devel_build_from_command_line.html">Build from the command line</a></p>

<pre><code>mkbuild -ws &lt;workspace&gt; [options] 
mkbuild [-project] &lt;full_project_path&gt; [options] 
mkbuild -ws &lt;workspace&gt; -projects &lt;project1,project2&gt; [options]
</code></pre>

<p><a href="http://devblog.blackberry.com/2013/05/building-apps-without-an-ide/">Command Line Rocks! Building BlackBerry 10 Apps Without An IDE</a></p>

<pre><code>qcc -Vgcc_ntoarmv7le main.c -o main
</code></pre>

<p>for simulator</p>

<pre><code>qcc -Vgcc_ntox86 main.c -o main
</code></pre>

<p>bar-descriptor.xml file <a href="https://developer.blackberry.com/native/documentation/bb10/com.qnx.doc.native_sdk.devguide/com.qnx.doc.native_sdk.devguide/topic/r_blackberry_tablet_dtd_intro.html#r_blackberry_tablet_dtd_intro">full list of BAR application descriptor parameters</a></p>

<pre><code>&lt;qnx&gt;
  &lt;id&gt;com.example.GoodbyeIDE&lt;/id&gt;
  &lt;versionNumber&gt;1&lt;/versionNumber&gt;
  &lt;name&gt;Goodbye IDE&lt;/name&gt;
  &lt;asset path="main" entry="true"&gt;main&lt;/asset&gt;
&lt;/qnx&gt;
</code></pre>

<p>To create a BAR file: (<a href="https://www.blackberry.com/SignedKeys/codesigning.html">register with RIM to sign applications</a>, <a href="https://developer.blackberry.com/native/documentation/bb10/com.qnx.doc.native_sdk.devguide/com.qnx.doc.native_sdk.devguide/topic/t_setup_manual_create_debug_token_cmdline.html">create a debug token</a>)</p>

<pre><code>blackberry-nativepackager -package GoodbyeIDE.bar bar-descriptor.xml -devMode -debugToken ~/Library/Research\ In\ Motion/debugtoken1.bar
</code></pre>

<p>Deploy</p>

<pre><code>blackberry-deploy -installApp 169.254.0.1 -password pass GoodbyeIDE.bar
</code></pre>

<h2>View logs over SSH</h2>

<pre><code>blackberry-connect 169.254.0.1 -password pass
</code></pre>

<p>open another console and run</p>

<pre><code>ssh devuser@169.254.0.1
</code></pre>

<p>run command</p>

<pre><code>slog2info -w
</code></pre>

<p><a href="http://devblog.blackberry.com/2013/05/command-line-rocks-part-2/">Command Line Rocks! Part 2 – Adding Multiple Source Files and Libraries</a></p>

<p><a href="http://devblog.blackberry.com/2013/08/command-line-rocks-part-3-make-and-makefiles/">Command Line Rocks! Part 3 – Make and Makefiles</a></p>

<h1>Windows Phone 8</h1>

<p>The output of the build process includes a file with the .XAP extension. The XAP file is a zipped package that contains all the files required by your app. It’s the XAP file that you deploy to the emulator or to a phone, and that you publish to Windows Phone Store.</p>

<pre><code>devenv NameOfSolution /Rebuild "Release|Mixed Platforms"

MSBuild MyProject.csproj /p:OutDir=d:\builds\mindon-projs\
</code></pre>

<p>You can override the project-specific folder behavior by specifying.</p>

<p>/p:GenerateProjectSpecificOutputFolder=false</p>

<pre><code>MSBuild.exe MyProject/project.jsproj /p:Configuration=Release /t:Build /m
</code></pre>

<h2>MSBuild Command-Line Reference</h2>

<p><a href="http://msdn.microsoft.com/en-us/library/ms164311.aspx">http://msdn.microsoft.com/en-us/library/ms164311.aspx</a></p>

<p><a href="http://msdn.microsoft.com/en-us/library/windowsphone/develop/jj681686.aspx">How to sign a company app by using XapSignTool</a></p>

<pre><code>set path=%path%;"%ProgramFiles(x86)%\Microsoft SDKs\Windows Phone\v8.0\Tools\XapSignTool"

XapSignTool.exe sign /f PFXFile /p Password XAP
</code></pre>

<p><a href="https://github.com/AndreasOM/wp8-directx-commandline">Simple Windows Phone 8 (C++/native only) DirectX project with Command Line Build</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android App Data & Folders]]></title>
    <link href="http://mindon.github.com/blog/2013/07/20/android-data-and-folders/"/>
    <updated>2013-07-20T11:16:00+08:00</updated>
    <id>http://mindon.github.com/blog/2013/07/20/android-data-and-folders</id>
    <content type="html"><![CDATA[<p>Context context = getApplicationContext();</p>

<h2>SQLite Databases</h2>

<pre><code>context.getDatabasePath("myDbName")
</code></pre>

<h2>Cache</h2>

<p>System will clean it auto if low memory</p>

<pre><code>context.getCacheDir()
</code></pre>

<h2>Lib</h2>

<p>context.getFilesDir()</p>

<h2>Apk &amp; resources path</h2>

<p>context.getPackageCodePath()
context.getPackageResourcePath</p>

<h2>Shared Preferences</h2>

<p>getSharedPreferences()
getPreferences()</p>

<h2>Internal Storage</h2>

<p>removed when uninstall the app
MODE_PRIVATE | MODE_APPEND | MODE_WORLD_READABLE | MODE_WORLD_WRITEABLE</p>

<pre><code>FileOutputStream fos = openFileOutput(flName, Context.MODE_PRIVATE);    
fos.write(content.getBytes());    
fos.close();  
</code></pre>

<h2>Internal Files Operations</h2>

<p>Internal files path</p>

<p>.getDir()
.getFilesDir()
.deleteFile()
.fileList</p>

<h2>External Storage</h2>

<p><strong>Checking media availability</strong></p>

<p>.getExternalStorageState()</p>

<p>Environment.MEDIA_MOUNTED | MEDIA_MOUNTED_READ_ONLY</p>

<pre><code>Environment.getExternalStorageDirectory()


Environment.getExternalStoragePublicDirectory(
        Environment.DIRECTORY_PICTURES
    )


&lt;uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/&gt;
</code></pre>

<p>.getExternalStoragePublicDirectory()</p>

<p>Environment.DIRECTORY_MUSIC | DIRECTORY_PICTURES | DIRECTORY_RINGTONES</p>

<p>.getExternalCacheDir()</p>
]]></content>
  </entry>
  
</feed>
