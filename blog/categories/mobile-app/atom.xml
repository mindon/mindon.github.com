<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mobile-app | Mindon.IDEA]]></title>
  <link href="http://mindon.github.io/blog/categories/mobile-app/atom.xml" rel="self"/>
  <link href="http://mindon.github.io/"/>
  <updated>2015-06-25T18:54:09+08:00</updated>
  <id>http://mindon.github.io/</id>
  <author>
    <name><![CDATA[Mindon Feng]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[All Kinds of 2048!]]></title>
    <link href="http://mindon.github.io/blog/2014/05/02/all-kinds-of-2048/"/>
    <updated>2014-05-02T08:17:00+08:00</updated>
    <id>http://mindon.github.io/blog/2014/05/02/all-kinds-of-2048</id>
    <content type="html"><![CDATA[<p>在 Flappy Bird 的疯狂Clone之后，又有了 2048 复制 three 的疯狂。</p>

<p>Exploring the open source 2048 game javascript examples</p>

<p><a href="http://learnjs.io/blog/2014/03/17/exploring-open-source-2048-game-javascript-examples/">http://learnjs.io/blog/2014/03/17/exploring-open-source-2048-game-javascript-examples/</a></p>

<p>2048玩法思路【果壳日志】</p>

<p><a href="http://www.guokr.com/blog/748078/">http://www.guokr.com/blog/748078/</a></p>

<!--more-->


<p>More 2048
<a href="http://cyberzhg.github.io/2048/">http://cyberzhg.github.io/2048/</a></p>

<p>源码：<a href="https://github.com/CyberZHG/2048">https://github.com/CyberZHG/2048</a></p>

<p>从2 到 2048 需要</p>

<p>2 - 4 - 8 - 16 - 32 - 64 - 128 - 256 - 512 - 1024 - 2048 - &hellip;</p>

<p>即 2<sup>1</sup>  &hellip;. 2<sup>11</sup>， 需提供11种状态即可到2048</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Wear]]></title>
    <link href="http://mindon.github.io/blog/2014/03/20/android-wearable-sdk/"/>
    <updated>2014-03-20T22:31:00+08:00</updated>
    <id>http://mindon.github.io/blog/2014/03/20/android-wearable-sdk</id>
    <content type="html"><![CDATA[<p><a href="http://developer.android.com/wear/">Android Wear</a> SDK makes Android apps connected with wearable devices. The <a href="http://moto360.motorola.com/">Moto 360</a> is coming.</p>

<p>First, <a href="http://developer.android.com/wear/preview/start.html">Sign Up</a> for the Developer Preview.</p>

<p>You could joining the <a href="http://g.co/androidweardev">Android Wear Developers</a> Google+ Community.</p>

<p>Then, you will get an email providing link of example and <a href="https://play.google.com/apps/testing/com.google.android.wearablepreview.app">Android Wear Preview App</a></p>

<!--more-->


<p>Third, you need to download <a href="https://developer.android.com/sdk/">Android SDK</a> and start the emulator for Android Wear, one is Round, another is Square both 1.7&#8217;.</p>

<p>Connect the wear emulator with the Android Wear Preview app, then your android device notifications will be shown in the emulator screen.</p>

<blockquote><p> Android Wear extends the Android platform to a new generation of wearable devices.</p>

<p> Small, powerful devices, worn on the body. Useful information when you need it most. Intelligent answers to spoken questions. Tools to help reach fitness goals. Your key to a multiscreen world.</p></blockquote>

<p>There&rsquo;s a <a href="www.androidpolice.com/2014/03/19/apk-teardown-download-you-can-try-the-android-wear-launcher-on-your-device-now-heres-whats-inside/">wear launcher</a> about 3.8MB,</p>

<p>and another Wear Preview App apk (named Android_Wear_Beta.apk, 600+KB) for those incompatible andriod devices.</p>

<blockquote><p> The Android Wear Preview app is compatible with Android 4.3 and higher and is not available for the Android emulator.</p></blockquote>

<p><span id="link-tags">Android Wear Preview;Wear Preview App apk</span></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Callstack Trace for QML Js]]></title>
    <link href="http://mindon.github.io/blog/2014/03/20/a-callstack-trace-for-qml-js/"/>
    <updated>2014-03-20T05:02:00+08:00</updated>
    <id>http://mindon.github.io/blog/2014/03/20/a-callstack-trace-for-qml-js</id>
    <content type="html"><![CDATA[<p>QNX RTOS is a awesome OS. That&rsquo;s where BlackBerry 10 comes from.</p>

<p>The last year (2013), we&rsquo;d spent lots of time on the WeChat for BlackBerry 10.</p>

<p>QML tech is good for an mobile app UI, using JavaScript. And there&rsquo;s no <code>console.trace()</code> in QML to trace the callstacks, here&rsquo;s mine:</p>

<!--more-->




<script src="https://gist.github.com/mindon/9524222.js"></script>


<p><span id="link-tags">RTOS;BlackBerry 10;QML</span></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A UI Unit]]></title>
    <link href="http://mindon.github.io/blog/2014/03/16/a-ui-unit/"/>
    <updated>2014-03-16T09:33:00+08:00</updated>
    <id>http://mindon.github.io/blog/2014/03/16/a-ui-unit</id>
    <content type="html"><![CDATA[<p>What kind of basic abilities should be with an UI unit?</p>

<p>As a web developer, an UI includes: Data, DOM, CSS, JavaScript.</p>

<p>That&rsquo;s Data, Data Container, Display Style, Interactions.</p>

<p>First, an UI needs datum: 1) Static data;  2) Dynamic data [Optional]</p>

<!--more-->


<p>For dynamic data, it needs these abilities:</p>

<ol>
<li><p> Receive initialization data, it may be tranfered from another UI unit.</p></li>
<li><p> Transfer data to another UI unit;</p></li>
<li><p> Subscribe data changes;</p></li>
<li><p> Publish data changes.</p></li>
</ol>


<p>Interactions may change datum, data containers or styles.</p>

<ol>
<li><p> UI enter/exit events</p></li>
<li><p> UI active/disactive events</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[QML Features Should Be in BlackBerry 10 OS]]></title>
    <link href="http://mindon.github.io/blog/2014/03/15/qml-features-expected-in-blackberry-10-os/"/>
    <updated>2014-03-15T18:51:00+08:00</updated>
    <id>http://mindon.github.io/blog/2014/03/15/qml-features-expected-in-blackberry-10-os</id>
    <content type="html"><![CDATA[<p>I&rsquo;m one of developers of WeChat BB10 version. Mainly charge on QML UI and interactivities with app APIs.</p>

<p>BB10 WeChat may be one of the most complex bb10 apps in BlackBerry World.</p>

<p>Here&rsquo;s features should be in BB10 QML, which I implemented in the WeChat mobile app for BB10.</p>

<ul>
<li><p>QML actived event</p></li>
<li><p>QML closed event</p></li>
<li><p>QML Data Share Methods: a) Method to tranfer data from QML A to B ( open B from A ); b) Methods to set/get/clear app shared data in QML.</p></li>
</ul>


<!--more-->


<ul>
<li><p>QML reuse or not ( A - B - C - D: if open QML B from D, close D and C, reuse B )</p></li>
<li><p>QML asyn publish/subscribe methods</p></li>
<li><p>Flag to turn off auto-translation in system language ( Dialog, Back and Invocations )</p></li>
<li><p>Support mutil-image previewer (zoomable) with invocation.</p></li>
<li><p>Letters scrollbar</p></li>
<li><p>A method to call js methods in QML from ListItem</p></li>
</ul>


<p>If BlackBerry 10 want more better apps, Its QML should provide features above. Or in a js library for QML.</p>

<p><span id="link-tags">BB10;BlackBerry;WeChat;QML</span></p>
]]></content>
  </entry>
  
</feed>
