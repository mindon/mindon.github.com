<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mobile-App | Mindon.IDEA]]></title>
  <link href="http://mindon.github.com/blog/categories/mobile-app/atom.xml" rel="self"/>
  <link href="http://mindon.github.com/"/>
  <updated>2014-03-02T17:38:48+08:00</updated>
  <id>http://mindon.github.com/</id>
  <author>
    <name><![CDATA[Mindon Feng]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[fix adb error under win8]]></title>
    <link href="http://mindon.github.com/blog/2013/09/15/fix-adb-error-under-win8/"/>
    <updated>2013-09-15T16:27:00+08:00</updated>
    <id>http://mindon.github.com/blog/2013/09/15/fix-adb-error-under-win8</id>
    <content type="html"><![CDATA[<h2>error: device not found</h2>

<p>1)  Find "Device Manager" in "PC Info";</p>

<p>2)  Get your device in the "Other devices";</p>

<p>3)  Update driver and choose your adt folder to install the driver.</p>

<h2>Failure [INSTALL_PARSE_FAILED_INCONSISTENT_CERTIFICATES]</h2>

<p>Uninstall your old version app on your device before install the new apk.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building mobile apps from the command line]]></title>
    <link href="http://mindon.github.com/blog/2013/09/15/build-mobile-apps-from-command-line/"/>
    <updated>2013-09-15T09:04:00+08:00</updated>
    <id>http://mindon.github.com/blog/2013/09/15/build-mobile-apps-from-command-line</id>
    <content type="html"><![CDATA[<p>Following are command line reference of building mobile apps for Android, iOS, BB10 and WP8.</p>

<h1>Android</h1>

<p>Managing Projects from the Command Line</p>

<p><a href="http://developer.android.com/tools/projects/projects-cmdline.html">http://developer.android.com/tools/projects/projects-cmdline.html</a></p>

<h2>Creating an Android Project</h2>

<pre><code>android create project \
--target &lt;target_ID&gt; \
--name &lt;your_project_name&gt; \
--path path/to/your/project \
--activity &lt;your_activity_name&gt; \
--package &lt;your_package_namespace&gt;
</code></pre>

<h2>Updating a Project</h2>

<pre><code>android update project --name &lt;project_name&gt; --target &lt;target_ID&gt;
--path &lt;path_to_your_project&gt;
</code></pre>

<h2>Setting up a Library Project</h2>

<pre><code>android create lib-project --name &lt;your_project_name&gt; \
--target &lt;target_ID&gt; \
--path path/to/your/project \
--package &lt;your_library_package_namespace&gt;
</code></pre>

<p><a href="http://developer.android.com/guide/topics/manifest/manifest-intro.html">The AndroidManifest.xml File Reference</a></p>

<!--more-->


<h2>Updating a library project</h2>

<pre><code>android update lib-project \
--target &lt;target_ID&gt; \
--path path/to/your/project
</code></pre>

<h2>Referencing a Library Project</h2>

<pre><code>android update project \
--target &lt;target_ID&gt; \
--path path/to/your/project
--library path/to/library_projectA
</code></pre>

<p>This command updates the application project's build properties to include a reference to the library project. Specifically, it adds an android.library.reference.n property to the project's project.properties file.</p>

<h2>Declaring library components in the manifest file</h2>

<p>In the manifest file of the application project, you must add declarations of all components that the application will use that are imported from a library project. For example, you must declare any <activity>, <service>, <receiver>, <provider>, and so on, as well as <permission>, <uses-library>, and similar elements.</p>

<p>Building and Running from the Command Line</p>

<p><a href="http://developer.android.com/tools/building/building-cmdline.html">http://developer.android.com/tools/building/building-cmdline.html</a></p>

<h2>Building in Debug/Release Mode</h2>

<pre><code>ant debug
ant release
</code></pre>

<p><a href="http://developer.android.com/tools/publishing/app-signing.html">Signing Your Applications</a></p>

<h2>Running on a Device</h2>

<pre><code>adb -d install path/to/your/app.apk
</code></pre>

<p>update installation</p>

<pre><code>adb -d -r install path/to/your/app.apk
</code></pre>

<h1>iOS</h1>

<p>To be able to find the command line, the trick was to watch the system console log while running a “build and archive” through Xcode.</p>

<pre><code>xcodebuild -project myproject1 -target target1


/usr/bin/xcrun -sdk iphoneos PackageApplication -v "${RELEASE_BUILDDIR}/${APPLICATION_NAME}.app" -o "${BUILD_HISTORY_DIR}/${APPLICATION_NAME}.ipa" --sign "${DEVELOPPER_NAME}" --embed "${PROVISONNING_PROFILE}"
</code></pre>

<p>RELEASE_BUILDDIR needs to be an absolute path.</p>

<p>you don't need the --sign or --embed options if you wish to keep the same signing/profile used when the .app was built.</p>

<p>Note that the ipa file path in -o "${ipa_path}" must be an absolute path. Otherwise you will probably get error: Unable to create '.../...ipa' or it will be silently ignored creating.</p>

<pre><code>xcodebuild -scheme &lt;SchemeName&gt; archive
</code></pre>

<p>Make sure you have selected the correct Xcode release by using xcode-select <path to Xcode.app></p>

<p>to resign a build</p>

<pre><code>codesign -f -vv -s "$DistributionIdentity" "$APPDIR"
</code></pre>

<h2>Other References</h2>

<p><a href="http://nachbaur.com/blog/building-ios-apps-for-over-the-air-adhoc-distribution">Building iOS apps for Over-The-Air AdHoc distribution</a></p>

<p><a href="https://github.com/ghughes/fruitstrap">Fruitstrap</a> is a command line tool that uses the private MobileDevice API to install an iOS application on a physical device over USB. It’s pretty easy to get set up.</p>

<pre><code>xcodebuild -scheme fruitstrap-demo -sdk iphoneos build

fruitstrap build/Debug-iphoneos/fruitstrap-demo.app
</code></pre>

<p>One command to build and install the app on the device.</p>

<pre><code>FRUITSTRAP_CLI=1 xcodebuild -scheme fruitstrap-demo -sdk iphoneos build
</code></pre>

<p><a href="https://github.com/facebook/xctool">xctool</a> is a replacement for Apple's xcodebuild that makes it easier to build and test iOS and Mac products. It's especially helpful for continuous integration.</p>

<h1>BlackBerry 10</h1>

<p>make -f [configuration]/makefile [target]</p>

<p><a href="http://developer.blackberry.com/native/documentation/core/com.qnx.doc.ide.userguide/topic/devel_build_from_command_line.html">Build from the command line</a></p>

<pre><code>mkbuild -ws &lt;workspace&gt; [options] 
mkbuild [-project] &lt;full_project_path&gt; [options] 
mkbuild -ws &lt;workspace&gt; -projects &lt;project1,project2&gt; [options]
</code></pre>

<p><a href="http://devblog.blackberry.com/2013/05/building-apps-without-an-ide/">Command Line Rocks! Building BlackBerry 10 Apps Without An IDE</a></p>

<pre><code>qcc -Vgcc_ntoarmv7le main.c -o main
</code></pre>

<p>for simulator</p>

<pre><code>qcc -Vgcc_ntox86 main.c -o main
</code></pre>

<p>bar-descriptor.xml file <a href="https://developer.blackberry.com/native/documentation/bb10/com.qnx.doc.native_sdk.devguide/com.qnx.doc.native_sdk.devguide/topic/r_blackberry_tablet_dtd_intro.html#r_blackberry_tablet_dtd_intro">full list of BAR application descriptor parameters</a></p>

<pre><code>&lt;qnx&gt;
  &lt;id&gt;com.example.GoodbyeIDE&lt;/id&gt;
  &lt;versionNumber&gt;1&lt;/versionNumber&gt;
  &lt;name&gt;Goodbye IDE&lt;/name&gt;
  &lt;asset path="main" entry="true"&gt;main&lt;/asset&gt;
&lt;/qnx&gt;
</code></pre>

<p>To create a BAR file: (<a href="https://www.blackberry.com/SignedKeys/codesigning.html">register with RIM to sign applications</a>, <a href="https://developer.blackberry.com/native/documentation/bb10/com.qnx.doc.native_sdk.devguide/com.qnx.doc.native_sdk.devguide/topic/t_setup_manual_create_debug_token_cmdline.html">create a debug token</a>)</p>

<pre><code>blackberry-nativepackager -package GoodbyeIDE.bar bar-descriptor.xml -devMode -debugToken ~/Library/Research\ In\ Motion/debugtoken1.bar
</code></pre>

<p>Deploy</p>

<pre><code>blackberry-deploy -installApp 169.254.0.1 -password pass GoodbyeIDE.bar
</code></pre>

<h2>View logs over SSH</h2>

<pre><code>blackberry-connect 169.254.0.1 -password pass
</code></pre>

<p>open another console and run</p>

<pre><code>ssh devuser@169.254.0.1
</code></pre>

<p>run command</p>

<pre><code>slog2info -w
</code></pre>

<p><a href="http://devblog.blackberry.com/2013/05/command-line-rocks-part-2/">Command Line Rocks! Part 2 – Adding Multiple Source Files and Libraries</a></p>

<p><a href="http://devblog.blackberry.com/2013/08/command-line-rocks-part-3-make-and-makefiles/">Command Line Rocks! Part 3 – Make and Makefiles</a></p>

<h1>Windows Phone 8</h1>

<p>The output of the build process includes a file with the .XAP extension. The XAP file is a zipped package that contains all the files required by your app. It’s the XAP file that you deploy to the emulator or to a phone, and that you publish to Windows Phone Store.</p>

<pre><code>devenv NameOfSolution /Rebuild "Release|Mixed Platforms"

MSBuild MyProject.csproj /p:OutDir=d:\builds\mindon-projs\
</code></pre>

<p>You can override the project-specific folder behavior by specifying.</p>

<p>/p:GenerateProjectSpecificOutputFolder=false</p>

<pre><code>MSBuild.exe MyProject/project.jsproj /p:Configuration=Release /t:Build /m
</code></pre>

<h2>MSBuild Command-Line Reference</h2>

<p><a href="http://msdn.microsoft.com/en-us/library/ms164311.aspx">http://msdn.microsoft.com/en-us/library/ms164311.aspx</a></p>

<p><a href="http://msdn.microsoft.com/en-us/library/windowsphone/develop/jj681686.aspx">How to sign a company app by using XapSignTool</a></p>

<pre><code>set path=%path%;"%ProgramFiles(x86)%\Microsoft SDKs\Windows Phone\v8.0\Tools\XapSignTool"

XapSignTool.exe sign /f PFXFile /p Password XAP
</code></pre>

<p><a href="https://github.com/AndreasOM/wp8-directx-commandline">Simple Windows Phone 8 (C++/native only) DirectX project with Command Line Build</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android App Data & Folders]]></title>
    <link href="http://mindon.github.com/blog/2013/07/20/android-data-and-folders/"/>
    <updated>2013-07-20T11:16:00+08:00</updated>
    <id>http://mindon.github.com/blog/2013/07/20/android-data-and-folders</id>
    <content type="html"><![CDATA[<p>Context context = getApplicationContext();</p>

<h2>SQLite Databases</h2>

<pre><code>context.getDatabasePath("myDbName")
</code></pre>

<h2>Cache</h2>

<p>System will clean it auto if low memory</p>

<pre><code>context.getCacheDir()
</code></pre>

<h2>Lib</h2>

<p>context.getFilesDir()</p>

<h2>Apk &amp; resources path</h2>

<p>context.getPackageCodePath()
context.getPackageResourcePath</p>

<h2>Shared Preferences</h2>

<p>getSharedPreferences()
getPreferences()</p>

<h2>Internal Storage</h2>

<p>removed when uninstall the app
MODE_PRIVATE | MODE_APPEND | MODE_WORLD_READABLE | MODE_WORLD_WRITEABLE</p>

<pre><code>FileOutputStream fos = openFileOutput(flName, Context.MODE_PRIVATE);    
fos.write(content.getBytes());    
fos.close();  
</code></pre>

<h2>Internal Files Operations</h2>

<p>Internal files path</p>

<p>.getDir()
.getFilesDir()
.deleteFile()
.fileList</p>

<h2>External Storage</h2>

<p><strong>Checking media availability</strong></p>

<p>.getExternalStorageState()</p>

<p>Environment.MEDIA_MOUNTED | MEDIA_MOUNTED_READ_ONLY</p>

<pre><code>Environment.getExternalStorageDirectory()


Environment.getExternalStoragePublicDirectory(
        Environment.DIRECTORY_PICTURES
    )


&lt;uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/&gt;
</code></pre>

<p>.getExternalStoragePublicDirectory()</p>

<p>Environment.DIRECTORY_MUSIC | DIRECTORY_PICTURES | DIRECTORY_RINGTONES</p>

<p>.getExternalCacheDir()</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DaSign: Light up your life]]></title>
    <link href="http://mindon.github.com/blog/2013/07/09/dasign-light-up-your-life/"/>
    <updated>2013-07-09T22:54:00+08:00</updated>
    <id>http://mindon.github.com/blog/2013/07/09/dasign-light-up-your-life</id>
    <content type="html"><![CDATA[<h2>DaSign</h2>

<p>The  signs to light up your life.</p>

<p>It's Mindon first Android app :D</p>

<p>It's more than a SVG(Scalable Vector Graphics) viewer, but a powerful tool to declare yourself.</p>

<p>Small install package size - 0.3MB only! 90+ super HD signs included!</p>

<p>Show it with your nexus 7, it will be super cool!</p>

<p>Do not hesitate to show it when your L8 ingress team taking photos.</p>

<p><img src="/images/blog/dasign/prompt.png" alt="" /></p>

<p>It's <strong>FREE</strong>, without any advertisements.</p>

<!--more-->


<p>If you are an ingress player, you should own it.</p>

<p>If you reach L8 in the game ingress, taking a team photo, you need it.</p>

<p>If you are a Mayday fans, It makes your group special.</p>

<p>If you like others to be Mayday fans, equip them with it.</p>

<p>It fits all kinds of screens with high resolution. Yes, it's vector.(SVG format)</p>

<p>[Operations]  1) Long tap or slide to show list; 2) Double tap to show information of the sign; 3) Tap to hide list.</p>

<p>Here's the Google Play link : <a href="https://play.google.com/store/apps/details?id=com.mindon.idea.dasign">DaSign @ Google Play</a>.</p>

<p><img src="/images/blog/dasign/dasign-qr.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cascades Native App Development Tips]]></title>
    <link href="http://mindon.github.com/blog/2013/03/23/blackberry-cascades-native-app-development-tips/"/>
    <updated>2013-03-23T21:42:00+08:00</updated>
    <id>http://mindon.github.com/blog/2013/03/23/blackberry-cascades-native-app-development-tips</id>
    <content type="html"><![CDATA[<p>Google+ Community - <a href="https://plus.google.com/communities/102767584651216621172">Blackberry 10 X-Dev : Cascades &amp; WebWorks for BB10</a></p>

<p>News: <strong>BlackBerry Z10 Officially Available on AT&amp;T</strong></p>

<blockquote><p>The BlackBerry Z10 smartphone is now officially available on AT&amp;T.</p>

<p>The struggling manufacturer — which is hopeful its new flagship device will ignite a company resurgence — announced on Friday the Z10 can finally be activated on AT&amp;T. It costs $199 with a two-year contract.</p>

<p>BlackBerry, formerly known as Research In Motion (RIM), also sent a tweet at midnight ET announcing Best Buy will start selling the device on Friday for $199 with a two-year contract.</p></blockquote>

<p><a href="http://us.blackberry.com/smartphones/blackberry-z10.html">BlackBerry Z10: Built to Keep You Moving</a></p>

<h2>Using proxy with the command line tools</h2>

<p>Remember to use --proxyhost &amp; -proxyport as the FIRST two parameters when using command line tools from blackberry.tools.SDK.</p>

<!--more-->


<p>example:</p>

<pre><code>blackberry-signer -proxyhost 12.34.56.78 -proxyport 8080 ....
</code></pre>

<p>Download the Command-line Tools from <a href="https://developer.blackberry.com/android/tools/">https://developer.blackberry.com/android/tools/</a></p>

<p>Unzip and set the path blackberry.tools.SDK/bin to env. variable PATH then you could use the apk2bar, blackberry-signer or other command line tools.</p>

<h2>How to signed the .bar through a proxy?</h2>

<p>Use <strong>batchbar-signer</strong> won't work. you could use blackberry-signer directly.</p>

<p>Example:</p>

<pre><code>blackberry-signer -proxyhost 12.34.56.78 -proxyport 8080 -storepass your_store_pwd demo.bar
</code></pre>

<p>the command tools could be found <a href="https://developer.blackberry.com/android/tools/">https://developer.blackberry.com/android/tools/</a></p>

<h2><strong>config.pri</strong> NOT including sources &amp; headers, make failed error</h2>

<p>When building project in QNX Momentics IDE, If nothing to compile. It may be lack of sources &amp; headers in your auto-generated config.pri</p>

<p>This is caused by incorrect source folder settings, here's the steps to solve the problem:</p>

<ol>
<li><p>Right click on the project in "Project Explorer", choose "Properties" at the bottom</p></li>
<li><p>On the left top input field with tips "type filter text", input "paths"</p></li>
<li><p>Click on the item "Paths and Symbols" under "C/C++ General"</p></li>
<li><p>Activate the 3rd tab named "Source Location"</p></li>
<li><p>add the proper source folder by Click "Add Folder" and choose "src"</p></li>
<li><p>"Delete the" incorrect source folder</p></li>
</ol>


<h2><strong>config.pri</strong> not auto generated or updated?</h2>

<p>Update your SDK to 10.0.10+</p>

<h2>Steps to test an app before submit to (Blackberry) App World</h2>

<ol>
<li><p>Upload app and place in DRAFT mode.</p></li>
<li><p>Add user to the sandbox (BBID).</p></li>
<li><p>Enter (Blackberry) <strong>App World</strong> on device, swipe down to see the app menu, choose <strong>settings</strong>, click <strong>Development Mode</strong>, enter content id.</p></li>
</ol>


<p><i id="link-tags">Blackberry Z10;Blackberry</i></p>
]]></content>
  </entry>
  
</feed>
